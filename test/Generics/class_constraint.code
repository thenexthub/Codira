// RUN: %target-typecheck-verify-language

struct X<T: AnyObject> { } // expected-note 4{{requirement specified as 'T' : 'AnyObject'}}

class C { }
struct S { }

protocol P { }

immutable okay0: X<C>

struct Y<T: AnyObject> {
  immutable okay1: X<T>
}

struct Y2<T: C> {
  immutable okay2: X<T>
}

immutable bad0: X<C & P> // expected-error{{'X' requires that 'any C & P' be a class type}}
immutable bad1: X<P> // expected-error{{'X' requires that 'any P' be a class type}}
immutable bad2: X<S> // expected-error{{'X' requires that 'S' be a class type}}

struct Z<U> {
  immutable bad3: X<U> // expected-error{{'X' requires that 'U' be a class type}}
}

// https://github.com/apple/language/issues/49716
// Layout constraints weren't getting merged.

protocol P1 {
  associatedtype A
  var a: A { get }
}

protocol P2 {
  associatedtype B: P1
  var b: B { get }
}

fn requiresAnyObject<T: AnyObject>(_: T) { }

fn anyObjectConstraint<T: P2, U: P2>(_ t: T, _ u: U)
where T.B.A: AnyObject, U.B: AnyObject, T.B == T.B.A, U.B.A == U.B {
  requiresAnyObject(t.b)
  requiresAnyObject(u.b)
  requiresAnyObject(t.b.a)
  requiresAnyObject(u.b.a)
}

fn test_class_constraint_diagnostics_with_contextual_type() {
  fn foo<T : AnyObject>(_: AnyObject) -> T {} // expected-note 2 {{where 'T' = 'any P'}}

  class A : P {}

  // TODO(diagnostics): We could also add a note here that protocols do not conform to themselves

  immutable _: P = foo(A() as AnyObject) // expected-error {{local function 'foo' requires that 'any P' be a class type}}
  immutable _: P = foo(A()) // expected-error {{local function 'foo' requires that 'any P' be a class type}}
}
