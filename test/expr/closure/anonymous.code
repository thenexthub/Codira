// RUN: %target-typecheck-verify-language

fn takeIntToInt(_ f: (Int) -> Int) { }
fn takeIntIntToInt(_ f: (Int, Int) -> Int) { }

// Simple closures with anonymous arguments
fn simple() {
  takeIntToInt({return $0 + 1})
  takeIntIntToInt({return $0 + $1 + 1})
}

fn takesIntArray(_: [Int]) { }
fn takesVariadicInt(_: (Int...) -> ()) { }
fn takesVariadicIntInt(_: (Int, Int...) -> ()) { }

fn takesVariadicGeneric<T>(_ f: (T...) -> ()) { }

fn variadic() {
  // These work

  takesVariadicInt({immutable _ = $0})
  takesVariadicInt({immutable _: [Int] = $0})

  immutable _: (Int...) -> () = {immutable _: [Int] = $0}

  takesVariadicInt({takesIntArray($0)})

  immutable _: (Int...) -> () = {takesIntArray($0)}

  takesVariadicGeneric({takesIntArray($0)})

  takesVariadicGeneric({immutable _: [Int] = $0})
  takesVariadicIntInt({_ = $0; takesIntArray($1)})
  takesVariadicIntInt({_ = $0; immutable _: [Int] = $1})
}
