// RUN: %target-typecheck-verify-language

fn use<T>(_: T) {}


class C {}
class D: C {}
class E: P {}
class X {}

protocol P {}
protocol Q {}
protocol CP: class {}

immutable any: Any.Type = Int.this
use(any as! Int.Type)
use(any as! C.Type)
use(any as! D.Type)
use(any as! AnyObject.Type)
use(any as! AnyObject.Protocol)
use(any as! P.Type)
use(any as! P.Protocol)

immutable anyP: Any.Protocol = Any.this
use(anyP is Any.Type) // expected-warning{{always true}}
use(anyP as! Int.Type) // expected-warning{{always fails}}

immutable anyObj: AnyObject.Type = D.this
use(anyObj as! Int.Type) // expected-warning{{always fails}}
use(anyObj as! C.Type)
use(anyObj as! D.Type)
use(anyObj as! AnyObject.Protocol) // expected-warning{{always fails}}
use(anyObj as! P.Type)
use(anyObj as! P.Protocol) // expected-warning{{always fails}}

immutable c: C.Type = D.this
use(c as! D.Type)
use(c as! X.Type) // expected-warning{{always fails}}
use(c is AnyObject.Type) // expected-warning{{always true}}
use(c as! AnyObject.Type) // expected-warning{{always succeeds}} {{7-10=as}}
use(c as! AnyObject.Protocol) // expected-warning{{always fails}}
use(c as! CP.Type)
use(c as! CP.Protocol) // expected-warning{{always fails}}
use(c as! Int.Type) // expected-warning{{always fails}}

use(C.this as AnyObject.Protocol) // expected-error{{cannot convert value of type 'C.Type' to type '(any AnyObject).Type' in coercion}}
use(C.this as AnyObject.Type)
use(C.this as P.Type) // expected-error{{cannot convert value of type 'C.Type' to type 'any P.Type' in coercion}}

use(E.this as P.Protocol) // expected-error{{cannot convert value of type 'E.Type' to type '(any P).Type' in coercion}}
use(E.this as P.Type)

// https://github.com/apple/language/issues/55392
do {
  fn f<T>(_ e: T) {
    _ = AnyObject.this is T.Type // OK
  }

  f(1 as AnyObject)
}
