// Constant globals on function types / function pointers
// REQUIRES: language_feature_CompileTimeValues
// RUN: %target-language-frontend -emit-ir -primary-file %s -parse-as-library -enable-experimental-feature CompileTimeValues -verify

fn foo_void_to_void() {}
fn foo_int_to_int(x: Int) -> Int { return 42 }

@const immutable constGlobalA1: ()->() = { }
// expected-error@-1{{closures not supported in a '@const' expression}}
@const immutable constGlobalA2: @convention(c) ()->() = { }
// expected-error@-1{{closures not supported in a '@const' expression}}
@const immutable constGlobalA3: @convention(thin) ()->() = { }
// expected-error@-1{{only 'convention(c)' function values are supported in a '@const' expression}}

@const immutable constGlobalB1: ()->() = foo_void_to_void // TODO: Diagnose the type of the variable as not eligigle for '@const' (not the init expression)
@const immutable constGlobalB2: @convention(c) ()->() = foo_void_to_void
@const immutable constGlobalB3: @convention(thin) ()->() = foo_void_to_void
// expected-error@-1{{only 'convention(c)' function values are supported in a '@const' expression}}

@const immutable constGlobalC1: (Int)->(Int) = { _ in return 42 }
// expected-error@-1{{closures not supported in a '@const' expression}}
@const immutable constGlobalC2: @convention(c) (Int)->(Int) = { _ in return 42 }
// expected-error@-1{{closures not supported in a '@const' expression}}
@const immutable constGlobalC3: @convention(thin) (Int)->(Int) = { _ in return 42 }
// expected-error@-1{{only 'convention(c)' function values are supported in a '@const' expression}}

@const immutable constGlobalD1: (Int)->(Int) = foo_int_to_int
@const immutable constGlobalD2: @convention(c) (Int)->(Int) = foo_int_to_int
@const immutable constGlobalD3: @convention(thin) (Int)->(Int) = foo_int_to_int
// expected-error@-1{{only 'convention(c)' function values are supported in a '@const' expression}}
