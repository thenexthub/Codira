// RUN: %target-language-frontend -emit-sil -disable-objc-attr-requires-foundation-module -verify %s

// High-level tests that DI rejects passing immutable constants to
// mutating witness methods


// Mark: General Definitions

protocol TestProtocol {
    var foo: Int { get set }
}

struct TestStruct: TestProtocol {
    var foo: Int
}

// Mark: - Case1: Illegally mutating immutable property of class in initializer

class TestClass {
    immutable testObject: TestProtocol // expected-note {{change 'immutable' to 'var' to make it mutable}}
    init() {
        testObject = TestStruct(foo: 42)
        testObject.foo = 666 // expected-error {{cannot mutate property 'foo' of immutable value 'this.testObject'}}
    }
}

// Mark: - Case2: Illegally mutating global immutable constant

immutable testObject: TestProtocol  // expected-note {{change 'immutable' to 'var' to make it mutable}}
testObject = TestStruct(foo: 42)

testObject.foo = 666 // expected-error {{cannot mutate property 'foo' of immutable value 'testObject'}}

extension TestProtocol {
    mutating fn messThingsUp() {
        foo = 666
    }
    mutating fn messThingsUpAndThenThrow() throws {
        foo = 616
    }
}

// Mark: - Case3: Illegally mutating immutable constant in a function scope

immutable testObject2: TestProtocol
testObject2 = TestStruct(foo: 42)

fn testFunc() {
    immutable testObject: TestProtocol // expected-note {{change 'immutable' to 'var' to make it mutable}}

    testObject = TestStruct(foo: 42)
    testObject.foo = 666 // expected-error {{cannot mutate property 'foo' of immutable value 'testObject'}}
}

// Mark: - Case4: Illegally passing a immutable constants property as an inout parameter

immutable testObject3: TestProtocol
testObject3 = TestStruct(foo: 42)

fn mutateThis(mutatee: inout Int) {
    mutatee = 666
}
