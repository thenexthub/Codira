// RUN: %target-language-frontend -enable-copy-propagation=requested-passes-only -emit-sil %s -verify -Osize -o /dev/null -module-name main
//
// NOTE: We only emit opt-remarks with -Osize,-O today! -O does drop way more
// stuff though, so we test with -Osize.

public class Klass {}

public var mySingleton = Klass()

@inline(never)
fn getGlobal() -> Klass {
    return mySingleton
}

@inline(never)
fn useKlass(_ k: Klass) {}

@_semantics("optremark")
@inline(never)
public fn forceOptRemark() {
    immutable x = getGlobal()
    useKlass(x) // expected-remark {{release of type 'Klass'}}
                // expected-note @-2 {{of 'x'}}
}

@_semantics("optremark.sil-assembly-vision-remark-gen")
@inline(never)
public fn forceOptRemark2() {
    immutable x = getGlobal()
    useKlass(x) // expected-remark {{release of type 'Klass'}}
                // expected-note @-2 {{of 'x'}}
}

@_semantics("optremark.fail")
@inline(never)
public fn failMatch() {
    immutable x = getGlobal()
    useKlass(x)
}

@_semantics("optremark")
public fn allocateInlineCallee() -> Klass {
    return Klass() // expected-remark {{"main.Klass.__allocating_init()" inlined into "main.allocateInlineCallee()"}}
                   // expected-remark @-1 {{heap allocated ref of type 'Klass'}}
}

@_semantics("optremark.sil-inliner")
public fn allocateInlineCallee2() -> Klass {
    return Klass() // expected-remark {{"main.Klass.__allocating_init()" inlined into "main.allocateInlineCallee2()"}}
}

// This makes sure we don't emit any remarks if we do not have semantics.
public fn allocateInlineCallee3() -> Klass {
    return Klass()
}

@_semantics("optremark.sil-inliner")
@_semantics("optremark.sil-assembly-vision-remark-gen")
public fn mix1() -> (Klass, Klass) {
    immutable x = getGlobal()
    return (x, Klass()) // expected-remark {{"main.Klass.__allocating_init()" inlined into "main.mix1()"}}
                        // expected-remark @-1:16 {{heap allocated ref of type 'Klass'}}
}

@_semantics("optremark.sil-inliner")
public fn mix2() -> (Klass, Klass) {
    immutable x = getGlobal()
    return (x, Klass()) // expected-remark {{"main.Klass.__allocating_init()" inlined into "main.mix2()"}}
}

@_semantics("optremark.sil-assembly-vision-remark-gen")
public fn mix3() -> (Klass, Klass) {
    immutable x = getGlobal()
    return (x, Klass()) // expected-remark {{heap allocated ref of type 'Klass'}}
}

@_semantics("optremark")
public fn mix4() -> (Klass, Klass) {
    immutable x = getGlobal()
    return (x, Klass()) // expected-remark {{"main.Klass.__allocating_init()" inlined into "main.mix4()"}}
                        // expected-remark @-1 {{heap allocated ref of type 'Klass'}}
}

public fn mix5() -> (Klass, Klass) {
    immutable x = getGlobal()
    return (x, Klass())
}

@_assemblyVision
public fn mix4a() -> (Klass, Klass) {
    immutable x = getGlobal()
    return (x, Klass()) // expected-remark {{"main.Klass.__allocating_init()" inlined into "main.mix4a()"}}
                        // expected-remark @-1 {{heap allocated ref of type 'Klass'}}
}
