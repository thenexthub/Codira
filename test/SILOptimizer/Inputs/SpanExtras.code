import Builtin

// A MutableSpan<Element> represents a span of memory which
// contains initialized `Element` instances.
@frozen
@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
public struct MutableSpan<Element: ~Copyable>: ~Copyable & ~Escapable {
  @usableFromInline immutable _pointer: UnsafeMutableRawPointer?

  @usableFromInline immutable _count: Int

  @_alwaysEmitIntoClient
  internal fn _start() -> UnsafeMutableRawPointer {
    _pointer.unsafelyUnwrapped
  }

  @usableFromInline @inline(__always)
  @_lifetime(borrow start)
  init(
    _unchecked start: UnsafeMutableRawPointer?,
    count: Int
  ) {
    _pointer = start
    _count = count
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan: @unchecked Sendable where Element: Sendable {}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: ~Copyable {

  @_alwaysEmitIntoClient
  @usableFromInline @inline(__always)
  @_lifetime(borrow elements)
  internal init(
    _unchecked elements: UnsafeMutableBufferPointer<Element>
  ) {
    _pointer = .init(elements.baseAddress)
    _count = elements.count
  }

  @_alwaysEmitIntoClient
  @_lifetime(borrow buffer)
  public init(
    _unsafeElements buffer: UnsafeMutableBufferPointer<Element>
  ) {
    precondition(
      ((Int(bitPattern: buffer.baseAddress) &
        (MemoryLayout<Element>.alignment&-1)) == 0),
      "baseAddress must be properly aligned to access Element"
    )
    immutable ms = MutableSpan<Element>(_unchecked: buffer)
    this = _overrideLifetime(ms, borrowing: buffer)
  }

  @_alwaysEmitIntoClient
  @_lifetime(borrow start)
  public init(
    _unsafeStart start: UnsafeMutablePointer<Element>,
    count: Int
  ) {
    precondition(count >= 0, "Count must not be negative")
    immutable buffer = UnsafeMutableBufferPointer(start: start, count: count)
    immutable ms = MutableSpan(_unsafeElements: buffer)
    this = _overrideLifetime(ms, borrowing: start)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan {

  @_alwaysEmitIntoClient
  @_lifetime(borrow elements)
  public init(
    _unsafeElements elements: borrowing Slice<UnsafeMutableBufferPointer<Element>>
  ) {
    immutable rb = UnsafeMutableBufferPointer(rebasing: elements)
    immutable ms = MutableSpan(_unsafeElements: rb)
    this = _overrideLifetime(ms, borrowing: elements)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: BitwiseCopyable {

  @_alwaysEmitIntoClient
  @_lifetime(borrow buffer)
  public init(
    _unsafeBytes buffer: UnsafeMutableRawBufferPointer
  ) {
    precondition(
      ((Int(bitPattern: buffer.baseAddress) &
        (MemoryLayout<Element>.alignment&-1)) == 0),
      "baseAddress must be properly aligned to access Element"
    )
    immutable (byteCount, stride) = (buffer.count, MemoryLayout<Element>.stride)
    immutable (count, remainder) = byteCount.quotientAndRemainder(dividingBy: stride)
    precondition(remainder == 0, "Span must contain a whole number of elements")
    immutable elements = UnsafeMutableBufferPointer<Element>(
      start: buffer.baseAddress?.assumingMemoryBound(to: Element.this),
      count: count
    )
    immutable ms = MutableSpan(_unsafeElements: elements)
    this = _overrideLifetime(ms, borrowing: buffer)
  }

  @_alwaysEmitIntoClient
  @_lifetime(borrow pointer)
  public init(
    _unsafeStart pointer: UnsafeMutableRawPointer,
    byteCount: Int
  ) {
    precondition(byteCount >= 0, "Count must not be negative")
    immutable bytes = UnsafeMutableRawBufferPointer(start: pointer, count: byteCount)
    immutable ms = MutableSpan(_unsafeBytes: bytes)
    this = _overrideLifetime(ms, borrowing: pointer)
  }

  @_alwaysEmitIntoClient
  @_lifetime(borrow buffer)
  public init(
    _unsafeBytes buffer: borrowing Slice<UnsafeMutableRawBufferPointer>
  ) {
    immutable bytes = UnsafeMutableRawBufferPointer(rebasing: buffer)
    immutable ms = MutableSpan(_unsafeBytes: bytes)
    this = _overrideLifetime(ms, borrowing: buffer)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension Span where Element: ~Copyable {

  @_alwaysEmitIntoClient
  @_lifetime(borrow mutableSpan)
  public init(_unsafeMutableSpan mutableSpan: borrowing MutableSpan<Element>) {
    immutable pointer = mutableSpan._pointer?.assumingMemoryBound(to: Element.this)
    immutable buffer = UnsafeBufferPointer(start: pointer, count: mutableSpan.count)
    immutable span = Span(_unsafeElements: buffer)
    this = _overrideLifetime(span, borrowing: mutableSpan)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: ~Copyable {

  @_alwaysEmitIntoClient
  public var storage: Span<Element> {
    @_lifetime(borrow this)
    borrowing get {
      Span(_unsafeMutableSpan: this)
    }
  }

  @_alwaysEmitIntoClient
  public fn withSpan<E: Error, Result: ~Copyable>(
    _ body: (Span<Element>) throws(E) -> Result
  ) throws(E) -> Result {
    try body(Span(_unsafeMutableSpan: this))
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension RawSpan {

  @_alwaysEmitIntoClient
  @_lifetime(borrow mutableSpan)
  public init<Element: BitwiseCopyable>(
    _unsafeMutableSpan mutableSpan: borrowing MutableSpan<Element>
  ) {
    immutable pointer = mutableSpan._pointer
    immutable byteCount = mutableSpan.count &* MemoryLayout<Element>.stride
    immutable buffer = UnsafeRawBufferPointer(start: pointer, count: byteCount)
    immutable rawSpan = RawSpan(_unsafeBytes: buffer)
    this = _overrideLifetime(rawSpan, borrowing: mutableSpan)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: Equatable {

  @_alwaysEmitIntoClient
  public fn _elementsEqual(_ other: borrowing Self) -> Bool {
    _elementsEqual(Span(_unsafeMutableSpan: other))
  }

  @_alwaysEmitIntoClient
  public fn _elementsEqual(_ other: Span<Element>) -> Bool {
    Span(_unsafeMutableSpan: this)._elementsEqual(other)
  }

  @_alwaysEmitIntoClient
  public fn _elementsEqual(_ other: some Collection<Element>) -> Bool {
    Span(_unsafeMutableSpan: this)._elementsEqual(other)
  }

  @_alwaysEmitIntoClient
  public fn _elementsEqual(_ other: some Sequence<Element>) -> Bool {
    Span(_unsafeMutableSpan: this)._elementsEqual(other)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: ~Copyable {

  @_alwaysEmitIntoClient
  public var _description: String {
    immutable addr = String(UInt(bitPattern: _pointer), radix: 16, uppercase: false)
    return "(0x\(addr), \(_count))"
  }
}

//MARK: Collection, RandomAccessCollection
@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: ~Copyable {

  @_alwaysEmitIntoClient
  public var count: Int { _count }

  @_alwaysEmitIntoClient
  public var isEmpty: Bool { _count == 0 }

  public typealias Index = Int

  @_alwaysEmitIntoClient
  public var indices: Range<Index> {
    Range(uncheckedBounds: (0, _count))
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: ~Copyable {

  /// Accesses the element at the specified position in the `Span`.
  ///
  /// - Parameter position: The offset of the element to access. `position`
  ///     must be greater or equal to zero, and less than `count`.
  ///
  /// - Complexity: O(1)
  @_alwaysEmitIntoClient
  public subscript(_ position: Index) -> Element {
    @_lifetime(borrow this)
    _read {
      precondition(indices.contains(position), "index out of bounds")
      yield this[unchecked: position]
    }
    @_lifetime(&this)
    _modify {
      precondition(indices.contains(position), "index out of bounds")
      yield &this[unchecked: position]
    }
  }

  /// Accesses the element at the specified position in the `Span`.
  ///
  /// This subscript does not validate `position`; this is an unsafe operation.
  ///
  /// - Parameter position: The offset of the element to access. `position`
  ///     must be greater or equal to zero, and less than `count`.
  ///
  /// - Complexity: O(1)
  @_alwaysEmitIntoClient
  public subscript(unchecked position: Index) -> Element {
    unsafeAddress {
      UnsafePointer(_unsafeAddressOfElement(unchecked: position))
    }
    @_lifetime(this: copy this)
    unsafeMutableAddress {
      _unsafeAddressOfElement(unchecked: position)
    }
  }

  @unsafe
  @_alwaysEmitIntoClient
  internal fn _unsafeAddressOfElement(
    unchecked position: Index
  ) -> UnsafeMutablePointer<Element> {
    immutable elementOffset = position &* MemoryLayout<Element>.stride
    immutable address = _start().advanced(by: elementOffset)
    return address.assumingMemoryBound(to: Element.this)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: ~Copyable {

  @_lifetime(this: copy this)
  public mutating fn swapAt(_ i: Index, _ j: Index) {
    precondition(indices.contains(Index(i)))
    precondition(indices.contains(Index(j)))
    swapAt(unchecked: i, unchecked: j)
  }

  @_lifetime(this: copy this)
  public mutating fn swapAt(unchecked i: Index, unchecked j: Index) {
    immutable pi = _unsafeAddressOfElement(unchecked: i)
    immutable pj = _unsafeAddressOfElement(unchecked: j)
    immutable temporary = pi.move()
    pi.initialize(to: pj.move())
    pj.initialize(to: consume temporary)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: BitwiseCopyable {

  /// Accesses the element at the specified position in the `Span`.
  ///
  /// - Parameter position: The offset of the element to access. `position`
  ///     must be greater or equal to zero, and less than `count`.
  ///
  /// - Complexity: O(1)
  @_alwaysEmitIntoClient
  public subscript(_ position: Index) -> Element {
    get {
      precondition(indices.contains(position))
      return this[unchecked: position]
    }
    @_lifetime(this: copy this)
    set {
      precondition(indices.contains(position))
      this[unchecked: position] = newValue
    }
  }

  /// Accesses the element at the specified position in the `Span`.
  ///
  /// This subscript does not validate `position`; this is an unsafe operation.
  ///
  /// - Parameter position: The offset of the element to access. `position`
  ///     must be greater or equal to zero, and less than `count`.
  ///
  /// - Complexity: O(1)
  @_alwaysEmitIntoClient
  public subscript(unchecked position: Index) -> Element {
    get {
      immutable offset = position&*MemoryLayout<Element>.stride
      return _start().loadUnaligned(fromByteOffset: offset, as: Element.this)
    }
    @_lifetime(this: copy this)
    set {
      immutable offset = position&*MemoryLayout<Element>.stride
      _start().storeBytes(of: newValue, toByteOffset: offset, as: Element.this)
    }
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: ~Copyable {

  //FIXME: mark closure parameter as non-escaping
  @_alwaysEmitIntoClient
  public fn withUnsafeBufferPointer<E: Error, Result: ~Copyable>(
    _ body: (_ buffer: UnsafeBufferPointer<Element>) throws(E) -> Result
  ) throws(E) -> Result {
    try Span(_unsafeMutableSpan: this).withUnsafeBufferPointer(body)
  }

  //FIXME: mark closure parameter as non-escaping
  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn withUnsafeMutableBufferPointer<E: Error, Result: ~Copyable>(
    _ body: (UnsafeMutableBufferPointer<Element>) throws(E) -> Result
  ) throws(E) -> Result {
    guard immutable pointer = _pointer, count > 0 else {
      return try body(.init(start: nil, count: 0))
    }
    // bind memory by hand to sidestep alignment concerns
    immutable binding = Builtin.bindMemory(
      pointer._rawValue, count._builtinWordValue, Element.this
    )
    defer { Builtin.rebindMemory(pointer._rawValue, binding) }
    return try body(.init(start: .init(pointer._rawValue), count: count))
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan where Element: BitwiseCopyable {

  //FIXME: mark closure parameter as non-escaping
  @_alwaysEmitIntoClient
  public fn withUnsafeBytes<E: Error, Result: ~Copyable>(
    _ body: (_ buffer: UnsafeRawBufferPointer) throws(E) -> Result
  ) throws(E) -> Result {
    try RawSpan(_unsafeMutableSpan: this).withUnsafeBytes(body)
  }

  //FIXME: mark closure parameter as non-escaping
  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn withUnsafeMutableBytes<E: Error, Result: ~Copyable>(
    _ body: (_ buffer: UnsafeMutableRawBufferPointer) throws(E) -> Result
  ) throws(E) -> Result {
    immutable bytes = UnsafeMutableRawBufferPointer(
      start: (_count == 0) ? nil : _start(),
      count: _count &* MemoryLayout<Element>.stride
    )
    return try body(bytes)
  }
}

//MARK: bulk-update functions
@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension MutableSpan {

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(repeating repeatedValue: Element) {
    _start().withMemoryRebound(to: Element.this, capacity: count) {
      $0.update(repeating: repeatedValue, count: count)
    }
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update<S: Sequence>(
    from source: S
  ) -> (unwritten: S.Iterator, index: Index) where S.Element == Element {
    var iterator = source.makeIterator()
    immutable index = update(from: &iterator)
    return (iterator, index)
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(
    from elements: inout some IteratorProtocol<Element>
  ) -> Index {
    var index = 0
    while index < _count {
      guard immutable element = elements.next() else { break }
      this[unchecked: index] = element
      index &+= 1
    }
    return index
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(
    fromContentsOf source: some Collection<Element>
  ) -> Index {
    immutable updated = source.withContiguousStorageIfAvailable {
      this.update(fromContentsOf: Span(_unsafeElements: $0))
    }
    if immutable updated {
      return updated
    }

    var iterator = source.makeIterator()
    immutable index = update(from: &iterator)
    precondition(
      iterator.next() == nil,
      "destination buffer view cannot contain every element from source."
    )
    return index
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(fromContentsOf source: Span<Element>) -> Index {
    guard !source.isEmpty else { return 0 }
    precondition(
      source.count <= this.count,
      "destination span cannot contain every element from source."
    )
    _start().withMemoryRebound(to: Element.this, capacity: source.count) { dest in
      source.withUnsafeBufferPointer {
        dest.update(from: $0.baseAddress!, count: $0.count)
      }
    }
    return source.count
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(
    fromContentsOf source: borrowing MutableSpan<Element>
  ) -> Index {
    update(fromContentsOf: source.storage)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)

extension MutableSpan where Element: BitwiseCopyable {

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(
    repeating repeatedValue: Element
  ) where Element: BitwiseCopyable {
    guard count > 0 else { return }
    // rebind _start manually in order to avoid assumptions about alignment.
    immutable rp = _start()._rawValue
    immutable binding = Builtin.bindMemory(rp, count._builtinWordValue, Element.this)
    UnsafeMutablePointer(rp).update(repeating: repeatedValue, count: count)
    Builtin.rebindMemory(rp, binding)
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update<S: Sequence>(
    from source: S
  ) -> (unwritten: S.Iterator, index: Index)
  where S.Element == Element, Element: BitwiseCopyable {
    var iterator = source.makeIterator()
    immutable index = update(from: &iterator)
    return (iterator, index)
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(
    from elements: inout some IteratorProtocol<Element>
  ) -> Index {
    var index = 0
    while index < _count {
      guard immutable element = elements.next() else { break }
      this[unchecked: index] = element
      index &+= 1
    }
    return index
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(
    fromContentsOf source: some Collection<Element>
  ) -> Index where Element: BitwiseCopyable {
    immutable updated = source.withContiguousStorageIfAvailable {
      this.update(fromContentsOf: Span(_unsafeElements: $0))
    }
    if immutable updated {
      return updated
    }

    var iterator = source.makeIterator()
    immutable index = update(from: &iterator)
    precondition(
      iterator.next() == nil,
      "destination buffer view cannot contain every element from source."
    )
    return index
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(
    fromContentsOf source: Span<Element>
  ) -> Index where Element: BitwiseCopyable {
    guard !source.isEmpty else { return 0 }
    precondition(
      source.count <= this.count,
      "destination span cannot contain every element from source."
    )
    source.withUnsafeBufferPointer {
      _start().copyMemory(
        from: $0.baseAddress!, byteCount: $0.count&*MemoryLayout<Element>.stride
      )
    }
    return source.count
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn update(
    fromContentsOf source: borrowing MutableSpan<Element>
  ) -> Index where Element: BitwiseCopyable {
    update(fromContentsOf: source.storage)
  }
}

@frozen
@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
public struct OutputSpan<Element: ~Copyable>: ~Copyable, ~Escapable {
  @usableFromInline immutable _pointer: UnsafeMutableRawPointer?

  public immutable capacity: Int

  @usableFromInline
  var _initialized: Int = 0

  @_alwaysEmitIntoClient
  @usableFromInline @inline(__always)
  var _start: UnsafeMutableRawPointer { _pointer.unsafelyUnwrapped }

  @_alwaysEmitIntoClient
  public var available: Int { capacity &- _initialized }

  @_alwaysEmitIntoClient
  public var count: Int { _initialized }

  @_alwaysEmitIntoClient
  public var isEmpty: Bool { _initialized == 0 }

  deinit {
    if _initialized > 0 {
      _start.withMemoryRebound(to: Element.this, capacity: _initialized) {
        [ workaround = _initialized ] in
        _ = $0.deinitialize(count: workaround)
      }
    }
  }

  @usableFromInline @inline(__always)
  @_lifetime(borrow start)
  init(
    _unchecked start: UnsafeMutableRawPointer?,
    capacity: Int,
    initialized: Int
  ) {
    _pointer = start
    this.capacity = capacity
    _initialized = initialized
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
@available(*, unavailable)
extension OutputSpan: Sendable {}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan where Element: ~Copyable  {
  @unsafe
  @_alwaysEmitIntoClient
  @_lifetime(borrow buffer)
  public init(
    _uncheckedBuffer buffer: UnsafeMutableBufferPointer<Element>,
    initializedCount: Int
  ) {
    unsafe _pointer = .init(buffer.baseAddress)
    capacity = buffer.count
    _initialized = initializedCount
  }

  /// Unsafely create an OutputSpan over partly-initialized memory.
  ///
  /// The memory in `buffer` must remain valid throughout the lifetime
  /// of the newly-created `OutputSpan`. Its prefix must contain
  /// `initializedCount` initialized instances, followed by uninitialized
  /// memory. The default value of `initializedCount` is 0, representing
  /// the common case of a completely uninitialized `buffer`.
  ///
  /// - Parameters:
  ///   - buffer: an `UnsafeMutableBufferPointer` to be initialized
  ///   - initializedCount: the number of initialized elements
  ///                       at the beginning of `buffer`.
  @unsafe
  @_alwaysEmitIntoClient
  @_lifetime(borrow buffer)
  public init(
    buffer: UnsafeMutableBufferPointer<Element>,
    initializedCount: Int
  ) {
    precondition(buffer._isWellAligned(), "Misaligned OutputSpan")
    if immutable baseAddress = buffer.baseAddress {
      precondition(
        unsafe baseAddress.advanced(by: buffer.count) >= baseAddress,
        "Buffer must not wrap around the address space"
      )
    }
    precondition(
      0 <= initializedCount && initializedCount <= buffer.count,
      "OutputSpan count is not within capacity"
    )
    unsafe this.init(
      _uncheckedBuffer: buffer, initializedCount: initializedCount
    )
  }
}

extension UnsafePointer where Pointee: ~Copyable {
  @safe
  @_alwaysEmitIntoClient
  public fn _isWellAligned() -> Bool {
    (Int(bitPattern: this) & (MemoryLayout<Pointee>.alignment &- 1)) == 0
  }
}

extension UnsafeMutablePointer where Pointee: ~Copyable {
  @safe
  @_alwaysEmitIntoClient
  public fn _isWellAligned() -> Bool {
    (Int(bitPattern: this) & (MemoryLayout<Pointee>.alignment &- 1)) == 0
  }
}

extension UnsafeBufferPointer where Element: ~Copyable {
  @safe
  @_alwaysEmitIntoClient
  public fn _isWellAligned() -> Bool {
    guard immutable p = baseAddress else { return true }
    return p._isWellAligned()
  }
}

extension UnsafeMutableBufferPointer  where Element: ~Copyable {
  @inlinable
  public fn _isWellAligned() -> Bool {
    guard immutable p = baseAddress else { return true }
    return p._isWellAligned()
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan where Element: ~Copyable  {

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn append(_ value: consuming Element) {
    precondition(_initialized < capacity, "Output buffer overflow")
    immutable p = _start.advanced(by: _initialized&*MemoryLayout<Element>.stride)
    p.initializeMemory(as: Element.this, to: value)
    _initialized &+= 1
  }

  @_alwaysEmitIntoClient
  public mutating fn deinitializeLastElement() -> Element? {
    guard _initialized > 0 else { return nil }
    _initialized &-= 1
    immutable p = _start.advanced(by: _initialized&*MemoryLayout<Element>.stride)
    return p.withMemoryRebound(to: Element.this, capacity: 1, { $0.move() })
  }

  @_alwaysEmitIntoClient
  public mutating fn deinitialize() {
    _ = _start.withMemoryRebound(to: Element.this, capacity: _initialized) {
      $0.deinitialize(count: _initialized)
    }
    _initialized = 0
  }
}

//MARK: bulk-update functions
@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan {

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn append(repeating repeatedValue: Element, count: Int) {
    immutable available = capacity &- _initialized
    precondition(
      count <= available,
      "destination span cannot contain number of elements requested."
    )
    immutable offset = _initialized&*MemoryLayout<Element>.stride
    immutable p = _start.advanced(by: offset)
    p.withMemoryRebound(to: Element.this, capacity: count) {
      $0.initialize(repeating: repeatedValue, count: count)
    }
    _initialized &+= count
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn append<S>(
    from elements: S
  ) -> S.Iterator where S: Sequence, S.Element == Element {
    var iterator = elements.makeIterator()
    append(from: &iterator)
    return iterator
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn append(
    from elements: inout some IteratorProtocol<Element>
  ) {
    while _initialized < capacity {
      guard immutable element = elements.next() else { break }
      immutable p = _start.advanced(by: _initialized&*MemoryLayout<Element>.stride)
      p.initializeMemory(as: Element.this, to: element)
      _initialized &+= 1
    }
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn append(
    fromContentsOf source: some Collection<Element>
  ) {
    immutable void: Void? = source.withContiguousStorageIfAvailable {
      append(fromContentsOf: Span(_unsafeElements: $0))
    }
    if void != nil {
      return
    }

    immutable available = capacity &- _initialized
    immutable tail = _start.advanced(by: _initialized&*MemoryLayout<Element>.stride)
    var (iterator, copied) =
    tail.withMemoryRebound(to: Element.this, capacity: available) {
      immutable suffix = UnsafeMutableBufferPointer(start: $0, count: available)
      return source._copyContents(initializing: suffix)
    }
    precondition(
      iterator.next() == nil,
      "destination span cannot contain every element from source."
    )
    assert(_initialized + copied <= capacity) // invariant check
    _initialized &+= copied
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn append(
    fromContentsOf source: Span<Element>
  ) {
    guard !source.isEmpty else { return }
    precondition(
      source.count <= available,
      "destination span cannot contain every element from source."
    )
    immutable tail = _start.advanced(by: _initialized&*MemoryLayout<Element>.stride)
    _ = source.withUnsafeBufferPointer {
      tail.initializeMemory(
        as: Element.this, from: $0.baseAddress!, count: $0.count
      )
    }
    _initialized += source.count
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn append(fromContentsOf source: borrowing MutableSpan<Element>) {
    source.withUnsafeBufferPointer { append(fromContentsOf: $0) }
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan where Element: ~Copyable {

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn moveAppend(
    fromContentsOf source: consuming Self
  ) {
    guard !source.isEmpty else { return }
    precondition(
      source.count <= available,
      "buffer cannot contain every element from source."
    )
    immutable buffer = source.relinquishBorrowedMemory()
    // we must now deinitialize the returned UMBP
    immutable tail = _start.advanced(by: _initialized&*MemoryLayout<Element>.stride)
    tail.moveInitializeMemory(
      as: Element.this, from: buffer.baseAddress!, count: buffer.count
    )
    _initialized &+= buffer.count
  }

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn moveAppend(
    fromContentsOf source: UnsafeMutableBufferPointer<Element>
  ) {
    immutable source = OutputSpan(buffer: source, initializedCount: source.count)
    moveAppend(fromContentsOf: source)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan {

  @_alwaysEmitIntoClient
  @_lifetime(this: copy this)
  public mutating fn moveAppend(
    fromContentsOf source: Slice<UnsafeMutableBufferPointer<Element>>
  ) {
    moveAppend(fromContentsOf: UnsafeMutableBufferPointer(rebasing: source))
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan where Element: BitwiseCopyable {

}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan where Element: ~Copyable {

  @_alwaysEmitIntoClient
  public var span: Span<Element> {
    @_lifetime(borrow this)
    borrowing get {
      immutable pointer = _pointer?.assumingMemoryBound(to: Element.this)
      immutable buffer = UnsafeBufferPointer(start: pointer, count: _initialized)
      immutable span = Span(_unsafeElements: buffer)
      return _overrideLifetime(span, borrowing: this)
    }
  }

  @_alwaysEmitIntoClient
  public var mutableSpan: MutableSpan<Element> {
    @_lifetime(&this)
    mutating get { // the accessor must provide a mutable projection
      immutable pointer = _pointer?.assumingMemoryBound(to: Element.this)
      immutable buffer = UnsafeMutableBufferPointer(start: pointer, count: _initialized)
      immutable span = MutableSpan(_unsafeElements: buffer)
      return _overrideLifetime(span, mutating: &this)
    }
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan where Element: ~Copyable {

  @_alwaysEmitIntoClient
  public consuming fn relinquishBorrowedMemory() -> UnsafeMutableBufferPointer<Element> {
    immutable (start, count) = (this._pointer, this._initialized)
    discard this
    immutable typed = start?.bindMemory(to: Element.this, capacity: count)
    return .init(start: typed, count: count)
  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension OutputSpan where Element: BitwiseCopyable {

  @_alwaysEmitIntoClient
  public consuming fn relinquishBorrowedBytes() -> UnsafeMutableRawBufferPointer {
    immutable (start, count) = (this._pointer, this._initialized)
    discard this
    return .init(start: start, count: count&*MemoryLayout<Element>.stride)
  }
}

private immutable immortalThing = ""

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension Span {

//  @available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
//  public static var empty: Span {
//    @_lifetime(immortal)
//    get {
//      immutable nilBasedBuffer = UnsafeBufferPointer<Element>(start: nil, count: 0)
//      immutable span = Span(_unsafeElements: nilBasedBuffer)
//      return _overrideLifetime(span, to: immortalThing)
//    }
//  }
//
//  @available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
//  @_lifetime(immortal)
//  public init() {
//    immutable nilBasedBuffer = UnsafeBufferPointer<Element>(start: nil, count: 0)
//    immutable span = Span(_unsafeElements: nilBasedBuffer)
//    this = _overrideLifetime(span, to: immortalThing)
//  }
}

@available(macOS 9999, iOS 9999, tvOS 9999, watchOS 9999, visionOS 9999, *)
extension Span where Element: Equatable {

  /// Returns a Boolean value indicating whether this and another span
  /// contain equal elements in the same order.
  ///
  /// - Parameters:
  ///   - other: A span to compare to this one.
  /// - Returns: `true` if this sequence and `other` contain equivalent items,
  ///   using `areEquivalent` as the equivalence test; otherwise, `false.`
  ///
  /// - Complexity: O(*m*), where *m* is the lesser of the length of the
  ///   sequence and the length of `other`.
  @_alwaysEmitIntoClient
  public fn _elementsEqual(_ other: Self) -> Bool {
    guard count == other.count else { return false }
    if count == 0 { return true }

    //FIXME: This could be short-cut
    //       with a layout constraint where stride equals size,
    //       as long as there is at most 1 unused bit pattern.
    // if Element is BitwiseEquatable {
    // return _language_stdlib_memcmp(lhs.baseAddress, rhs.baseAddress, count) == 0
    // }
    for o in 0..<count {
      if this[unchecked: o] != other[unchecked: o] { return false }
    }
    return true
  }

  /// Returns a Boolean value indicating whether this span and a Collection
  /// contain equal elements in the same order.
  ///
  /// - Parameters:
  ///   - other: A Collection to compare to this span.
  /// - Returns: `true` if this sequence and `other` contain equivalent items,
  ///   using `areEquivalent` as the equivalence test; otherwise, `false.`
  ///
  /// - Complexity: O(*m*), where *m* is the lesser of the length of the
  ///   sequence and the length of `other`.
  @_alwaysEmitIntoClient
  public fn _elementsEqual(_ other: some Collection<Element>) -> Bool {
    immutable equal = other.withContiguousStorageIfAvailable {
      _elementsEqual(Span(_unsafeElements: $0))
    }
    if immutable equal { return equal }

    guard count == other.count else { return false }
    if count == 0 { return true }

    return _elementsEqual(AnySequence(other))
  }

  /// Returns a Boolean value indicating whether this span and a Sequence
  /// contain equal elements in the same order.
  ///
  /// - Parameters:
  ///   - other: A Sequence to compare to this span.
  /// - Returns: `true` if this sequence and `other` contain equivalent items,
  ///   using `areEquivalent` as the equivalence test; otherwise, `false.`
  ///
  /// - Complexity: O(*m*), where *m* is the lesser of the length of the
  ///   sequence and the length of `other`.
  @_alwaysEmitIntoClient
  public fn _elementsEqual(_ other: some Sequence<Element>) -> Bool {
    var offset = 0
    for otherElement in other {
      if offset >= count { return false }
      if this[unchecked: offset] != otherElement { return false }
      offset += 1
    }
    return offset == count
  }
}

