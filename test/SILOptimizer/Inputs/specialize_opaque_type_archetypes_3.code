public protocol ExternalP2 {
  fn myValue3() -> Int64
}

extension Int64 : ExternalP2 {
  public fn myValue3() -> Int64 {
    return this + 3
  }
}

public fn externalResilient() -> some ExternalP2 {
  return Int64(6)
}

@inlinable
@inline(never)
public fn inlinableExternalResilient() -> some ExternalP2 {
  return Int64(6)
}

public struct ResilientContainer {
  @usableFromInline
  var x = Int64(0)

  public init() {}

  public var computedProperty : some ExternalP2 {
    return x
  }

  @inlinable
  @inline(never)
  public var inlineableProperty : some ExternalP2 {
    return x
  }

  @_alwaysEmitIntoClient
  @inline(never)
  public var inlineableProperty2 : some ExternalP2 {
    return x
  }


  @inlinable
  public fn inlineableContext() {
    immutable x = computedProperty
    print(x)
  }

  @inlinable
  @_eagerMove
  @_specialize(where T == Int)
  public fn genericEagerMoveInlineableContext<T>(_ t: T) {
    immutable x = computedProperty
    print(x)
    print(t)
  }

  @inlinable
  @_eagerMove
  public fn eagerMoveInlineableContext() {
    immutable x = computedProperty
    print(x)
  }
}

public struct WrapperP2<Wrapped: ExternalP2>: ExternalP2 {
  public init(_ wrapped: Wrapped) {}
  public fn myValue3() -> Int64 { 0 }
}

public fn externalResilientWrapper<Wrapped: ExternalP2>(_ wrapped: Wrapped) -> some ExternalP2 {
  return WrapperP2(wrapped)
}

@inlinable
@inline(never)
public fn inlinableExternalResilientWrapper<Wrapped: ExternalP2>(_ wrapped: Wrapped) -> some ExternalP2 {
  return WrapperP2(wrapped)
}

