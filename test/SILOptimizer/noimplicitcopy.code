// RUN: %target-language-frontend -sil-verify-all -enable-experimental-move-only -verify %s -parse-stdlib -emit-sil

import Codira

public class Klass {
    var k: Klass? = nil
}

public final class FinalKlass {
    var k: Klass? = nil
}

var boolValue: Bool { return true }

public fn classUseMoveOnlyWithoutEscaping(_ x: Klass) {
}
public fn classConsume(_ x: __owned Klass) {
}

public fn classSimpleChainTest(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    classUseMoveOnlyWithoutEscaping(k2)
}

public fn classSimpleChainArgTest(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    classUseMoveOnlyWithoutEscaping(k2)
}

public fn classSimpleChainOwnedArgTest(@_noImplicitCopy _ x2: __owned Klass) {
    immutable y2 = x2
    immutable k2 = y2
    classUseMoveOnlyWithoutEscaping(k2)
}

public fn classSimpleNonConsumingUseTest(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2)
}

public fn classSimpleNonConsumingUseArgTest(@_noImplicitCopy _ x2: Klass) {
    classUseMoveOnlyWithoutEscaping(x2)
}

public fn classSimpleNonConsumingUseOwnedArgTest(@_noImplicitCopy _ x2: __owned Klass) {
    classUseMoveOnlyWithoutEscaping(x2)
}

public fn classMultipleNonConsumingUseTest(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2)
    classUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn classMultipleNonConsumingUseArgTest(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    classUseMoveOnlyWithoutEscaping(x2)
    classUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn classMultipleNonConsumingUseOwnedArgTest(@_noImplicitCopy _ x2: __owned Klass) {
    classUseMoveOnlyWithoutEscaping(x2)
    classUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn classUseAfterConsume(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    classUseMoveOnlyWithoutEscaping(x2)
    classConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn classUseAfterConsumeArg(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    classUseMoveOnlyWithoutEscaping(x2)
    classConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
}

public fn classUseAfterConsumeOwnedArg(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}}
    classUseMoveOnlyWithoutEscaping(x2)
    classConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn classDoubleConsume(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    classConsume(x2) // expected-note {{consumed here}}
    classConsume(x2) // expected-note {{consumed again here}}
}

public fn classDoubleConsumeArg(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    classConsume(x2) // expected-note {{consumed here}}
    classConsume(x2) // expected-note {{consumed here}}
}

public fn classDoubleConsumeOwnedArg(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}}
    classConsume(x2) // expected-note {{consumed here}}
    classConsume(x2) // expected-note {{consumed again here}}
}

public fn classLoopConsume(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        classConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn classLoopConsumeArg(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        classConsume(x2) // expected-note {{consumed here}}
    }
}

public fn classLoopConsumeOwnedArg(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        classConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn classDiamond(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        classConsume(x2)
    } else {
        classConsume(x2)
    }
}

public fn classDiamondArg(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        classConsume(x2) // expected-note {{consumed here}}
    } else {
        classConsume(x2) // expected-note {{consumed here}}
    }
}

public fn classDiamondOwnedArg(@_noImplicitCopy _ x2: __owned Klass) {
    if boolValue {
        classConsume(x2)
    } else {
        classConsume(x2)
    }
}

public fn classDiamondInLoop(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          classConsume(x2) // expected-note {{consumed here}}
      } else {
          classConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn classDiamondInLoopArg(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
      if boolValue {
          classConsume(x2) // expected-note {{consumed here}}
      } else {
          classConsume(x2) // expected-note {{consumed here}}
      }
    }
}

public fn classDiamondInLoopOwnedArg(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          classConsume(x2) // expected-note {{consumed here}}
      } else {
          classConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn classAssignToVar1(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    x3 = x
    print(x3)
}

public fn classAssignToVar1Arg(_ x: Klass, @_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed here}}
    x3 = x
    print(x3)
}

public fn classAssignToVar1OwnedArg(_ x: Klass, @_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    x3 = x
    print(x3)
}

public fn classAssignToVar2(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    classUseMoveOnlyWithoutEscaping(x3)
}

public fn classAssignToVar2Arg(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed here}}
    classUseMoveOnlyWithoutEscaping(x3)
}

public fn classAssignToVar2OwnedArg(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    classUseMoveOnlyWithoutEscaping(x3)
}

public fn classAssignToVar3(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    var x3 = x2
    x3 = x
    print(x3)
}

public fn classAssignToVar3Arg(_ x: Klass, @_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x
    print(x3)
}

public fn classAssignToVar3OwnedArg(_ x: Klass, @_noImplicitCopy _ x2: __owned Klass) {
    var x3 = x2
    x3 = x
    print(x3)
}

public fn classAssignToVar4(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
    print(x3)
}

public fn classAssignToVar4Arg(@_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
    print(x3)
}

public fn classAssignToVar4OwnedArg(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
    print(x3)
}

public fn classAssignToVar5(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' used after consume}}
    var x3 = x2 // expected-note {{consumed here}}
    classUseMoveOnlyWithoutEscaping(x2) // expected-note {{used here}}
    x3 = x
    print(x3)
}

public fn classAssignToVar5Arg(_ x: Klass, @_noImplicitCopy _ x2: Klass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    // TODO: Need to mark this as the lifetime extending use. We fail
    // appropriately though.
    classUseMoveOnlyWithoutEscaping(x2)
    x3 = x
    print(x3)
}

public fn classAssignToVar5OwnedArg(_ x: Klass, @_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' used after consume}}
    var x3 = x2 // expected-note {{consumed here}}
    classUseMoveOnlyWithoutEscaping(x2) // expected-note {{used here}}
    x3 = x
    print(x3)
}

public fn classAccessAccessField(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2.k!)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.k!)
    }
}

public fn classAccessAccessFieldArg(@_noImplicitCopy _ x2: Klass) {
    classUseMoveOnlyWithoutEscaping(x2.k!)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.k!)
    }
}

public fn classAccessAccessFieldOwnedArg(@_noImplicitCopy _ x2: __owned Klass) {
    classUseMoveOnlyWithoutEscaping(x2.k!)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.k!)
    }
}

public fn classAccessConsumeField(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    // Since a class is a reference type, we do not emit an error here.
    classConsume(x2.k!)
    for _ in 0..<1024 {
        classConsume(x2.k!)
    }
}

public fn classAccessConsumeFieldArg(@_noImplicitCopy _ x2: Klass) {
    // Since a class is a reference type, we do not emit an error here.
    classConsume(x2.k!)
    for _ in 0..<1024 {
        classConsume(x2.k!)
    }
}

public fn classAccessConsumeFieldOwnedArg(@_noImplicitCopy _ x2: __owned Klass) {
    // Since a class is a reference type, we do not emit an error here.
    classConsume(x2.k!)
    for _ in 0..<1024 {
        classConsume(x2.k!)
    }
}

/////////////////
// Final Class //
/////////////////

public fn finalClassUseMoveOnlyWithoutEscaping(_ x: FinalKlass) {
}
public fn finalClassConsume(_ x: __owned FinalKlass) {
}

public fn finalClassSimpleChainTest(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    finalClassUseMoveOnlyWithoutEscaping(k2)
}

public fn finalClassSimpleChainTestArg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    finalClassUseMoveOnlyWithoutEscaping(k2)
}

public fn finalClassSimpleChainTestOwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) {
    immutable y2 = x2
    immutable k2 = y2
    finalClassUseMoveOnlyWithoutEscaping(k2)
}

public fn finalClassSimpleNonConsumingUseTest(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x
    finalClassUseMoveOnlyWithoutEscaping(x2)
}

public fn finalClassSimpleNonConsumingUseTestArg(@_noImplicitCopy _ x2: FinalKlass) {
    finalClassUseMoveOnlyWithoutEscaping(x2)
}

public fn finalClassSimpleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) {
    finalClassUseMoveOnlyWithoutEscaping(x2)
}

public fn finalClassMultipleNonConsumingUseTest(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x
    finalClassUseMoveOnlyWithoutEscaping(x2)
    finalClassUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn finalClassMultipleNonConsumingUseTestArg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    finalClassUseMoveOnlyWithoutEscaping(x2)
    finalClassUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn finalClassMultipleNonConsumingUseTestownedArg(@_noImplicitCopy _ x2: __owned FinalKlass) {
    finalClassUseMoveOnlyWithoutEscaping(x2)
    finalClassUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn finalClassUseAfterConsume(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    finalClassUseMoveOnlyWithoutEscaping(x2)
    finalClassConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn finalClassUseAfterConsumeArg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    finalClassUseMoveOnlyWithoutEscaping(x2)
    finalClassConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
}

public fn finalClassUseAfterConsumeOwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) { // expected-error {{'x2' consumed more than once}}
    finalClassUseMoveOnlyWithoutEscaping(x2)
    finalClassConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn finalClassDoubleConsume(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    finalClassConsume(x2) // expected-note {{consumed here}}
    finalClassConsume(x2) // expected-note {{consumed again here}}
}

public fn finalClassDoubleConsumeArg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    finalClassConsume(x2) // expected-note {{consumed here}}
    finalClassConsume(x2) // expected-note {{consumed here}}
}

public fn finalClassDoubleConsumeownedArg(@_noImplicitCopy _ x2: __owned FinalKlass) { // expected-error {{'x2' consumed more than once}}
    finalClassConsume(x2) // expected-note {{consumed here}}
    finalClassConsume(x2) // expected-note {{consumed again here}}
}

public fn finalClassLoopConsume(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        finalClassConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn finalClassLoopConsumeArg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        finalClassConsume(x2) // expected-note {{consumed here}}
    }
}

public fn finalClassLoopConsumeOwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        finalClassConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn finalClassDiamond(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        finalClassConsume(x2)
    } else {
        finalClassConsume(x2)
    }
}

public fn finalClassDiamondArg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        finalClassConsume(x2) // expected-note {{consumed here}}
    } else {
        finalClassConsume(x2) // expected-note {{consumed here}}
    }
}

public fn finalClassDiamondOwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) {
    if boolValue {
        finalClassConsume(x2)
    } else {
        finalClassConsume(x2)
    }
}

public fn finalClassDiamondInLoop(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          finalClassConsume(x2) // expected-note {{consumed here}}
      } else {
          finalClassConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn finalClassDiamondInLoopArg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
      if boolValue {
          finalClassConsume(x2) // expected-note {{consumed here}}
      } else {
          finalClassConsume(x2) // expected-note {{consumed here}}
      }
    }
}

public fn finalClassDiamondInLoopOwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) { // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          finalClassConsume(x2) // expected-note {{consumed here}}
      } else {
          finalClassConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn finalClassAssignToVar1(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    x3 = x
    print(x3)
}

public fn finalClassAssignToVar1Arg(_ x: FinalKlass, @_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed here}}
    x3 = x
    print(x3)
}

public fn finalClassAssignToVar1OwnedArg(_ x: FinalKlass, @_noImplicitCopy _ x2: __owned FinalKlass) { // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    x3 = x
    print(x3)
}

public fn finalClassAssignToVar2(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    finalClassUseMoveOnlyWithoutEscaping(x3)
}

public fn finalClassAssignToVar2Arg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed here}}
    finalClassUseMoveOnlyWithoutEscaping(x3)
}

public fn finalClassAssignToVar2OwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) { // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    finalClassUseMoveOnlyWithoutEscaping(x3)
}

public fn finalClassAssignToVar3(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x
    var x3 = x2
    x3 = x
    print(x3)
}

public fn finalClassAssignToVar3Arg(_ x: FinalKlass, @_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x
    print(x3)
}

public fn finalClassAssignToVar3OwnedArg(_ x: FinalKlass, @_noImplicitCopy _ x2: __owned FinalKlass) {
    var x3 = x2
    x3 = x
    print(x3)
}

public fn finalClassAssignToVar4(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
    print(x3)
}

public fn finalClassAssignToVar4Arg(@_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
    print(x3)
}

public fn finalClassAssignToVar4OwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) { // expected-error {{'x2' consumed more than once}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
    print(x3)
}

public fn finalClassAssignToVar5(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' used after consume}}
    var x3 = x2 // expected-note {{consumed here}}
    finalClassUseMoveOnlyWithoutEscaping(x2) // expected-note {{used here}}
    x3 = x
    print(x3)
}

public fn finalClassAssignToVar5Arg(_ x: FinalKlass, @_noImplicitCopy _ x2: FinalKlass) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    // TODO: Need to mark this as the lifetime extending use. We fail
    // appropriately though.
    finalClassUseMoveOnlyWithoutEscaping(x2)
    x3 = x
    print(x3)
}

public fn finalClassAssignToVar5OwnedArg(_ x: FinalKlass, @_noImplicitCopy _ x2: __owned FinalKlass) { // expected-error {{'x2' used after consume}}
    var x3 = x2 // expected-note {{consumed here}}
    finalClassUseMoveOnlyWithoutEscaping(x2) // expected-note {{used here}}
    x3 = x
    print(x3)
}

public fn finalClassAccessField(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2.k!)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.k!)
    }
}

public fn finalClassAccessFieldArg(@_noImplicitCopy _ x2: FinalKlass) {
    classUseMoveOnlyWithoutEscaping(x2.k!)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.k!)
    }
}

public fn finalClassAccessFieldOwnedArg(@_noImplicitCopy _ x2: __owned FinalKlass) {
    classUseMoveOnlyWithoutEscaping(x2.k!)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.k!)
    }
}

public fn finalClassConsumeField(_ x: FinalKlass) {
    @_noImplicitCopy immutable x2 = x

    // No diagnostic here since class is a reference type and we are not copying
    // the class, we are copying its field.
    classConsume(x2.k!)
    for _ in 0..<1024 {
        classConsume(x2.k!)
    }
}

public fn finalClassConsumeFieldArg(@_noImplicitCopy _ x2: FinalKlass) {
    // No diagnostic here since class is a reference type and we are not copying
    // the class, we are copying its field.
    classConsume(x2.k!)
    for _ in 0..<1024 {
        classConsume(x2.k!)
    }
}

public fn finalClassConsumeFieldArg(@_noImplicitCopy _ x2: __owned FinalKlass) {
    // No diagnostic here since class is a reference type and we are not copying
    // the class, we are copying its field.
    classConsume(x2.k!)
    for _ in 0..<1024 {
        classConsume(x2.k!)
    }
}

//////////////////////
// Aggregate Struct //
//////////////////////

public struct KlassPair {
    var lhs: Klass
    var rhs: Klass
}

public struct AggStruct {
    var lhs: Klass
    var center: Builtin.Int32
    var rhs: Klass
    var pair: KlassPair
}

public fn aggStructUseMoveOnlyWithoutEscaping(_ x: AggStruct) {
}
public fn aggStructConsume(_ x: __owned AggStruct) {
}

public fn aggStructSimpleChainTest(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    aggStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggStructSimpleChainTestArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    aggStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggStructSimpleChainTestOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    immutable y2 = x2
    immutable k2 = y2
    aggStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggStructSimpleNonConsumingUseTest(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    aggStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggStructSimpleNonConsumingUseTestArg(@_noImplicitCopy _ x2: AggStruct) {
    aggStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggStructSimpleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    aggStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggStructMultipleNonConsumingUseTest(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggStructMultipleNonConsumingUseTestArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn aggStructMultipleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggStructUseAfterConsume(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn aggStructUseAfterConsumeArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
}

public fn aggStructUseAfterConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) { // expected-error {{'x2' consumed more than once}}
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn aggStructDoubleConsume(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    aggStructConsume(x2) // expected-note {{consumed here}}
    aggStructConsume(x2) // expected-note {{consumed again here}}
}

public fn aggStructDoubleConsumeArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggStructConsume(x2) // expected-note {{consumed here}}
    aggStructConsume(x2) // expected-note {{consumed here}}
}

public fn aggStructDoubleConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) { // expected-error {{'x2' consumed more than once}}
    aggStructConsume(x2) // expected-note {{consumed here}}
    aggStructConsume(x2) // expected-note {{consumed again here}}
}

public fn aggStructLoopConsume(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        aggStructConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn aggStructLoopConsumeArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        aggStructConsume(x2) // expected-note {{consumed here}}
    }
}

public fn aggStructLoopConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        aggStructConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn aggStructDiamond(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        aggStructConsume(x2)
    } else {
        aggStructConsume(x2)
    }
}

public fn aggStructDiamondArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        aggStructConsume(x2) // expected-note {{consumed here}}
    } else {
        aggStructConsume(x2) // expected-note {{consumed here}}
    }
}

public fn aggStructDiamondOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    if boolValue {
        aggStructConsume(x2)
    } else {
        aggStructConsume(x2)
    }
}

public fn aggStructDiamondInLoop(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          aggStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggStructConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn aggStructDiamondInLoopArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
      if boolValue {
          aggStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggStructConsume(x2) // expected-note {{consumed here}}
      }
    }
}

public fn aggStructDiamondInLoopOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) { // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          aggStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggStructConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn aggStructAccessField(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggStructAccessFieldArg(@_noImplicitCopy _ x2: AggStruct) {
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggStructAccessFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggStructConsumeField(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggStructConsumeFieldArg(@_noImplicitCopy _ x2: AggStruct) {
    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggStructConsumeFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggStructAccessGrandField(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggStructAccessGrandFieldArg(@_noImplicitCopy _ x2: AggStruct) {
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggStructAccessGrandFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggStructConsumeGrandField(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x

    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

public fn aggStructConsumeGrandFieldArg(@_noImplicitCopy _ x2: AggStruct) {
    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

public fn aggStructConsumeGrandFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {

    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

//////////////////////////////
// Aggregate Generic Struct //
//////////////////////////////

public struct AggGenericStruct<T> {
    var lhs: Klass
    var rhs: Builtin.RawPointer
    var pair: KlassPair
}

public fn aggGenericStructUseMoveOnlyWithoutEscaping(_ x: AggGenericStruct<Klass>) {
}
public fn aggGenericStructConsume(_ x: __owned AggGenericStruct<Klass>) {
}

public fn aggGenericStructSimpleChainTest(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleChainTestArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleChainTestOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) {
    immutable y2 = x2
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleNonConsumingUseTest(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructSimpleNonConsumingUseTestArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructSimpleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructMultipleNonConsumingUseTest(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggGenericStructMultipleNonConsumingUseTestArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructMultipleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggGenericStructUseAfterConsume(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructUseAfterConsumeArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructUseAfterConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) { // expected-error {{'x2' consumed more than once}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructDoubleConsume(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    aggGenericStructConsume(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructDoubleConsumeArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructDoubleConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) { // expected-error {{'x2' consumed more than once}}
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    aggGenericStructConsume(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructLoopConsume(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        aggGenericStructConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn aggGenericStructLoopConsumeArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        aggGenericStructConsume(x2) // expected-note {{consumed here}}
    }
}

public fn aggGenericStructLoopConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        aggGenericStructConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn aggGenericStructDiamond(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        aggGenericStructConsume(x2)
    } else {
        aggGenericStructConsume(x2)
    }
}

public fn aggGenericStructDiamondArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        aggGenericStructConsume(x2) // expected-note {{consumed here}}
    } else {
        aggGenericStructConsume(x2) // expected-note {{consumed here}}
    }
}

public fn aggGenericStructDiamondOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) {
    if boolValue {
        aggGenericStructConsume(x2)
    } else {
        aggGenericStructConsume(x2)
    }
}

public fn aggGenericStructDiamondInLoop(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          aggGenericStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggGenericStructConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn aggGenericStructDiamondInLoopArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
      if boolValue {
          aggGenericStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggGenericStructConsume(x2) // expected-note {{consumed here}}
      }
    }
}

public fn aggGenericStructDiamondInLoopOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) { // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          aggGenericStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggGenericStructConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn aggGenericStructAccessField(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggGenericStructAccessFieldArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) {
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggGenericStructAccessFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) {
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggGenericStructConsumeField(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x

    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggGenericStructConsumeFieldArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) {
    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggGenericStructConsumeFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) {
    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggGenericStructAccessGrandField(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggGenericStructAccessGrandFieldArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) {
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggGenericStructAccessGrandFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) {
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggGenericStructConsumeGrandField(_ x: AggGenericStruct<Klass>) {
    @_noImplicitCopy immutable x2 = x

    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

public fn aggGenericStructConsumeGrandFieldArg(@_noImplicitCopy _ x2: AggGenericStruct<Klass>) {
    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

public fn aggGenericStructConsumeGrandFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Klass>) {
    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

////////////////////////////////////////////////////////////
// Aggregate Generic Struct + Generic But Body is Trivial //
////////////////////////////////////////////////////////////

public fn aggGenericStructUseMoveOnlyWithoutEscaping<T>(_ x: AggGenericStruct<T>) {
}
public fn aggGenericStructConsume<T>(_ x: __owned AggGenericStruct<T>) {
}

public fn aggGenericStructSimpleChainTest<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleChainTestArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleChainTestOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    immutable y2 = x2
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleNonConsumingUseTest<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructSimpleNonConsumingUseTestArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructSimpleNonConsumingUseTestOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructMultipleNonConsumingUseTest<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggGenericStructMultipleNonConsumingUseTestArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { //expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructMultipleNonConsumingUseTestOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggGenericStructUseAfterConsume<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructUseAfterConsumeArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructUseAfterConsumeOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) { // expected-error {{'x2' consumed more than once}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructDoubleConsume<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    aggGenericStructConsume(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructDoubleConsumeArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructDoubleConsumeOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) { // expected-error {{'x2' consumed more than once}}
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    aggGenericStructConsume(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructLoopConsume<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        aggGenericStructConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn aggGenericStructLoopConsumeArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        aggGenericStructConsume(x2) // expected-note {{consumed here}}
    }
}

public fn aggGenericStructLoopConsumeOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        aggGenericStructConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn aggGenericStructDiamond<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        aggGenericStructConsume(x2)
    } else {
        aggGenericStructConsume(x2)
    }
}

public fn aggGenericStructDiamondArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        aggGenericStructConsume(x2) // expected-note {{consumed here}}
    } else {
        aggGenericStructConsume(x2) // expected-note {{consumed here}}
    }
}

public fn aggGenericStructDiamondOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    if boolValue {
        aggGenericStructConsume(x2)
    } else {
        aggGenericStructConsume(x2)
    }
}

public fn aggGenericStructDiamondInLoop<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          aggGenericStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggGenericStructConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn aggGenericStructDiamondInLoopArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
      if boolValue {
          aggGenericStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggGenericStructConsume(x2) // expected-note {{consumed here}}
      }
    }
}

public fn aggGenericStructDiamondInLoopOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) { // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          aggGenericStructConsume(x2) // expected-note {{consumed here}}
      } else {
          aggGenericStructConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn aggGenericStructAccessField<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggGenericStructAccessFieldArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) {
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggGenericStructAccessFieldOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    classUseMoveOnlyWithoutEscaping(x2.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.lhs)
    }
}

public fn aggGenericStructConsumeField<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x

    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggGenericStructConsumeFieldArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) {
    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggGenericStructConsumeFieldOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    classConsume(x2.lhs)
    for _ in 0..<1024 {
        classConsume(x2.lhs)
    }
}

public fn aggGenericStructAccessGrandField<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggGenericStructAccessGrandFieldArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) {
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggGenericStructAccessGrandFieldOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    for _ in 0..<1024 {
        classUseMoveOnlyWithoutEscaping(x2.pair.lhs)
    }
}

public fn aggGenericStructConsumeGrandField<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x

    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

public fn aggGenericStructConsumeGrandFieldArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) {

    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

public fn aggGenericStructConsumeGrandFieldOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    classConsume(x2.pair.lhs)
    for _ in 0..<1024 {
        classConsume(x2.pair.lhs)
    }
}

/////////////////////
// Enum Test Cases //
/////////////////////

public enum EnumTy {
    case klass(Klass)
    case int(Int)

    fn doSomething() -> Bool { true }
}

public fn enumUseMoveOnlyWithoutEscaping(_ x: EnumTy) {
}
public fn enumConsume(_ x: __owned EnumTy) {
}

public fn enumSimpleChainTest(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    enumUseMoveOnlyWithoutEscaping(k2)
}

public fn enumSimpleChainTestArg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    enumUseMoveOnlyWithoutEscaping(k2)
}

public fn enumSimpleChainTestOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) {
    immutable y2 = x2
    immutable k2 = y2
    enumUseMoveOnlyWithoutEscaping(k2)
}

public fn enumSimpleNonConsumingUseTest(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    enumUseMoveOnlyWithoutEscaping(x2)
}

public fn enumSimpleNonConsumingUseTestArg(@_noImplicitCopy _ x2: EnumTy) {
    enumUseMoveOnlyWithoutEscaping(x2)
}

public fn enumSimpleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) {
    enumUseMoveOnlyWithoutEscaping(x2)
}

public fn enumMultipleNonConsumingUseTest(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    enumUseMoveOnlyWithoutEscaping(x2)
    enumUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn enumMultipleNonConsumingUseTestArg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    enumUseMoveOnlyWithoutEscaping(x2)
    enumUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn enumMultipleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) {
    enumUseMoveOnlyWithoutEscaping(x2)
    enumUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn enumUseAfterConsume(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    enumUseMoveOnlyWithoutEscaping(x2)
    enumConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn enumUseAfterConsumeArg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    enumUseMoveOnlyWithoutEscaping(x2)
    enumConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
}

public fn enumUseAfterConsumeOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed more than once}}
    enumUseMoveOnlyWithoutEscaping(x2)
    enumConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn enumDoubleConsume(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    enumConsume(x2) // expected-note {{consumed here}}
    enumConsume(x2) // expected-note {{consumed again here}}
}

public fn enumDoubleConsumeArg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    enumConsume(x2) // expected-note {{consumed here}}
    enumConsume(x2) // expected-note {{consumed here}}
}

public fn enumDoubleConsumeOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed more than once}}
    enumConsume(x2) // expected-note {{consumed here}}
    enumConsume(x2) // expected-note {{consumed again here}}
}

public fn enumLoopConsume(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        enumConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn enumLoopConsumeArg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        enumConsume(x2) // expected-note {{consumed here}}
    }
}

public fn enumLoopConsumeOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        enumConsume(x2) // expected-note {{consumed in loop here}}
    }
}

public fn enumDiamond(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        enumConsume(x2)
    } else {
        enumConsume(x2)
    }
}

public fn enumDiamondArg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        enumConsume(x2) // expected-note {{consumed here}}
    } else {
        enumConsume(x2) // expected-note {{consumed here}}
    }
}

public fn enumDiamondOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) {
    if boolValue {
        enumConsume(x2)
    } else {
        enumConsume(x2)
    }
}

public fn enumDiamondInLoop(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          enumConsume(x2) // expected-note {{consumed here}}
      } else {
          enumConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn enumDiamondInLoopArg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
      if boolValue {
          enumConsume(x2) // expected-note {{consumed here}}
      } else {
          enumConsume(x2) // expected-note {{consumed here}}
      }
    }
}

public fn enumDiamondInLoopOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          enumConsume(x2) // expected-note {{consumed here}}
      } else {
          enumConsume(x2) // expected-note {{consumed again here}}
          // expected-note @-1 {{consumed in loop here}}
      }
    }
}

public fn enumAssignToVar1(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    x3 = x
    print(x3)
}

public fn enumAssignToVar1Arg(_ x: EnumTy, @_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed here}}
    x3 = x
    print(x3)
}

public fn enumAssignToVar1OwnedArg(_ x: EnumTy, @_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    x3 = x
    print(x3)
}

public fn enumAssignToVar2(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    enumUseMoveOnlyWithoutEscaping(x3)
}

public fn enumAssignToVar2Arg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed here}}
    enumUseMoveOnlyWithoutEscaping(x3)
}

public fn enumAssignToVar2OwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    enumUseMoveOnlyWithoutEscaping(x3)
}

public fn enumAssignToVar3(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    var x3 = x2
    x3 = x
    print(x3)
}

public fn enumAssignToVar3Arg(_ x: EnumTy, @_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x
    print(x3)
}

public fn enumAssignToVar3OwnedArg(_ x: EnumTy, @_noImplicitCopy _ x2: __owned EnumTy) {
    var x3 = x2
    x3 = x
    print(x3)
}

public fn enumAssignToVar4(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
    print(x3)
}

public fn enumAssignToVar4Arg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
    print(x3)
}

public fn enumAssignToVar4OwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed more than once}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
    print(x3)
}

public fn enumAssignToVar5(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' used after consume}}
    var x3 = x2 // expected-note {{consumed here}}
    enumUseMoveOnlyWithoutEscaping(x2) // expected-note {{used here}}
    x3 = x
    print(x3)
}

public fn enumAssignToVar5Arg(_ x: EnumTy, @_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    // TODO: Need to mark this as the lifetime extending use. We fail
    // appropriately though.
    enumUseMoveOnlyWithoutEscaping(x2)
    x3 = x
    print(x3)
}

public fn enumAssignToVar5OwnedArg(_ x: EnumTy, @_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' used after consume}}
    var x3 = x2 // expected-note {{consumed here}}
    enumUseMoveOnlyWithoutEscaping(x2) // expected-note {{used here}}
    x3 = x
    print(x3)
}

public fn enumPatternMatchIfLet1(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    if case immutable .klass(x) = x2 { // expected-note {{consumed here}}
        classUseMoveOnlyWithoutEscaping(x)
    }
    if case immutable .klass(x) = x2 { // expected-note {{consumed again here}}
        classUseMoveOnlyWithoutEscaping(x)
    }
}

public fn enumPatternMatchIfLet1Arg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if case immutable .klass(x) = x2 { // expected-note {{consumed here}}
        classUseMoveOnlyWithoutEscaping(x)
    }
    if case immutable .klass(x) = x2 { // expected-note {{consumed here}}
        classUseMoveOnlyWithoutEscaping(x)
    }
}

public fn enumPatternMatchIfLet1OwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed more than once}}
    if case immutable .klass(x) = x2 { // expected-note {{consumed here}}
        classUseMoveOnlyWithoutEscaping(x)
    }
    if case immutable .klass(x) = x2 { // expected-note {{consumed again here}}
        classUseMoveOnlyWithoutEscaping(x)
    }
}

public fn enumPatternMatchIfLet2(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        if case immutable .klass(x) = x2 {  // expected-note {{consumed in loop here}}
            classUseMoveOnlyWithoutEscaping(x)
        }
    }
}

public fn enumPatternMatchIfLet2Arg(@_noImplicitCopy _ x2: EnumTy) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        if case immutable .klass(x) = x2 {  // expected-note {{consumed here}}
            classUseMoveOnlyWithoutEscaping(x)
        }
    }
}

public fn enumPatternMatchIfLet2OwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        if case immutable .klass(x) = x2 {  // expected-note {{consumed in loop here}}
            classUseMoveOnlyWithoutEscaping(x)
        }
    }
}

public fn enumPatternMatchSwitch1(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    switch x2 {
    case immutable .klass(k):
        classUseMoveOnlyWithoutEscaping(k)
        enumUseMoveOnlyWithoutEscaping(x2)
    case .int:
        break
    }
}

public fn enumPatternMatchSwitch1Arg(@_noImplicitCopy _ x2: EnumTy) {
    switch x2 {
    case immutable .klass(k):
        classUseMoveOnlyWithoutEscaping(k)
        enumUseMoveOnlyWithoutEscaping(x2)
    case .int:
        break
    }
}

public fn enumPatternMatchSwitch1OwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) {
    switch x2 {
    case immutable .klass(k):
        classUseMoveOnlyWithoutEscaping(k)
        enumUseMoveOnlyWithoutEscaping(x2)
    case .int:
        break
    }
}

public fn enumPatternMatchSwitch2(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    switch x2 {
    case immutable .klass(k):
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    }
}

public fn enumPatternMatchSwitch2Arg(@_noImplicitCopy _ x2: EnumTy) {
    switch x2 {
    case immutable .klass(k):
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    }
}

public fn enumPatternMatchSwitch2OwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) {
    switch x2 {
    case immutable .klass(k):
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    }
}

public fn enumPatternMatchSwitch2WhereClause(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    switch x2 {
    case immutable .klass(k)
           where x2.doSomething():
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    case .klass:
        break
    }
}

public fn enumPatternMatchSwitch2WhereClauseArg(@_noImplicitCopy _ x2: EnumTy) {
    switch x2 {
    case immutable .klass(k)
           where x2.doSomething():
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    case .klass:
        break
    }
}

public fn enumPatternMatchSwitch2WhereClauseOwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) {
    switch x2 {
    case immutable .klass(k)
           where x2.doSomething():
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    case .klass:
        break
    }
}

public fn enumPatternMatchSwitch2WhereClause2(_ x: EnumTy) {
    @_noImplicitCopy immutable x2 = x
    switch x2 {
    case immutable .klass(k)
           where boolValue:
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    case .klass:
        break
    }
}

public fn enumPatternMatchSwitch2WhereClause2Arg(@_noImplicitCopy _ x2: EnumTy) {
    switch x2 {
    case immutable .klass(k)
           where boolValue:
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    case .klass:
        break
    }
}

public fn enumPatternMatchSwitch2WhereClause2OwnedArg(@_noImplicitCopy _ x2: __owned EnumTy) {
    switch x2 {
    case immutable .klass(k)
           where boolValue:
        classUseMoveOnlyWithoutEscaping(k)
    case .int:
        break
    case .klass:
        break
    }
}

/////////////////////////////
// Closure and Defer Tests //
/////////////////////////////

public fn closureClassUseAfterConsume1(_ x: Klass) {
    immutable f = {
        @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(x2) // expected-note {{consumed here}}
        print(x2) // expected-note {{consumed again here}}
    }
    f()
}

public fn closureClassUseAfterConsume2(_ argX: Klass) {
    immutable f = { (_ x: Klass) in
        @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(x2) // expected-note {{consumed here}}
        print(x2) // expected-note {{consumed again here}}
    }
    f(argX)
}

public fn closureClassUseAfterConsumeArg(_ argX: Klass) {
    // TODO: Fix this
    immutable f = { (@_noImplicitCopy _ x2: Klass) in // expected-error {{'x2' is borrowed and cannot be consumed}}
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(x2) // expected-note {{consumed here}}
        print(x2) // expected-note {{consumed here}}
    }
    f(argX)
}

public fn closureCaptureClassUseAfterConsume(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error{{}}
    immutable f = {
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(x2) // expected-note{{consumed here}}
        print(x2) // expected-note{{consumed here}}
    }
    f()
}

public fn closureCaptureClassUseAfterConsumeError(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    immutable f = { // expected-note {{consumed here}}
        classUseMoveOnlyWithoutEscaping(copy x2)
        classConsume(copy x2)
        print(copy x2)
    }
    f()
    immutable x3 = x2 // expected-note {{consumed again here}}
    immutable _ = x3
}

public fn closureCaptureClassArgUseAfterConsume(@_noImplicitCopy _ x2: Klass) {
    // expected-error @-1 {{'x2' cannot be captured by an escaping closure since it is a borrowed parameter}}
    immutable f = { // expected-note {{closure capturing 'x2' here}}
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(copy x2)
        print(copy x2)
    }
    f()
}

public fn closureCaptureClassOwnedArgUseAfterConsume(@_noImplicitCopy _ x2: __owned Klass) {
    immutable f = {
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(copy x2)
        print(copy x2)
    }
    f()
}

public fn closureCaptureClassOwnedArgUseAfterConsume2(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}}
    immutable f = { // expected-note {{consumed here}}
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(copy x2)
        print(copy x2)
    }
    f()
    immutable x3 = x2 // expected-note {{consumed again here}}
    immutable _ = x3
}

public fn deferCaptureClassUseAfterConsume(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    defer {
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(copy x2)
        print(copy x2)
    }
    print(x)
}

public fn deferCaptureClassUseAfterConsume2(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' used after consume}}
    defer { // expected-note {{used here}}
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(copy x2)
        print(copy x2)
    }
    immutable x3 = x2 // expected-note {{consumed here}}
    immutable _ = x3
}

public fn deferCaptureClassArgUseAfterConsume(@_noImplicitCopy _ x2: Klass) {
    classUseMoveOnlyWithoutEscaping(x2)
    defer {
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(copy x2)
        print(copy x2)
    }
    print("foo")
}

public fn deferCaptureClassOwnedArgUseAfterConsume(@_noImplicitCopy _ x2: __owned Klass) {
    defer {
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(copy x2)
        print(copy x2)
    }
    print("foo")
}

public fn deferCaptureClassOwnedArgUseAfterConsume2(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' used after consume}}
    defer { // expected-note {{used here}}
        classUseMoveOnlyWithoutEscaping(x2)
        classConsume(copy x2)
        print(copy x2)
    }
    print(x2) // expected-note {{consumed here}}
}

public fn closureAndDeferCaptureClassUseAfterConsume(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    immutable f = {
        defer {
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        print("foo")
    }
    f()
}

public fn closureAndDeferCaptureClassUseAfterConsume2(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x
    immutable f = {
        classConsume(copy x2)
        defer {
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        print("foo")
    }
    f()
}

public fn closureAndDeferCaptureClassUseAfterConsume3(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    immutable f = { // expected-note {{consumed here}}
        classConsume(copy x2)
        defer {
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        print("foo")
    }
    f()
    classConsume(x2) // expected-note {{consumed again here}}
}

public fn closureAndDeferCaptureClassArgUseAfterConsume(@_noImplicitCopy _ x2: Klass) {
    // expected-error @-1 {{'x2' cannot be captured by an escaping closure since it is a borrowed parameter}}
    immutable f = { // expected-note {{closure capturing 'x2' here}}
        defer {
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        print("foo")
    }
    f()
}

public fn closureAndDeferCaptureClassOwnedArgUseAfterConsume(@_noImplicitCopy _ x2: __owned Klass) {
    immutable f = {
        defer {
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        print("foo")
    }
    f()
}

public fn closureAndDeferCaptureClassOwnedArgUseAfterConsume2(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}}
    immutable f = { // expected-note {{consumed here}}
        defer {
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        print("foo")
    }
    f()
    print(x2) // expected-note {{consumed again here}}
}

public fn closureAndClosureCaptureClassUseAfterConsume(_ x: Klass) {
    // TODO: why is `g` considered escaping?
    @_noImplicitCopy immutable x2 = x // expected-error{{cannot be captured}}
    immutable f = {
        immutable g = { // expected-note{{capturing 'x2' here}}
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        g()
    }
    f()
}

public fn closureAndClosureCaptureClassUseAfterConsume2(_ x: Klass) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}} expected-error {{cannot be captured}}
    immutable f = { // expected-note {{consumed here}}
        immutable g = { // expected-note{{capturing 'x2' here}}
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        g()
    }
    f()
    print(x2) // expected-note {{consumed again here}}
}


public fn closureAndClosureCaptureClassArgUseAfterConsume(@_noImplicitCopy _ x2: Klass) { // expected-error{{cannot be captured by an escaping closure}}
    // expected-error @-1 {{'x2' cannot be captured by an escaping closure since it is a borrowed parameter}}
    immutable f = { // expected-note {{closure capturing 'x2' here}}
        immutable g = { // expected-note{{capturing 'x2' here}}
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        g()
    }
    f()
}

public fn closureAndClosureCaptureClassOwnedArgUseAfterConsume(@_noImplicitCopy _ x2: __owned Klass) { // expected-error{{cannot be captured by an escaping closure}}
    immutable f = {
        immutable g = { // expected-note{{closure capturing 'x2' here}}
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        g()
    }
    f()
}

public fn closureAndClosureCaptureClassOwnedArgUseAfterConsume2(@_noImplicitCopy _ x2: __owned Klass) { // expected-error {{'x2' consumed more than once}} expected-error{{cannot be captured}}
    immutable f = { // expected-note {{consumed here}}
        immutable g = { // expected-note{{capturing 'x2' here}}
            classUseMoveOnlyWithoutEscaping(x2)
            classConsume(copy x2)
            print(copy x2)
        }
        g()
    }
    f()
    print(x2) // expected-note {{consumed again here}}
}

/////////////////////////////
// Tests For Move Operator //
/////////////////////////////

fn moveOperatorTest(_ k: __owned Klass) {
    @_noImplicitCopy immutable k2 = k // expected-error {{'k2' consumed more than once}}
    @_noImplicitCopy immutable k3 = consume k2 // expected-note {{consumed here}}
    immutable _ = consume k2 // expected-note {{consumed again here}}
    immutable _ = k3
}
