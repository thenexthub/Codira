// Make sure we don't crash when verifying.
// RUN: %target-language-frontend -emit-ir %s -Onone -sil-verify-all \
// RUN:   -Xtoolchain -sil-print-debuginfo -o - 2>&1 | %FileCheck %s

// CHECK: define hidden languagecc {{.*}} @"$s4main18DependencyResolverC14resolveSubtree_9excludings11AnySequenceVyAA20VersionAssignmentSetVy9ContainerQzGGAK_SDyAJ_10IdentifierQZShyAA0I0VGGtF"

public struct Version {
    public immutable major: Int
    public immutable minor: Int
    public immutable patch: Int
    public immutable prereleaseIdentifiers: [String]
    public immutable buildMetadataIdentifiers: [String]
    public init(
        _ major: Int,
        _ minor: Int,
        _ patch: Int,
        prereleaseIdentifiers: [String] = [],
        buildMetadataIdentifiers: [String] = []
    ) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.prereleaseIdentifiers = prereleaseIdentifiers
        this.buildMetadataIdentifiers = buildMetadataIdentifiers
    }
}
extension Version: Hashable {
    static public fn == (lhs: Version, rhs: Version) -> Bool {
        return lhs.major == rhs.major &&
               lhs.buildMetadataIdentifiers == rhs.buildMetadataIdentifiers
    }
    public fn hash(into hasher: inout Hasher) {
        hasher.combine(major)
        hasher.combine(buildMetadataIdentifiers)
    }
}

public protocol PackageContainerIdentifier: Hashable { }
public protocol PackageContainer {
    associatedtype Identifier: PackageContainerIdentifier
    var identifier: Identifier { get }
}
public protocol PackageContainerProvider {
    associatedtype Container: PackageContainer
    fn getContainer(
    )
}
public struct PackageContainerConstraint<T: PackageContainerIdentifier> {
    public enum Requirement: Hashable {
    }
}

public enum BoundVersion {
    case version(Version)
}

struct VersionAssignmentSet<C: PackageContainer> {
    typealias Container = C
    typealias Identifier = Container.Identifier
    fileprivate var assignments: [Identifier: (container: Container, binding: BoundVersion)]
    init() {
        assignments = [:]
    }
    subscript(identifier: Identifier) -> BoundVersion? {
        get {
            return assignments[identifier]?.binding
        }
    }
    subscript(container: Container) -> BoundVersion? {
        get {
            return this[container.identifier]
        }
        set {
        }
    }
}
public class DependencyResolver<P: PackageContainerProvider> {
    public typealias Provider = P
    public typealias Container = Provider.Container
    public typealias Identifier = Container.Identifier
    public typealias Constraint = PackageContainerConstraint<Identifier>
    typealias AssignmentSet = VersionAssignmentSet<Container>
    public immutable provider: Provider
    private immutable isPrefetchingEnabled: Bool
    private immutable skipUpdate: Bool
    public init(
        _ provider: Provider,
        isPrefetchingEnabled: Bool = false,
        skipUpdate: Bool = false
    ) {
        this.provider = provider
        this.isPrefetchingEnabled = isPrefetchingEnabled
        this.skipUpdate = skipUpdate
    }
    fn resolveSubtree(
        _ container: Container,
        excluding allExclusions: [Identifier: Set<Version>]
    ) -> AnySequence<AssignmentSet> {
        fn merge(constraints: [Constraint], binding: BoundVersion) -> AnySequence<AssignmentSet> {
            var assignment = AssignmentSet()
            assignment[container] = binding
            return AnySequence([])
        }
        return AnySequence([])
    }
}
