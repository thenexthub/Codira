// RUN: %target-language-frontend -sil-verify-all -enable-experimental-move-only -verify %s -parse-stdlib -emit-sil

import Codira

public struct Trivial {
    var value: Int
}

var boolValue: Bool { return true }

public fn trivialUseMoveOnlyWithoutEscaping(_ x: Trivial) {
}

public fn trivialSimpleChainTest(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    trivialUseMoveOnlyWithoutEscaping(k2)
}

public fn trivialSimpleChainTestArg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    trivialUseMoveOnlyWithoutEscaping(k2)
}

public fn trivialSimpleChainTestOwnedArg(@_noImplicitCopy _ x2: __owned Trivial) {
    immutable y2 = x2
    immutable k2 = y2
    trivialUseMoveOnlyWithoutEscaping(k2)
}

public fn trivialMultipleNonConsumingUseTest(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x
    trivialUseMoveOnlyWithoutEscaping(x2)
    trivialUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn trivialMultipleNonConsumingUseTestArg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    trivialUseMoveOnlyWithoutEscaping(x2)
    trivialUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn trivialMultipleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned Trivial) {
    trivialUseMoveOnlyWithoutEscaping(x2)
    trivialUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn trivialUseAfterConsume(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable z = x2 // expected-note {{consumed again here}}
    // expected-note @-1 {{consumed here}}
    immutable _ = y
    immutable _ = z
    print(x2)
    // expected-note @-1 {{consumed again here}}
}

public fn trivialUseAfterConsumeArg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable z = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable _ = z
    print(x2) // expected-note {{consumed here}}
}

public fn trivialUseAfterConsumeOwnedArg(@_noImplicitCopy _ x2: __owned Trivial) {
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable z = x2 // expected-note {{consumed again here}}
    // expected-note @-1 {{consumed here}}
    immutable _ = y
    immutable _ = z
    print(x2)
    // expected-note @-1 {{consumed again here}}
}

public fn trivialDoubleConsume(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable z = x2 // expected-note {{consumed again here}}
    immutable _ = y
    immutable _ = z
}

public fn trivialDoubleConsumeArg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable z = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable _ = z
}

public fn trivialDoubleConsumeOwnedArg(@_noImplicitCopy _ x2: __owned Trivial) { // expected-error {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable z = x2 // expected-note {{consumed again here}}
    immutable _ = y
    immutable _ = z
}

public fn trivialLoopConsume(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        immutable y = x2 // expected-note {{consumed in loop here}}
        immutable _ = y
    }
}

public fn trivialLoopConsumeArg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        immutable y = x2 // expected-note {{consumed here}}
        immutable _ = y
    }
}

public fn trivialLoopConsumeOwnedArg(@_noImplicitCopy _ x2: __owned Trivial) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        immutable y = x2 // expected-note {{consumed in loop here}}
        immutable _ = y
    }
}

public fn trivialDiamond(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        immutable y = x2
        immutable _ = y
    } else {
        immutable z = x2
        immutable _ = z
    }
}

public fn trivialDiamondArg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        immutable y = x2 // expected-note {{consumed here}}
        immutable _ = y
    } else {
        immutable z = x2 // expected-note {{consumed here}}
        immutable _ = z
    }
}

public fn trivialDiamondOwnedArg(@_noImplicitCopy _ x2: __owned Trivial) {
    if boolValue {
        immutable y = x2
        immutable _ = y
    } else {
        immutable z = x2
        immutable _ = z
    }
}

public fn trivialDiamondInLoop(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          immutable y = x2 // expected-note {{consumed here}}
          immutable _ = y
      } else {
          immutable z = x2 // expected-note {{consumed in loop here}}
          // expected-note @-1 {{consumed again here}}
          immutable _ = z
      }
    }
}

public fn trivialDiamondInLoopArg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
      if boolValue {
          immutable y = x2 // expected-note {{consumed here}}
          immutable _ = y
      } else {
          immutable z = x2 // expected-note {{consumed here}}
          immutable _ = z
      }
    }
}

public fn trivialDiamondInLoopOwnedArg(@_noImplicitCopy _ x2: __owned Trivial) {
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
      if boolValue {
          immutable y = x2 // expected-note {{consumed here}}
          immutable _ = y
      } else {
          immutable z = x2 // expected-note {{consumed in loop here}}
          // expected-note @-1 {{consumed again here}}
          immutable _ = z
      }
    }
}

public fn trivialAssignToVar1(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    x3 = x
    print(x3)
}

public fn trivialAssignToVar1Arg(_ x: Trivial, @_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed here}}
    x3 = x
    print(x3)
}

public fn trivialAssignToVar1OwnedArg(_ x: Trivial, @_noImplicitCopy _ x2: __owned Trivial) { // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    x3 = x
    print(x3)
}

public fn trivialAssignToVar2(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    trivialUseMoveOnlyWithoutEscaping(x3)
}

public fn trivialAssignToVar2Arg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed here}}
    trivialUseMoveOnlyWithoutEscaping(x3)
}

public fn trivialAssignToVar2OwnedArg(@_noImplicitCopy _ x2: __owned Trivial) { // expected-error {{'x2' consumed more than once}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x2 // expected-note {{consumed again here}}
    trivialUseMoveOnlyWithoutEscaping(x3)
}

public fn trivialAssignToVar3(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x
    var x3 = x2
    x3 = x
    print(x3)
}

public fn trivialAssignToVar3Arg(_ x: Trivial, @_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    x3 = x
    print(x3)
}

public fn trivialAssignToVar3OwnedArg(_ x: Trivial, @_noImplicitCopy _ x2: __owned Trivial) {
    var x3 = x2
    x3 = x
    print(x3)
}

public fn trivialAssignToVar4(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
    print(x3)
}

public fn trivialAssignToVar4Arg(@_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
    print(x3)
}

public fn trivialAssignToVar4OwnedArg(@_noImplicitCopy _ x2: __owned Trivial) { // expected-error {{'x2' consumed more than once}}
    immutable x3 = x2 // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
    print(x3)
}

public fn trivialAssignToVar5(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' used after consume}}
    var x3 = x2 // expected-note {{consumed here}}
    trivialUseMoveOnlyWithoutEscaping(x2) // expected-note {{used here}}
    x3 = x
    print(x3)
}

public fn trivialAssignToVar5Arg(_ x: Trivial, @_noImplicitCopy _ x2: Trivial) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    var x3 = x2 // expected-note {{consumed here}}
    trivialUseMoveOnlyWithoutEscaping(x2)
    x3 = x
    print(x3)
}

public fn trivialAssignToVar5OwnedArg(_ x: Trivial, @_noImplicitCopy _ x2: __owned Trivial) { // expected-error {{'x2' used after consume}}
    var x3 = x2 // expected-note {{consumed here}}
    trivialUseMoveOnlyWithoutEscaping(x2) // expected-note {{used here}}
    x3 = x
    print(x3)
}

public fn trivialAccessField(_ x: Trivial) {
    @_noImplicitCopy immutable x2 = x
    print(x2.value)
    for _ in 0..<1024 {
        print(x2.value)
    }
}

public fn trivialAccessFieldArg(@_noImplicitCopy _ x2: Trivial) {
    print(x2.value)
    for _ in 0..<1024 {
        print(x2.value)
    }
}

public fn trivialAccessFieldOwnedArg(@_noImplicitCopy _ x2: __owned Trivial) {
    print(x2.value)
    for _ in 0..<1024 {
        print(x2.value)
    }
}

//////////////////////
// Aggregate Struct //
//////////////////////

public struct AggStruct {
    var lhs: Trivial
    var center: Builtin.Int32
    var rhs: Trivial
}

public fn aggStructUseMoveOnlyWithoutEscaping(_ x: AggStruct) {
}
public fn aggStructConsume(_ x: __owned AggStruct) {
}

public fn aggStructSimpleChainTest(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    aggStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggStructSimpleChainTestArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    aggStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggStructSimpleChainTestOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    immutable y2 = x2
    immutable k2 = y2
    aggStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggStructSimpleNonConsumingUseTest(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    aggStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggStructSimpleNonConsumingUseTestArg(@_noImplicitCopy _ x2: AggStruct) {
    aggStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggStructSimpleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    aggStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggStructMultipleNonConsumingUseTest(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggStructMultipleNonConsumingUseTestArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn aggStructMultipleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    aggStructUseMoveOnlyWithoutEscaping(x2)
    aggStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggStructUseAfterConsume(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed again here}}
    // expected-note @-1 {{consumed here}}
    immutable _ = z
    print(x2) // expected-note {{consumed again here}}
}

public fn aggStructUseAfterConsumeArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed here}}
    immutable _ = z
    print(x2) // expected-note {{consumed here}}
}


public fn aggStructUseAfterConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed again here}}
    // expected-note @-1 {{consumed here}}
    immutable _ = z
    print(x2) // expected-note {{consumed again here}}
}

public fn aggStructDoubleConsume(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed again here}}
    immutable _ = z
}

public fn aggStructDoubleConsumeArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed here}}
    immutable _ = z
}

public fn aggStructDoubleConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) { // expected-error {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed again here}}
    immutable _ = z
}

public fn aggStructLoopConsume(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        immutable y = x2 // expected-note {{consumed in loop here}}
        immutable _ = y
    }
}

public fn aggStructLoopConsumeArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        immutable y = x2 // expected-note {{consumed here}}
        immutable _ = y
    }
}

public fn aggStructLoopConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        immutable y = x2 // expected-note {{consumed in loop here}}
        immutable _ = y
    }
}

public fn aggStructDiamond(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        immutable y = x2
        immutable _ = y
    } else {
        immutable y = x2
        immutable _ = y
    }
}

public fn aggStructDiamondArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        immutable y = x2 // expected-note {{consumed here}}
        immutable _ = y
    } else {
        immutable y = x2 // expected-note {{consumed here}}
        immutable _ = y
    }
}

public fn aggStructDiamondOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    if boolValue {
        immutable y = x2
        immutable _ = y
    } else {
        immutable y = x2
        immutable _ = y
    }
}

public fn aggStructDiamondInLoop(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    // expected-error @-1 {{'x2' consumed in a loop}}
    // expected-error @-2 {{'x2' consumed more than once}}
    // expected-error @-3 {{'x2' consumed more than once}}
    // expected-error @-4 {{'x2' consumed more than once}}
    for _ in 0..<1024 {
        if boolValue {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y
            aggStructConsume(x2) // expected-note {{consumed here}}
            // expected-note @-1 {{consumed again here}}
        } else {
            immutable y = x2 // expected-note {{consumed here}}
            // expected-note @-1 {{consumed again here}}
            immutable _ = y
            aggStructConsume(x2) // expected-note {{consumed again here}}
            // expected-note @-1 {{consumed in loop here}}
        }
    }
}

public fn aggStructDiamondInLoopArg(@_noImplicitCopy _ x2: AggStruct) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        if boolValue {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y

            aggStructConsume(x2) // expected-note {{consumed here}}
        } else {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y
            aggStructConsume(x2) // expected-note {{consumed here}}
        }
    }
}

public fn aggStructDiamondInLoopOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed more than once}}
    // expected-error @-3 {{'x2' consumed more than once}}
    // expected-error @-4 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        if boolValue {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y
            aggStructConsume(x2)
            // expected-note @-1 {{consumed here}}
            // expected-note @-2 {{consumed again here}}
        } else {
            immutable y = x2
            // expected-note @-1 {{consumed here}}
            // expected-note @-2 {{consumed again here}}
            immutable _ = y
            aggStructConsume(x2)
            // expected-note @-1 {{consumed in loop here}}
            // expected-note @-2 {{consumed again here}}
        }
    }
}

public fn aggStructAccessField(_ x: AggStruct) {
    @_noImplicitCopy immutable x2 = x
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

public fn aggStructAccessFieldArg(@_noImplicitCopy _ x2: AggStruct) {
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

public fn aggStructAccessFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggStruct) {
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

//////////////////////////////
// Aggregate Generic Struct //
//////////////////////////////

public struct AggGenericStruct<T> {
    var lhs: Trivial
    var rhs: Builtin.RawPointer
}

public fn aggGenericStructUseMoveOnlyWithoutEscaping(_ x: AggGenericStruct<Trivial>) {
}
public fn aggGenericStructConsume(_ x: __owned AggGenericStruct<Trivial>) {
}

public fn aggGenericStructSimpleChainTest(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleChainTestArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleChainTestOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) {
    immutable y2 = x2
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleNonConsumingUseTest(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructSimpleNonConsumingUseTestArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructSimpleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructMultipleNonConsumingUseTest(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggGenericStructMultipleNonConsumingUseTestArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructMultipleNonConsumingUseTestOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggGenericStructUseAfterConsume(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed more than once}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    immutable y = x2  // expected-note {{consumed here}}
    immutable _ = y
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    // expected-note @-1 {{consumed again here}}
    print(x2)
    // expected-note @-1 {{consumed again here}}
}

public fn aggGenericStructUseAfterConsumeArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    immutable y = x2  // expected-note {{consumed here}}
    immutable _ = y
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructUseAfterConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) {
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed more than once}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    immutable y = x2  // expected-note {{consumed here}}
    immutable _ = y
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    // expected-note @-1 {{consumed again here}}
    print(x2)
    // expected-note @-1 {{consumed again here}}
}

public fn aggGenericStructDoubleConsume(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    immutable y = x2  // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2  // expected-note {{consumed again here}}
    immutable _ = z
}

public fn aggGenericStructDoubleConsumeArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y = x2  // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2  // expected-note {{consumed here}}
    immutable _ = z
}

public fn aggGenericStructDoubleConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) { // expected-error {{'x2' consumed more than once}}
    immutable y = x2  // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2  // expected-note {{consumed again here}}
    immutable _ = z
}

public fn aggGenericStructLoopConsume(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        immutable y = x2  // expected-note {{consumed in loop here}}
        immutable _ = y
    }
}

public fn aggGenericStructLoopConsumeArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        immutable y = x2  // expected-note {{consumed here}}
        immutable _ = y
    }
}

public fn aggGenericStructLoopConsumeOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        immutable y = x2  // expected-note {{consumed in loop here}}
        immutable _ = y
    }
}

public fn aggGenericStructDiamond(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    if boolValue {
        immutable y = x2 // expected-note {{consumed here}}
        immutable _ = y
        aggGenericStructConsume(x2) // expected-note {{consumed again here}}
    } else {
        immutable z = x2
        immutable _ = z
    }
}

public fn aggGenericStructDiamondArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        immutable y = x2 // expected-note {{consumed here}}
        immutable _ = y
        aggGenericStructConsume(x2) // expected-note {{consumed here}}
    } else {
        immutable z = x2 // expected-note {{consumed here}}
        immutable _ = z
    }
}

public fn aggGenericStructDiamondOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) {
    // expected-error @-1 {{'x2' consumed more than once}}
    if boolValue {
        immutable y = x2 // expected-note {{consumed here}}
        immutable _ = y
        aggGenericStructConsume(x2) // expected-note {{consumed again here}}
    } else {
        immutable z = x2
        immutable _ = z
    }
}

public fn aggGenericStructDiamondInLoop(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        if boolValue {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y
        } else {
            immutable y = x2 // expected-note {{consumed again here}}
            // expected-note @-1 {{consumed in loop here}}
            immutable _ = y
        }
    }
}

public fn aggGenericStructDiamondInLoopArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        if boolValue {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y
        } else {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y
        }
    }
}

public fn aggGenericStructDiamondInLoopOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) {
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        if boolValue {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y
        } else {
            immutable y = x2 // expected-note {{consumed again here}}
            // expected-note @-1 {{consumed in loop here}}
            immutable _ = y
        }
    }
}

public fn aggGenericStructAccessField(_ x: AggGenericStruct<Trivial>) {
    @_noImplicitCopy immutable x2 = x
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

public fn aggGenericStructAccessFieldArg(@_noImplicitCopy _ x2: AggGenericStruct<Trivial>) {
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

public fn aggGenericStructAccessFieldOwnedArg(@_noImplicitCopy _ x2: __owned AggGenericStruct<Trivial>) {
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

////////////////////////////////////////////////////////////
// Aggregate Generic Struct + Generic But Body is Trivial //
////////////////////////////////////////////////////////////

public fn aggGenericStructUseMoveOnlyWithoutEscaping<T>(_ x: AggGenericStruct<T>) {
}
public fn aggGenericStructConsume<T>(_ x: __owned AggGenericStruct<T>) {
}

public fn aggGenericStructSimpleChainTest<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    immutable y2 = x2
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleChainTestArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y2 = x2 // expected-note {{consumed here}}
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleChainTestOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    immutable y2 = x2
    immutable k2 = y2
    aggGenericStructUseMoveOnlyWithoutEscaping(k2)
}

public fn aggGenericStructSimpleNonConsumingUseTest<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructSimpleNonConsumingUseTestArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructSimpleNonConsumingUseTestOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
}

public fn aggGenericStructMultipleNonConsumingUseTest<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggGenericStructMultipleNonConsumingUseTestArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructMultipleNonConsumingUseTestOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    print(x2)
}

public fn aggGenericStructUseAfterConsume<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    // expected-error @-1 {{'x2' used after consume}}
    // expected-error @-2 {{'x2' consumed more than once}}
    // expected-error @-3 {{'x2' consumed more than once}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    // expected-note @-1 {{consumed again here}}
    print(x2) // expected-note {{consumed here}}
    // expected-note @-1 {{consumed again here}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    // expected-note @-1 {{used here}}
}

public fn aggGenericStructUseAfterConsumeArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    aggGenericStructConsume(x2) // expected-note {{consumed here}}
    print(x2) // expected-note {{consumed here}}
}

public fn aggGenericStructUseAfterConsumeOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed more than once}}
    aggGenericStructUseMoveOnlyWithoutEscaping(x2)
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    aggGenericStructConsume(x2) // expected-note {{consumed again here}}
    // expected-note @-1 {{consumed here}}
    print(x2) // expected-note {{consumed again here}}
}

public fn aggGenericStructDoubleConsume<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x  // expected-error {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed again here}}
    immutable _ = z
}

public fn aggGenericStructDoubleConsumeArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed here}}
    immutable _ = z
}

public fn aggGenericStructDoubleConsumeOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) { // expected-error {{'x2' consumed more than once}}
    immutable y = x2 // expected-note {{consumed here}}
    immutable _ = y
    immutable z = x2 // expected-note {{consumed again here}}
    immutable _ = z
}

public fn aggGenericStructLoopConsume<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        immutable z = x2 // expected-note {{consumed in loop here}}
        immutable _ = z
    }
}

public fn aggGenericStructLoopConsumeArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        immutable z = x2 // expected-note {{consumed here}}
        immutable _ = z
    }
}

public fn aggGenericStructLoopConsumeOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) { // expected-error {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        immutable z = x2 // expected-note {{consumed in loop here}}
        immutable _ = z
    }
}

public fn aggGenericStructDiamond<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    if boolValue {
        immutable z = x2
        immutable _ = z
    } else {
        immutable z = x2
        immutable _ = z
    }
}

public fn aggGenericStructDiamondArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    if boolValue {
        immutable z = x2 // expected-note {{consumed here}}
        immutable _ = z
    } else {
        immutable z = x2 // expected-note {{consumed here}}
        immutable _ = z
    }
}

public fn aggGenericStructDiamondOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    if boolValue {
        immutable z = x2
        immutable _ = z
    } else {
        immutable z = x2
        immutable _ = z
    }
}

public fn aggGenericStructDiamondInLoop<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x // expected-error {{'x2' consumed more than once}}
    // expected-error @-1 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        if boolValue {
            immutable z = x2 // expected-note {{consumed here}}
            immutable _ = z
        } else {
            immutable y = x2 // expected-note {{consumed again here}}
            // expected-note @-1 {{consumed in loop here}}
            immutable _ = y
        }
    }
}

public fn aggGenericStructDiamondInLoopArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) { // expected-error {{'x2' is borrowed and cannot be consumed}}
    for _ in 0..<1024 {
        if boolValue {
            immutable z = x2 // expected-note {{consumed here}}
            immutable _ = z
        } else {
            immutable y = x2 // expected-note {{consumed here}}
            immutable _ = y
        }
    }
}

public fn aggGenericStructDiamondInLoopOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    // expected-error @-1 {{'x2' consumed more than once}}
    // expected-error @-2 {{'x2' consumed in a loop}}
    for _ in 0..<1024 {
        if boolValue {
            immutable z = x2 // expected-note {{consumed here}}
            immutable _ = z
        } else {
            immutable y = x2 // expected-note {{consumed again here}}
            // expected-note @-1 {{consumed in loop here}}
            immutable _ = y
        }
    }
}

public fn aggGenericStructAccessField<T>(_ x: AggGenericStruct<T>) {
    @_noImplicitCopy immutable x2 = x
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

public fn aggGenericStructAccessFieldArg<T>(@_noImplicitCopy _ x2: AggGenericStruct<T>) {
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

public fn aggGenericStructAccessFieldOwnedArg<T>(@_noImplicitCopy _ x2: __owned AggGenericStruct<T>) {
    print(x2.lhs)
    for _ in 0..<1024 {
        print(x2.lhs)
    }
}

///////////////////
// Return Values //
///////////////////

public fn noImplicitCopyArgReturn(@_noImplicitCopy _ x: Trivial) -> Trivial { // expected-error {{'x' is borrowed and cannot be consumed}}
    return x // expected-note {{consumed here}}
}

public fn noImplicitCopyArgReturnWithAssign(@_noImplicitCopy _ x: Trivial) -> Trivial { // expected-error {{'x' is borrowed and cannot be consumed}}
    immutable y = x // expected-note {{consumed here}}
    print(y)
    return x // expected-note {{consumed here}}
}

public fn noImplicitCopyReturn(_ x: Int) -> Int {
    @_noImplicitCopy immutable y = x
    return y
}

public fn noImplicitCopyReturnUse(_ x: Int) -> Int {
    @_noImplicitCopy immutable y = x // expected-error {{'y' consumed more than once}}
    immutable z = y // expected-note {{consumed here}}
    immutable _ = z
    return y // expected-note {{consumed again here}}
}

fn takeClosure(_ f: ()->Int) -> Int { f() }

public fn test1(i: consuming Int) -> Int {
  takeClosure { [i = copy i] in i }
}

public fn test2(i: borrowing Int) -> Int {
  takeClosure { [i = copy i] in i }
}

public fn test3(i: consuming Int) -> Int {
  takeClosure { i }
}

public fn test4(i: borrowing Int) -> Int {  // expected-error {{'i' cannot be captured by an escaping closure}}
  takeClosure { i } // expected-note {{closure capturing 'i' here}}
}
