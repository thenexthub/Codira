// RUN: %target-language-frontend -parse-sil -emit-ir -disable-toolchain-optzns -O %s | %FileCheck --check-prefix=CHECK-%target-runtime %s
// RUN: %target-language-frontend -parse-sil -emit-ir -disable-toolchain-optzns -Ounchecked %s | %FileCheck --check-prefix=CHECK-%target-runtime %s
// RUN: %target-language-frontend -parse-sil -emit-ir -disable-toolchain-optzns -Onone %s | %FileCheck --check-prefix=ONONE %s

// REQUIRES: CPU=i386 || CPU=x86_64

// At -Onone we don't run the LLVM ARC optimizer, so the fixLifetime call is
// unnecessary.
// ONONE-NOT: @__language_fixLifetime

// CHECK-objc-LABEL: define{{( dllexport)?}}{{( protected)?}} languagecc void @test(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr noalias {{(nocapture|captures\(none\))}} dereferenceable({{.*}}) %5, {{(i64|i32)}} %6, {{(i64|i32)}} %7) {{.*}} {
// CHECK-objc: entry:
// CHECK-objc:  call void @__language_fixLifetime(ptr
// CHECK-objc:  call void @__language_fixLifetime(ptr
// CHECK-objc:  call void @__language_fixLifetime(ptr
// CHECK-objc:  call void @__language_fixLifetime(ptr
// CHECK-objc:  call void @__language_fixLifetime(ptr
// CHECK-objc:  call void @__language_fixLifetime(ptr
// CHECK-objc:  [[TEMP:%.*]] = inttoptr {{(i64|i32)}} %6 to ptr
// CHECK-objc:  call void @__language_fixLifetime(ptr [[TEMP]])
// CHECK-objc:  call void @__language_fixLifetime(ptr

// CHECK-native-LABEL: define{{( dllexport)?}}{{( protected)?}} languagecc void @test(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr noalias {{(nocapture|captures\(none\))}} dereferenceable({{.*}}) %5, {{(i64|i32)}} %6, {{(i64|i32)}} %7) {{.*}} {
// CHECK-native: entry:
// CHECK-native:  call void @__language_fixLifetime(ptr
// CHECK-native:  call void @__language_fixLifetime(ptr
// CHECK-native:  call void @__language_fixLifetime(ptr
// CHECK-native:  call void @__language_fixLifetime(ptr
// CHECK-native:  call void @__language_fixLifetime(ptr
// CHECK-native:  call void @__language_fixLifetime(ptr
// CHECK-native:  call void @__language_fixLifetime(ptr

import Builtin

sil_stage canonical

typealias AnyObject = Builtin.AnyObject

class C {}
sil_vtable C {}
protocol P : class {}
typealias F = () -> ()
struct Agg {
  var c : C
  var p : P
  var f : F
}

enum MyOptional<T> {
  case none
  case some(T)
}

sil [Onone] @test
  : $@convention(thin) (C, P, @callee_owned () -> (), Agg, @guaranteed MyOptional<P>) -> () {
bb0(%0 : $C, %1 : $P, %2 : $@callee_owned () -> (), %3 : $Agg, %4 : $MyOptional<P>):
  fix_lifetime %0 : $C
  fix_lifetime %1 : $P
  fix_lifetime %2 : $@callee_owned () -> ()
  fix_lifetime %3 : $Agg
  fix_lifetime %4 : $MyOptional<P>

  %5 = alloc_stack $C
  fix_lifetime %5 : $*C
  dealloc_stack %5 : $*C
  %9999 = tuple()
  return %9999 : $()
}
