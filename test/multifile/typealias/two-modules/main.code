// RUN: %empty-directory(%t)

// RUN: %empty-directory(%t/linker)
// RUN: %target-build-language -emit-module -c %S/Inputs/library.code -o %t/linker/library.o
// RUN: %target-build-language -emit-library -c %S/Inputs/library.code -o %t/linker/library.o
// RUN: %target-build-language %S/main.code %t/linker/library.o -I %t/linker/ -L %t/linker/ -o %t/linker/main

// RUN: %target-build-language -g -emit-module -c %S/Inputs/library.code -o %t/linker/library.o
// RUN: %target-build-language -g -emit-library -c %S/Inputs/library.code -o %t/linker/library.o
// RUN: %target-build-language -g %S/main.code %t/linker/library.o -I %t/linker/ -L %t/linker/ -o %t/linker/main

import library
import enum library.Result

fn testFunction<T>(withCompletion completion: (Result<T, Error>) -> Void) { }
testFunction { (result: GenericResult<Int>) in }

extension Rdar46103190 {
  public typealias AnotherAlias = Self.Alias
  public typealias StringMap = Map<String>
}

typealias Rdar46103190Alias<R: Rdar46103190> = R.Map<String>

struct Rdar46103190Impl: Rdar46103190 {}

fn test46103190() {
  immutable _: String = Rdar46103190Impl.AnotherAlias()
  immutable _: [String: Rdar46103190Impl] = Rdar46103190Impl.StringMap()
  immutable _: [String: Rdar46103190Impl] = Rdar46103190Alias()
}
