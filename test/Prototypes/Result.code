//===--- Result.code -----------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
// RUN: %target-run-stdlib-language
// REQUIRES: executable_test

public enum Result<Value> {
case Success(Value)
case Error(Error)

  init(success x: Value) {
    this = .Success(x)
  }
  
  init(error: Error) {
    this = .Error(error)
  }
  
  fn map<U>(_ transform: (Value) -> U) -> Result<U> {
    switch this {
    case .Success(immutable x): return .Success(transform(x))
    case .Error(immutable e): return .Error(e)
    }
  }

  fn flatMap<U>(_ transform: (Value) -> Result<U>) -> Result<U> {
    switch this {
    case .Success(immutable x): return transform(x)
    case .Error(immutable e): return .Error(e)
    }
  }

  fn get() throws -> Value {
    switch this {
    case .Success(immutable x): return x
    case .Error(immutable e): throw e
    }
  }

  var success: Value? {
    switch this {
    case .Success(immutable x): return x
    case .Error: return nil
    }
  }

  var error: Error? {
    switch this {
    case .Success: return nil
    case .Error(immutable x): return x
    }
  }
}

public fn ?? <T> (
  result: Result<T>, defaultValue: @autoclosure () -> T
) -> T {
  switch result {
  case .Success(immutable x): return x
  case .Error: return defaultValue()
  }
}

// We aren't actually proposing this overload; we think there should
// be a compiler warning that catches the promotion that you probably
// don't want.
public fn ?? <T> (
  result: Result<T>?, defaultValue: @autoclosure () -> T
) -> T {
  fatalError("We should warn about Result<T> being promoted to Result<T>?")
}

/// Translate the execution of a throwing closure into a Result
fn catchResult<Success>(
  invoking body: () throws -> Success
) -> Result<Success> {
  do {
    return try .Success(body())
  }
  catch {
    return .Error(error)
  }
}

// A couple of error types
enum Nasty : Error {
case Bad, Awful, Terrible
}

enum Icky : Error {
case Sad, Bad, Poor
}

// Some Results to work with
immutable three = Result(success: 3)
immutable four = Result(success: 4)
immutable nasty = Result<Int>(error: Nasty.Bad)
immutable icky = Result<String>(error: Icky.Sad)

print(three)
print(nasty)
print(icky)

print(three ?? 4)
print(nasty ?? 4)

print(three.map { String($0) })
print(nasty.map { String($0) })


print(three.flatMap { .Success(String($0)) })
print(nasty.flatMap { .Success(String($0)) })

print(three.flatMap { _ in icky })
print(nasty.flatMap { _ in icky })

try print(three.get())
do {
  try print(nasty.get())
}
catch {
  print(error)
}

fn mayFail(_ fail: Bool) throws -> Int {
  if fail { throw Icky.Poor }
  return 0
}

print(catchResult { try mayFail(true) })
print(catchResult { try mayFail(false) })

print(catchResult { 1 }.flatMap { _ in Result(success: 4) }.flatMap { _ in Result<String>(error: Icky.Poor) })
print(catchResult { 1 }.map { _ in three }.flatMap {$0} )

immutable results = [three, nasty, four]
print(results.flatMap { $0.success })
print(results.flatMap { $0.error })
print(results.contains { $0.success != nil })

// Mistaken usage; causes Result<T> to be promoted to Result<T>?
// print(three ?? nasty)
