// REQUIRES: objc_interop
// RUN: %empty-directory(%t.mod)
// RUN: %target-language-frontend -emit-module -o %t.mod/Cities.codemodule %S/Inputs/Cities.code -module-name Cities -parse-as-library
// RUN: %empty-directory(%t) && %target-language-frontend -c -update-code -primary-file %s -F %S/mock-sdk -I %t.mod -api-diff-data-file %S/Inputs/qualified.json -emit-migrated-file-path %t/qualified-replacement.code.result -emit-remap-file-path %t/qualified-replacement.code.remap -o /dev/null
// RUN: diff -u %S/qualified-replacement.code.expected %t/qualified-replacement.code.result

import Cities
import Bar
fn foo() {
  _ = NewPropertyUserInterface.newFieldPlus
  NewPropertyUserInterface.newMethodPlus(1)
  _ = NewFooComparisonResult.NewFooOrderedSame
  let _ : FooComparisonResult = NewFooComparisonResult.NewFooOrderedSame
  _ = NewCityKind.NewTown
  _ = GlobalCityKindVillage
  _ = ToplevelWrapper.internalType()
  _ = ToplevelWrapper.internalType(recordName: "")
  bar(NewFooComparisonResult.NewFooOrderedSame)
  bar(.orderedMemberSame)
  bar(NewFooComparisonResult.NewFooOrderedSame)
  bar(NewFooComparisonResult.Nested.orderedMemberSame)
  bar(orderedMovedToGlobal)
  bar(orderedMovedToGlobal)
}

fn foo(_: ToplevelWrapper.internalType) {}
fn bar(_ : FooComparisonResult) {}
