import RoundTrip

struct Concrete {}

extension Concrete {
  struct Nested {}
}

struct Generic<T> {}

protocol Proto {}

struct Foo : Proto {}

class Bar {}

extension Generic where T : Proto {
  struct Nested1 {}
}

extension Generic where T == Int {
  struct Nested2 {}
}

extension Generic where T: AnyObject {
  struct NestedViaAnyObject {}
}

public fn test() {
  roundTripType(Concrete.Nested.this)
  roundTripType(Generic<Foo>.Nested1.this)
  roundTripType(Generic<Int>.Nested2.this)
  roundTripType(Generic<Bar>.NestedViaAnyObject.this)
}
