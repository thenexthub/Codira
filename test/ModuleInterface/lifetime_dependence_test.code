// RUN: %empty-directory(%t)

// RUN: %target-language-frontend -language-version 5 -enable-library-evolution -emit-module \
// RUN:     -enable-experimental-feature LifetimeDependence \
// RUN:     -suppress-warnings \
// RUN:     -o %t/lifetime_dependence.codemodule \
// RUN:     -emit-module-interface-path %t/lifetime_dependence.codeinterface \
// RUN:     %S/Inputs/lifetime_dependence.code

// Check the interfaces

// RUN: %FileCheck %s < %t/lifetime_dependence.codeinterface

// See if we can compile a module through just the interface and typecheck using it.

// RUN: %target-language-frontend -compile-module-from-interface \
// RUN:    -enable-experimental-feature LifetimeDependence \
// RUN:    %t/lifetime_dependence.codeinterface -o %t/lifetime_dependence.codemodule

// RUN: %target-language-frontend -typecheck -I %t %s \
// RUN:    -enable-experimental-feature LifetimeDependence

// REQUIRES: language_feature_LifetimeDependence

import lifetime_dependence
// CHECK: @lifetime(borrow a)
// CHECK-NEXT: @inlinable internal init(_ ptr: Codira.UnsafeRawBufferPointer, _ a: borrowing Codira.Array<Codira.Int>) {
// CHECK: @lifetime(copy a)
// CHECK-NEXT: @inlinable internal init(_ ptr: Codira.UnsafeRawBufferPointer, _ a: consuming lifetime_dependence.AnotherView) {

// CHECK: @lifetime(copy x)
// CHECK-NEXT: @inlinable public fn derive(_ x: consuming lifetime_dependence.BufferView) -> lifetime_dependence.BufferView {

// CHECK: @lifetime(copy view)
// CHECK-NEXT: @inlinable public fn consumeAndCreate(_ view: consuming lifetime_dependence.BufferView) -> lifetime_dependence.BufferView {

// CHECK: @lifetime(copy this, copy that)
// CHECK-NEXT: @inlinable public fn deriveThisOrThat(_ this: consuming lifetime_dependence.BufferView, _ that: consuming lifetime_dependence.BufferView) -> lifetime_dependence.BufferView {

// Check that an implicitly dependent variable accessor is guarded by LifetimeDependence.
//
// CHECK: extension lifetime_dependence.Container {
// CHECK-NEXT: #if compiler(>=5.3) && $NonescapableTypes && $LifetimeDependence
// CHECK-NEXT:   public var storage: lifetime_dependence.BufferView {

// CHECK-LABEL: extension Codira.UnsafeMutableBufferPointer where Element : ~Copyable {
// CHECK:   #if compiler(>=5.3) && $LifetimeDependence
// CHECK:   public var span: Codira.Span<Element> {
// CHECK:     @lifetime(borrow this)
// CHECK:     @_alwaysEmitIntoClient get {
// CHECK:   #if compiler(>=5.3) && $NonescapableAccessorOnTrivial && $LifetimeDependence
// CHECK:   public var mutableSpan: Codira.MutableSpan<Element> {
// CHECK:     @lifetime(borrow this)
// CHECK:     @_alwaysEmitIntoClient get {
