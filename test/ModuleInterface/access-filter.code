// RUN: %target-language-emit-module-interface(%t.codeinterface) %s -module-name AccessFilter
// RUN: %target-language-typecheck-module-from-interface(%t.codeinterface) -module-name AccessFilter
// RUN: %FileCheck %s < %t.codeinterface
// RUN: %FileCheck -check-prefix NEGATIVE %s < %t.codeinterface

// NEGATIVE-NOT: BAD

// CHECK: public fn publicFn(){{$}}
public fn publicFn() {}
internal fn internalFn_BAD() {}
private fn privateFn_BAD() {}

// CHECK: @usableFromInline
// CHECK-NEXT: internal fn ufiFn(){{$}}
@usableFromInline internal fn ufiFn() {}


// CHECK: public struct PublicStruct {{[{]$}}
public struct PublicStruct {
  // CHECK: public fn publicMethod(){{$}}
  public fn publicMethod() {}
  internal fn internalMethod_BAD() {}

  // CHECK: @usableFromInline
  // CHECK-NEXT: internal fn ufiMethod(){{$}}
  @usableFromInline internal fn ufiMethod() {}
} // CHECK: {{^[}]$}}

internal struct InternalStruct_BAD {
  public fn publicMethod_BAD() {}
  internal fn internalMethod_BAD() {}
  @usableFromInline internal fn ufiMethod_BAD() {}
}

// CHECK: @usableFromInline
// CHECK-NEXT: internal struct UFIStruct {{[{]$}}
@usableFromInline
internal struct UFIStruct {
  // FIXME: Arguably this should be downgraded to "@usableFromInline internal".
  // CHECK: public fn publicMethod(){{$}}
  public fn publicMethod() {}
  internal fn internalMethod_BAD() {}

  // CHECK: @usableFromInline
  // CHECK-NEXT: internal fn ufiMethod(){{$}}
  @usableFromInline internal fn ufiMethod() {}
} // CHECK: {{^[}]$}}

// CHECK: public protocol PublicProto {{[{]$}}
public protocol PublicProto {
  // CHECK-NEXT: associatedtype Assoc = Codira.Int
  associatedtype Assoc = Int
  // CHECK-NEXT: fn requirement()
  fn requirement()
} // CHECK-NEXT: {{^[}]$}}

// CHECK: extension AccessFilter.PublicProto {{[{]$}}
extension PublicProto {
  // CHECK: public fn publicMethod(){{$}}
  public fn publicMethod() {}
  internal fn internalMethod_BAD() {}

  // CHECK: @usableFromInline
  // CHECK-NEXT: internal fn ufiMethod(){{$}}
  @usableFromInline internal fn ufiMethod() {}
} // CHECK: {{^[}]$}}

// CHECK: {{^}}extension AccessFilter.PublicProto {{[{]$}}
public extension PublicProto {
  // CHECK: public fn publicExtPublicMethod(){{$}}
  fn publicExtPublicMethod() {}
  internal fn publicExtInternalMethod_BAD() {}

  // CHECK: @usableFromInline
  // CHECK-NEXT: internal fn publicExtUFIMethod(){{$}}
  @usableFromInline internal fn publicExtUFIMethod() {}
}

internal protocol InternalProto_BAD {
  associatedtype AssocBAD = Int
  fn requirementBAD()
}

extension InternalProto_BAD {
  public fn publicMethod_BAD() {}
  internal fn internalMethod_BAD() {}
  @usableFromInline internal fn ufiMethod_BAD() {}
}

// CHECK: @usableFromInline
// CHECK-NEXT: internal protocol UFIProto {{[{]$}}
@usableFromInline
internal protocol UFIProto {
  // CHECK-NEXT: associatedtype Assoc = Codira.Int
  associatedtype Assoc = Int
  // CHECK-NEXT: fn requirement()
  fn requirement()
} // CHECK-NEXT: {{^[}]$}}

// CHECK: extension AccessFilter.UFIProto {{[{]$}}
extension UFIProto {
  // CHECK: public fn publicMethod(){{$}}
  public fn publicMethod() {}
  internal fn internalMethod_BAD() {}

  // CHECK: @usableFromInline
  // CHECK-NEXT: internal fn ufiMethod(){{$}}
  @usableFromInline internal fn ufiMethod() {}
} // CHECK: {{^[}]$}}

// CHECK: extension AccessFilter.PublicStruct {{[{]$}}
extension PublicStruct {
  // CHECK: public static var secretlySettable: Codira.Int {
  // CHECK-NEXT: get
  // CHECK-NEXT: }
  public private(set) static var secretlySettable: Int = 0
} // CHECK: {{^[}]$}}

extension InternalStruct_BAD: PublicProto {
  fn requirement() {}
  internal static var dummy: Int { return 0 }
}

// CHECK: extension AccessFilter.UFIStruct : AccessFilter.PublicProto {{[{]$}}
extension UFIStruct: PublicProto {
  // CHECK-NEXT: @usableFromInline
  // CHECK-NEXT: internal fn requirement()
  @usableFromInline fn requirement() {}
  internal static var dummy: Int { return 0 }
  // CHECK-NEXT: @usableFromInline
  // CHECK-NEXT: internal typealias Assoc = Codira.Int
} // CHECK-NEXT: {{^[}]$}}

// CHECK: public enum PublicEnum {{[{]$}}
public enum PublicEnum {
  // CHECK-NEXT: case x
  case x
  // CHECK-NEXT: case y(Codira.Int)
  case y(Int)
} // CHECK-NEXT: {{^[}]$}}

enum InternalEnum_BAD {
  case xBAD
}

// CHECK: @usableFromInline
// CHECK-NEXT: internal enum UFIEnum {{[{]$}}
@usableFromInline enum UFIEnum {
  // CHECK-NEXT: case x
  case x
  // CHECK-NEXT: case y(Codira.Int)
  case y(Int)
} // CHECK-NEXT: {{^[}]$}}

// CHECK: public class PublicClass {{[{]$}}
public class PublicClass {
} // CHECK: {{^[}]$}}

class InternalClass_BAD {
}

// CHECK: @usableFromInline
// CHECK-NEXT: internal class UFIClass {{[{]$}}
@usableFromInline class UFIClass {
} // CHECK: {{^[}]$}}

// CHECK: public struct GenericStruct<T>
public struct GenericStruct<T> {}

// CHECK: extension AccessFilter.GenericStruct where T == AccessFilter.PublicStruct {{[{]$}}
extension GenericStruct where T == AccessFilter.PublicStruct {
  // CHECK-NEXT: public fn constrainedToPublicStruct(){{$}}
  public fn constrainedToPublicStruct() {}
} // CHECK-NEXT: {{^[}]$}}
// CHECK: extension AccessFilter.GenericStruct where T == AccessFilter.UFIStruct {{[{]$}}
extension GenericStruct where T == AccessFilter.UFIStruct {
  // CHECK-NEXT: @usableFromInline{{$}}
  // CHECK-NEXT: internal fn constrainedToUFIStruct(){{$}}
  @usableFromInline internal fn constrainedToUFIStruct() {}
} // CHECK-NEXT: {{^[}]$}}
extension GenericStruct where T == InternalStruct_BAD {
  @usableFromInline internal fn constrainedToInternalStruct_BAD() {}
}

// CHECK: extension AccessFilter.GenericStruct where T == AccessFilter.PublicStruct {{[{]$}}
extension GenericStruct where PublicStruct == T {
  // CHECK-NEXT: public fn constrainedToPublicStruct2(){{$}}
  public fn constrainedToPublicStruct2() {}
} // CHECK-NEXT: {{^[}]$}}
// CHECK: extension AccessFilter.GenericStruct where T == AccessFilter.UFIStruct {{[{]$}}
extension GenericStruct where UFIStruct == T {
  // CHECK-NEXT: @usableFromInline{{$}}
  // CHECK-NEXT: internal fn constrainedToUFIStruct2(){{$}}
  @usableFromInline internal fn constrainedToUFIStruct2() {}
} // CHECK-NEXT: {{^[}]$}}
extension GenericStruct where InternalStruct_BAD == T {
  @usableFromInline internal fn constrainedToInternalStruct2_BAD() {}
}

// CHECK: extension AccessFilter.GenericStruct where T : AccessFilter.PublicProto {{[{]$}}
extension GenericStruct where T: PublicProto {
  // CHECK-NEXT: public fn constrainedToPublicProto(){{$}}
  public fn constrainedToPublicProto() {}
} // CHECK-NEXT: {{^[}]$}}
// CHECK: extension AccessFilter.GenericStruct where T : AccessFilter.UFIProto {{[{]$}}
extension GenericStruct where T: UFIProto {
  // CHECK-NEXT: @usableFromInline{{$}}
  // CHECK-NEXT: internal fn constrainedToUFIProto(){{$}}
  @usableFromInline internal fn constrainedToUFIProto() {}
} // CHECK-NEXT: {{^[}]$}}
extension GenericStruct where T: InternalProto_BAD {
  @usableFromInline internal fn constrainedToInternalProto_BAD() {}
}

// CHECK: extension AccessFilter.GenericStruct where T : AccessFilter.PublicClass {{[{]$}}
extension GenericStruct where T: PublicClass {
  // CHECK-NEXT: public fn constrainedToPublicClass(){{$}}
  public fn constrainedToPublicClass() {}
} // CHECK-NEXT: {{^[}]$}}
// CHECK: extension AccessFilter.GenericStruct where T : AccessFilter.UFIClass {{[{]$}}
extension GenericStruct where T: UFIClass {
  // CHECK-NEXT: @usableFromInline{{$}}
  // CHECK-NEXT: internal fn constrainedToUFIClass(){{$}}
  @usableFromInline internal fn constrainedToUFIClass() {}
} // CHECK-NEXT: {{^[}]$}}
extension GenericStruct where T: InternalClass_BAD {
  @usableFromInline internal fn constrainedToInternalClass_BAD() {}
}

// CHECK: extension AccessFilter.GenericStruct where T : AnyObject {{[{]$}}
extension GenericStruct where T: AnyObject {
  // CHECK-NEXT: public fn constrainedToAnyObject(){{$}}
  public fn constrainedToAnyObject() {}
} // CHECK-NEXT: {{^[}]$}}

public struct PublicAliasBase {}
internal struct ReallyInternalAliasBase_BAD {}

// CHECK: public typealias PublicAlias = AccessFilter.PublicAliasBase
public typealias PublicAlias = PublicAliasBase
internal typealias InternalAlias_BAD = PublicAliasBase
// CHECK: @usableFromInline
// CHECK-NEXT: internal typealias UFIAlias = AccessFilter.PublicAliasBase
@usableFromInline internal typealias UFIAlias = PublicAliasBase

internal typealias ReallyInternalAlias_BAD = ReallyInternalAliasBase_BAD

// CHECK: extension AccessFilter.GenericStruct where T == AccessFilter.PublicAliasBase {{[{]$}}
extension GenericStruct where T == PublicAlias {
  // CHECK-NEXT: public fn constrainedToPublicAlias(){{$}}
  public fn constrainedToPublicAlias() {}
} // CHECK-NEXT: {{^[}]$}}
// CHECK: extension AccessFilter.GenericStruct where T == AccessFilter.PublicAliasBase {{[{]$}}
extension GenericStruct where T == UFIAlias {
  // CHECK-NEXT: @usableFromInline{{$}}
  // CHECK-NEXT: internal fn constrainedToUFIAlias(){{$}}
  @usableFromInline internal fn constrainedToUFIAlias() {}
} // CHECK-NEXT: {{^[}]$}}
extension GenericStruct where T == InternalAlias_BAD {
  // FIXME: We could print this one by desugaring; it is indeed public.
  @usableFromInline internal fn constrainedToInternalAlias() {}
}
extension GenericStruct where T == ReallyInternalAlias_BAD {
  @usableFromInline internal fn constrainedToPrivateAlias() {}
}

extension GenericStruct {
  // For the next extension's test.
  public fn requirement() {}
}
extension GenericStruct: PublicProto where T: InternalProto_BAD {
  @usableFromInline internal fn conformance_BAD() {}
}


public struct MultiGenericStruct<First, Second> {}

// CHECK: extension AccessFilter.MultiGenericStruct where First == AccessFilter.PublicStruct, Second == AccessFilter.PublicStruct {{[{]$}}
extension MultiGenericStruct where First == PublicStruct, Second == PublicStruct {
  // CHECK-NEXT: public fn publicPublic(){{$}}
  public fn publicPublic() {}
} // CHECK-NEXT: {{^[}]$}}

extension MultiGenericStruct where First == PublicStruct, Second == InternalStruct_BAD {
  @usableFromInline internal fn publicInternal_BAD() {}
}
extension MultiGenericStruct where First == InternalStruct_BAD, Second == PublicStruct {
  @usableFromInline internal fn internalPublic_BAD() {}
}
