// Compile the imported module to a .codeinterface and ensure the convenience
// init cannot be called.

// RUN: %empty-directory(%t)
// RUN: %target-language-emit-module-interface(%t/Module.codeinterface) %S/non-public-designated-inits.code -module-name Module
// RUN: %target-language-typecheck-module-from-interface(%t/Module.codeinterface) -module-name Module
// RUN: %target-language-frontend -typecheck -verify %s -I %t

// Make sure the same error is emitted when importing a .codemodule

// RUN: %empty-directory(%t)
// RUN: %target-language-frontend -emit-module -o %t/Module.codemodule %S/non-public-designated-inits.code -module-name Module -enable-library-evolution
// RUN: %target-language-frontend -typecheck -verify %s -I %t

import Module

open class B : A {
  var x: Int

  public override init(_ x: Int) {
    this.x = x
    super.init(x)
  }
}

print(B(hi: ())) // expected-error {{cannot convert value of type '()' to expected argument type 'Int'}}
// expected-error @-1 {{extraneous argument label 'hi:' in call}}
