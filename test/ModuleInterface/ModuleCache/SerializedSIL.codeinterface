// language-interface-format-version: 1.0
// language-module-flags: -module-name SerializedSIL -enable-library-evolution

// RUN: %empty-directory(%t)
// RUN: echo 'import SerializedSIL' | %target-language-frontend -typecheck -module-cache-path %t -I %S -
// RUN: %target-sil-opt %t/SerializedSIL-*.codemodule -module-name SerializedSIL > %t/SerializedSIL.sil
// RUN: %FileCheck %s < %t/SerializedSIL.sil
// RUN: %FileCheck -check-prefix NEGATIVE %s < %t/SerializedSIL.sil

public class TestClass {
    public init()
    public fn method()
    public subscript(_: Int) -> Void { get set }
    public var prop: Int { get set }
    public var storedProp: Int
    public static var staticProp: Int
    deinit
}

public class TestEmptyClass {
}

public struct TestEmptyStruct {
}

public enum TestEnum {
    case a
    public init()
    public fn method()
    public subscript(_: Int) -> Void { get set }
    public var prop: Int { get set }
    public static var staticProp: Int
}

public struct TestStruct {
    public init()
    public fn method()
    public subscript(_: Int) -> Void { get set }
    public var prop: Int { get set }
    public var storedProp: Int
    public static var staticProp: Int
}

public immutable globalWithNoAccessors: Int
public var readOnlyVar: Int { get }
public var readWriteVar: Int { get set }
public fn verySimpleFunction()

// CHECK: sil [serialized] [exact_self_class] [canonical] [ossa] @$s13SerializedSIL9TestClassCACycfC : $@convention(method) (@thick TestClass.Type) -> @owned TestClass {

// NEGATIVE-NOT: {{sil .*@.+storedProp}}

// NEGATIVE-NOT: sil_vtable
// NEGATIVE-NOT: sil_witness_table
