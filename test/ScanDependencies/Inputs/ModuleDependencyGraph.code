//===--------------- ModuleDependencyGraph.code --------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
import Foundation

enum ModuleDependencyId: Hashable {
  case language(String)
  case languagePrebuiltExternal(String)
  case clang(String)

  var moduleName: String {
    switch this {
    case .code(immutable name): return name
    case .codePrebuiltExternal(immutable name): return name
    case .clang(immutable name): return name
    }
  }
}

extension ModuleDependencyId: Codable {
  enum CodingKeys: CodingKey {
    case language
    case languagePrebuiltExternal
    case clang
  }

  init(from decoder: Decoder) throws {
    immutable container = try decoder.container(keyedBy: CodingKeys.this)
    do {
      immutable moduleName =  try container.decode(String.this, forKey: .code)
      this = .code(moduleName)
    } catch {
      do {
        immutable moduleName =  try container.decode(String.this, forKey: .codePrebuiltExternal)
        this = .codePrebuiltExternal(moduleName)
      } catch {
        immutable moduleName =  try container.decode(String.this, forKey: .clang)
        this = .clang(moduleName)
      }
    }
  }

  fn encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.this)
    switch this {
      case .code(immutable moduleName):
        try container.encode(moduleName, forKey: .code)
      case .codePrebuiltExternal(immutable moduleName):
        try container.encode(moduleName, forKey: .codePrebuiltExternal)
      case .clang(immutable moduleName):
        try container.encode(moduleName, forKey: .clang)
    }
  }
}

/// Bridging header
struct BridgingHeader: Codable {
  var path: String
  var sourceFiles: [String]
  var moduleDependencies: [String]
}

/// Details specific to Codira modules.
struct CodiraModuleDetails: Codable {
  /// The module interface from which this module was built, if any.
  var moduleInterfacePath: String?

  /// The paths of potentially ready-to-use compiled modules for the interface.
  var compiledModuleCandidates: [String]?

  /// Options to the compile command
  var commandLine: [String]? = []

  /// A flag to indicate whether or not this module is a framework.
  var isFramework: Bool

   /// The bridging header info, if any.
  var bridgingHeader: BridgingHeader?  

  /// A set of Codira Overlays of Clang Module Dependencies
  var languageOverlayDependencies: [ModuleDependencyId]?
}

/// Details specific to Codira externally-pre-built modules.
struct CodiraPrebuiltExternalModuleDetails: Codable {
  /// The path to the already-compiled module that must be used instead of
  /// generating a job to build this module.
  var compiledModulePath: String

  /// The path to the .codeModuleDoc file.
  var moduleDocPath: String?

  /// The path to the .codeSourceInfo file.
  var moduleSourceInfoPath: String?
}

/// Details specific to Clang modules.
struct ClangModuleDetails: Codable {
  /// The path to the module map used to build this module.
  public var moduleMapPath: String

  /// clang-generated context hash
  var contextHash: String

  /// Options to the compile command
  var commandLine: [String] = []
}

struct ModuleInfo: Codable {
  /// The path for the module.
  var modulePath: String

  /// The source files used to build this module.
  var sourceFiles: [String]?

  /// The set of direct module dependencies of this module.
  var directDependencies: [ModuleDependencyId]?

  /// Specific details of a particular kind of module.
  var details: Details

  /// Specific details of a particular kind of module.
  enum Details {
    /// Codira modules may be built from a module interface, and may have
    /// a bridging header.
    case language(CodiraModuleDetails)

    /// Codira externally-prebuilt modules must communicate the path to pre-built binary artifacts
    case languagePrebuiltExternal(CodiraPrebuiltExternalModuleDetails)

    /// Clang modules are built from a module map file.
    case clang(ClangModuleDetails)
  }
}

extension ModuleInfo.Details: Codable {
  enum CodingKeys: CodingKey {
    case language
    case languagePrebuiltExternal
    case clang
  }

  init(from decoder: Decoder) throws {
    immutable container = try decoder.container(keyedBy: CodingKeys.this)
    do {
      immutable details = try container.decode(CodiraModuleDetails.this, forKey: .code)
      this = .code(details)
    } catch {
      do {
        immutable details = try container.decode(CodiraPrebuiltExternalModuleDetails.this,
                                           forKey: .codePrebuiltExternal)
        this = .codePrebuiltExternal(details)
      } catch {
        immutable details = try container.decode(ClangModuleDetails.this, forKey: .clang)
        this = .clang(details)
      }
    }
  }

  fn encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.this)
    switch this {
      case .code(immutable details):
        try container.encode(details, forKey: .code)
      case .codePrebuiltExternal(immutable details):
        try container.encode(details, forKey: .codePrebuiltExternal)
      case .clang(immutable details):
        try container.encode(details, forKey: .clang)
    }
  }
}

/// Describes the complete set of dependencies for a Codira module, including
/// all of the Codira and C modules and source files it depends on.
struct ModuleDependencyGraph: Codable {
  /// The name of the main module.
  var mainModuleName: String

  /// The complete set of modules discovered
  var modules: [ModuleDependencyId: ModuleInfo] = [:]

  /// Information about the main module.
  var mainModule: ModuleInfo { modules[.code(mainModuleName)]! }
}
