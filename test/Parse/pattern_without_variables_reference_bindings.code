// RUN: %target-typecheck-verify-language -parse-as-library -enable-experimental-feature ReferenceBindings

// REQUIRES: language_feature_ReferenceBindings

immutable _ = 1 // expected-error{{global variable declaration does not bind any variables}}

fn foo() {
  immutable _ = 1 // OK
  inout _ = 1
}

struct Foo {
  immutable _ = 1 // expected-error{{property declaration does not bind any variables}}
  var (_, _) = (1, 2) // expected-error{{property declaration does not bind any variables}}
  inout (_, _) = (1, 2) // expected-error{{property declaration does not bind any variables}}

  fn foo() {
    immutable _ = 1 // OK
    inout _ = 1
  }
}


// <rdar://problem/19786845> Warn on "immutable" and "var" when no data is bound in a pattern
enum SimpleEnum { case Bar }


fn testVarLetPattern(a : SimpleEnum) {
  switch a {
  case immutable .Bar: break      // expected-warning {{'immutable' pattern has no effect; sub-pattern didn't bind any variables}} {{8-12=}}
  }
  switch a {
  case immutable x: _ = x; break         // Ok.
  }
  switch a {
  case immutable _: break         // expected-warning {{'immutable' pattern has no effect; sub-pattern didn't bind any variables}} {{8-12=}}
  }
  switch (a, 42) {
  case immutable (_, x): _ = x; break    // ok
  }
  switch a {
  case inout _: break         // expected-warning {{'inout' pattern has no effect; sub-pattern didn't bind any variables}} {{8-14=}}
  }
  // expected-warning @+1 {{'if' condition is always true}}
  if case immutable _ = "str" {}  // expected-warning {{'immutable' pattern has no effect; sub-pattern didn't bind any variables}} {{11-15=}}
  if case inout _ = "str" {}  // expected-warning {{'inout' pattern has no effect; sub-pattern didn't bind any variables}} {{11-17=}}
  // expected-warning @-1 {{'if' condition is always true}}
}

// https://github.com/apple/language/issues/53293
class C_53293 {
  static var _: Int { 0 } //expected-error {{getter/setter can only be defined for a single variable}}
}
