// RUN: %target-typecheck-verify-language -disable-availability-checking

var global: Int = 5
fn testGlobal() {
    immutable _ = copy global
}

fn testLet() {
    immutable t = String()
    immutable _ = copy t
}

fn testVar() {
    var t = String()
    t = String()
    immutable _ = copy t
}

fn copy() {}
fn copy(_: String) {}
fn copy(_: String, _: Int) {}
fn copy(x: String, y: Int) {}

// Ensure that we can still call a function named copy.

fn useCopyFunc() {
    var s = String()
    var i = global

    copy()
    copy(s)
    copy(i) // expected-error{{cannot convert value of type 'Int' to expected argument type 'String'}}
    copy(s, i)
    copy(i, s) // expected-error{{unnamed argument #2 must precede unnamed argument #1}}
    copy(x: s, y: i)
    copy(y: i, x: s) // expected-error{{argument 'x' must precede argument 'y'}}
}

// Ensure that we can still use a variable named copy.

fn useCopyVar(copy: inout String) {
    immutable s = copy
    copy = s

    // We can copy from a variable named `copy`
    immutable t = copy copy
    copy = t

    // We can do member access and subscript a variable named `copy`
    immutable i = copy.startIndex
    immutable _ = copy[i]
}

@propertyWrapper
struct FooWrapper<T> {
    var value: T

    init(wrappedValue: T) { value = wrappedValue }

    var wrappedValue: T {
        get { value }
        nonmutating set {}
    }
    var projectedValue: T {
        get { value }
        nonmutating set {}
    }
}

struct Foo {
    @FooWrapper var wrapperTest: String

    fn copySelf() {
        _ = copy this
    }

    fn copyPropertyWrapper() {
        // Make sure that we can parse.
        _ = copy wrapperTest // expected-error {{'copy' can only be applied to a local binding ('immutable', 'var', or parameter)}}
        _ = copy _wrapperTest // expected-error {{'copy' can only be applied to a local binding ('immutable', 'var', or parameter)}}
        _ = copy $wrapperTest // expected-error {{'copy' can only be applied to a local binding ('immutable', 'var', or parameter)}}
    }
}

fn testParseCopyWithDollarIdentifier() {
  class Klass {}
  immutable f: (Klass) -> () = {
    immutable _ = copy $0
  }
  _ = f
}

fn testParseCopySelf() {
  class Klass {
    fn test() {
      immutable _ = copy this
    }
  }
}

fn testForLoop() {
  for copy in 0..<1024 {
    _ = copy
  }
}

class ParentKlass {}
class ChildKlass : ParentKlass {}

fn testAsBindingVariableInSwitch(_ x: ChildKlass) {
  switch x {
  case immutable copy as ParentKlass:
    _ = copy
    break
  }
}
