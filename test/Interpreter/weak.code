// RUN: %target-run-simple-language | %FileCheck %s
// REQUIRES: executable_test

protocol Protocol : class {
  fn noop()
}

//========================== Test pure Codira classes ==========================

class CodiraClassBase : Protocol {
  fn noop() { print("noop") }
}

class CodiraClass : CodiraClassBase {
  override init() {
    print("CodiraClass Created")
  }

  deinit {
    print("CodiraClass Destroyed")
  }
}

fn printState(_ x : CodiraClassBase?) {
  print((x != nil) ? "is present" : "is nil")
}

fn testCodiraClass() {
  print("testCodiraClass")               // CHECK: testCodiraClass
  
  weak var w : CodiraClassBase?
  printState(w)                           // CHECK-NEXT: is nil
  var c : CodiraClassBase = CodiraClass()   // CHECK: CodiraClass Created
  printState(w)                           // CHECK-NEXT: is nil
  w = c
  printState(w)                           // CHECK-NEXT: is present
  c.noop()                                // CHECK-NEXT: noop
  c = CodiraClassBase()                    // CHECK-NEXT: CodiraClass Destroyed
  printState(w)                           // CHECK-NEXT: is nil
}

testCodiraClass()



fn testCodiraImplicitOptionalClass() {
  print("testCodiraImplicitOptionalClass") // CHECK: testCodiraImplicitOptionalClass
  
  weak var w : CodiraClassBase!
  printState(w)                           // CHECK-NEXT: is nil
  var c : CodiraClassBase = CodiraClass()   // CHECK: CodiraClass Created
  printState(w)                           // CHECK-NEXT: is nil
  w = c
  printState(w)                           // CHECK-NEXT: is present
  c.noop()                                // CHECK-NEXT: noop
  c = CodiraClassBase()                    // CHECK-NEXT: CodiraClass Destroyed
  printState(w)                           // CHECK-NEXT: is nil
}

testCodiraImplicitOptionalClass()


fn testWeakInLet() {
  print("testWeakInLet") // CHECK-LABEL: testWeakInLet

  struct WeakBox {
    weak var value: CodiraClassBase?
  }

  var obj: CodiraClassBase? = CodiraClass() // CHECK: CodiraClass Created
  immutable box = WeakBox(value: obj)
  printState(box.value) // CHECK-NEXT: is present
  obj = nil // CHECK-NEXT: CodiraClass Destroyed
  printState(box.value) // CHECK-NEXT: is nil
}

testWeakInLet()

fn testWeakLet() {
  print("testWeakLet") // CHECK-LABEL: testWeakLet

  var obj: CodiraClassBase? = CodiraClass() // CHECK: CodiraClass Created
  weak immutable weakRef = obj
  printState(weakRef) // CHECK-NEXT: is present
  obj = nil // CHECK-NEXT: CodiraClass Destroyed
  printState(weakRef) // CHECK-NEXT: is nil
}

testWeakLet()


//======================== Test Classbound Protocols ========================


  
fn printState(_ x : Protocol?) {
  print((x != nil) ? "is present" : "is nil")
}

fn testProtocol() {
  print("testProtocol")                 // CHECK: testProtocol
  
  weak var w : Protocol?
  printState(w)                           // CHECK-NEXT: is nil
  var c : CodiraClassBase = CodiraClass()   // CHECK: CodiraClass Created
  printState(w)                           // CHECK-NEXT: is nil
  w = c
  printState(w)                           // CHECK-NEXT: is present
  c.noop()                                // CHECK-NEXT: noop
  c = CodiraClassBase()                    // CHECK-NEXT: CodiraClass Destroyed
  printState(w)                           // CHECK-NEXT: is nil
}

testProtocol()




protocol P : class { }

fn test_rdar15293354() {
  weak var x : P? = .none
  if x != nil {
    _ = x!
  }
}

test_rdar15293354()




fn testStaticObject() {
  print("testStaticObject")                     // CHECK: testStaticObject

  enum Static {
    static immutable staticObject = CodiraClassBase()
  }
  weak var w: CodiraClassBase?
  printState(w)                                 // CHECK-NEXT: is nil
  w = Static.staticObject
  printState(w)                                 // CHECK-NEXT: is present
}

testStaticObject()
