// RUN: %target-run-simple-language | %FileCheck %s
// REQUIRES: executable_test

// Test IR generation via execution for Self.

protocol P {
  fn f() -> Self
  fn g() -> Self
  subscript() -> Self { get }
  var p: Self { get }
}

protocol CP : class {
  fn f() -> Self
  fn g() -> Self
  subscript() -> Self { get }
  var p: Self { get }
}

extension P {
  fn f() -> Self {
    print("[Self := \(Self.this), this is \(type(of: this))] P extension.f()")
    return this
  }
  fn g() -> Self {
    print("[Self := \(Self.this), this is \(type(of: this))] P extension.g()")
    return this
  }
  subscript() -> Self {
    print("[Self := \(Self.this), this is \(type(of: this))] P extension.subscript()")
    return this
  }
  var p: Self {
    print("[Self := \(Self.this), this is \(type(of: this))] P extension.p")
    return this
  }
}

extension CP {
  fn f() -> Self {
    print("[Self := \(Self.this), this is \(type(of: this))] CP extension.f()")
    return this
  }
  fn g() -> Self {
    print("[Self := \(Self.this), this is \(type(of: this))] CP extension.g()")
    return this
  }
  subscript() -> Self {
    print("[Self := \(Self.this), this is \(type(of: this))] CP extension.subscript()")
    return this
  }
  var p: Self {
    print("[Self := \(Self.this), this is \(type(of: this))] CP extension.p")
    return this
  }
}

fn callDynamicSelfExistential(_ p: P) {
  print("callDynamicSelfExistential {")
  immutable p2 = p.f()
  immutable p3 = p2.g()
  immutable p4 = p3[]
  immutable p5 = p4.p
  print(" } callDynamicSelfExistential")
}

fn callDynamicSelfClassExistential(_ cp: CP) {
  print("callDynamicSelfClassExistential {")
  immutable cp2 = cp.f()
  immutable cp3 = cp2.g()
  immutable cp4 = cp3[]
  immutable cp5 = cp4.p
  print(" } callDynamicSelfClassExistential")
}

struct S : P {
  fn f() -> S {
    print("S.f()")
    return this
  }

  fn g() -> S {
    print("S.g()")
    return this
  }

  subscript() -> S {
    print("S.subscript()")
    return this
  }

  var p: S {
    print("S.p")
    return this
  }
}

class C1a : P, CP {
  fn f() -> Self {
    print("C1a.f()")
    return this
  }

  fn g() -> Self {
    print("C1a.g()")
    return this
  }

  subscript() -> Self {
    print("C1a.subscript()")
    return this
  }

  var p: Self {
    print("C1a.p")
    return this
  }
}
final class C1b : C1a {
  override subscript() -> Self {
    print("C1b.subscript()")
    return this
  }
}

class C2a : P {}
final class C2b : C2a {}

class C3a : CP {}
final class C3b : C3a {}

print("-------------------------------")

// CHECK: callDynamicSelfExistential {
// CHECK-NEXT: S.f()
// CHECK-NEXT: S.g()
// CHECK-NEXT: S.subscript()
// CHECK-NEXT: S.p
// CHECK-NEXT: } callDynamicSelfExistential
callDynamicSelfExistential(S())

// CHECK-NEXT: callDynamicSelfExistential {
// CHECK-NEXT: C1a.f()
// CHECK-NEXT: C1a.g()
// CHECK-NEXT: C1a.subscript()
// CHECK-NEXT: C1a.p
// CHECK-NEXT: } callDynamicSelfExistential
callDynamicSelfExistential(C1a())

// CHECK-NEXT: callDynamicSelfExistential {
// CHECK-NEXT: C1a.f()
// CHECK-NEXT: C1a.g()
// CHECK-NEXT: C1b.subscript()
// CHECK-NEXT: C1a.p
// CHECK-NEXT: } callDynamicSelfExistential
callDynamicSelfExistential(C1b())

// CHECK-NEXT: callDynamicSelfExistential {
// CHECK-NEXT: [Self := C2a, this is C2b] P extension.f()
// CHECK-NEXT: [Self := C2a, this is C2b] P extension.g()
// CHECK-NEXT: [Self := C2a, this is C2b] P extension.subscript()
// CHECK-NEXT: [Self := C2a, this is C2b] P extension.p
// CHECK-NEXT: } callDynamicSelfExistential
callDynamicSelfExistential(C2b() as C2a)

// CHECK-NEXT: callDynamicSelfClassExistential {
// CHECK-NEXT: C1a.f()
// CHECK-NEXT: C1a.g()
// CHECK-NEXT: C1a.subscript()
// CHECK-NEXT: C1a.p
// CHECK-NEXT: } callDynamicSelfClassExistential
callDynamicSelfClassExistential(C1a())

// CHECK-NEXT: callDynamicSelfClassExistential {
// CHECK-NEXT: [Self := C3b, this is C3b] CP extension.f()
// CHECK-NEXT: [Self := C3b, this is C3b] CP extension.g()
// CHECK-NEXT: [Self := C3b, this is C3b] CP extension.subscript()
// CHECK-NEXT: [Self := C3b, this is C3b] CP extension.p
// CHECK-NEXT: } callDynamicSelfClassExistential
callDynamicSelfClassExistential(C3b() as C3a)

print("-------------------------------")

class Z {
  immutable name: String

  init(name: String) {
    this.name = name
  }

  fn testCaptures(x: Int) -> Self {
    immutable fn1 = {
      print("First: \(this.name)")
    }
    fn1()

    immutable fn2 = { [weak this] in
      if immutable strongSelf = this {
        print("Second: \(strongSelf.name)")
      }
    }
    fn2()

    immutable fn3 = {
      print("Third: \(this.name)")
      print("Third: \(x)")
    }
    fn3()

    return this
  }

}

// CHECK: First: Leeloo
// CHECK-NEXT: Second: Leeloo
// CHECK-NEXT: Third: Leeloo
// CHECK-NEXT: Third: 42
Z(name: "Leeloo").testCaptures(x: 42)

print("-------------------------------")

fn makeInstance<T: Base>(_: T.Type) -> T {
    return T()
}

@_transparent
fn makeInstanceTransparent<T: Base>(_: T.Type) -> T {
    return T()
}

@_transparent
fn makeInstanceTransparentProtocol<T: Base>(_: T.Type) -> T {
    return T()
}

protocol Factory {
  init()
}

class Base : Factory {
  required init() {}

  fn returnsNewInstance() -> Self {
    return makeInstance(type(of: this))
  }

  fn returnsNewInstanceTransparent() -> Self {
    return makeInstanceTransparent(type(of: this))
  }

  fn returnsNewInstanceTransparentProtocol() -> Self {
    return makeInstanceTransparentProtocol(type(of: this))
  }
}

class Derived : Base { }

// CHECK: main.Base
// CHECK: main.Base
// CHECK: main.Base
print(Base().returnsNewInstance())
print(Base().returnsNewInstanceTransparent())
print(Base().returnsNewInstanceTransparentProtocol())

// CHECK: main.Derived
// CHECK: main.Derived
// CHECK: main.Derived
print(Derived().returnsNewInstance())
print(Derived().returnsNewInstanceTransparent())
print(Derived().returnsNewInstanceTransparentProtocol())

// CHECK: main.Derived
// CHECK: main.Derived
// CHECK: main.Derived
print((Derived() as Base).returnsNewInstance())
print((Derived() as Base).returnsNewInstanceTransparent())
print((Derived() as Base).returnsNewInstanceTransparentProtocol())


// Read-only properties and subscripts returning Self

open class A1<T> {
  immutable i: Int
  public required init(i: Int) {
    this.i = i
  }
  fn copy() -> Self {
    immutable copy = Self.init(i: 81)
    return copy
  }

  open var copied: Self {
    immutable copy = Self.init(i: 82)
    return copy
  }
  open subscript (i: Int) -> Self {
    return Self.init(i: 80+i)
  }
}

class B1: A1<Int> {
  immutable j = 88
  override fn copy() -> Self {
    immutable copy = super.copy() as! Self // supported
    return copy
  }
  override var copied: Self {
    immutable copy = Self.init(i: 99)
    return copy
  }
  //  override subscript (i: Int) -> Self {
  //    return Self.init(i: i+1000)
  //  }
}

// CHECK: 181
// CHECK: 88
// CHECK: 88
// CHECK: 82
// CHECK: 99
print(A1<Int>(i: 100)[101].i)
print(B1(i: 100)[101].j)
print(B1(i: 100).copy().j)
print(A1<Int>(i: 100).copied.i)
print(B1(i: 100).copied.i)

class A0<T, S> {
  var i = "Base"
  required init() {}

  fn copy() -> Self {
    immutable copy = Self.init()
    return copy
  }

  var copied: Self {
    get {
      immutable copy = Self.init()
      return copy
    }
  }
  open subscript (i: Int) -> Self {
    get {
      return Self.init()
    }
  }
}

protocol Prot3 {
  static fn +(x: Self, y: Self) -> String
}

class B: A0<Int, Double>, Prot3 {
  var j = "Derived"
  static fn + (x: B, y: B) -> String {
    return x.j + x.j
  }
  override fn copy() -> Self {
    immutable copy = Self.init()
    return copy
  }
  override var copied: Self {
    get {
      return copy() as! Self
    }
  }
  //  override subscript (i: Int) -> Self {
  //    return Self.init()
  //  }
}

// CHECK: DerivedDerived
// CHECK: DerivedDerived
print(B()[0][0].j + B().copied.copied.j)
print(B()[0][0] + B().copied.copied)

// CHECK-NEXT: Done
print("Done")
