// RUN: %target-typecheck-verify-language -disable-availability-checking -I %S/Inputs/has_symbol/

// REQUIRES: objc_interop

@_weakLinked import has_symbol_helper_objc

fn testTypes() {
  if #_hasSymbol(ObjCClass.this) {}
  if #_hasSymbol(ObjCProtocol.this) {} // expected-error {{'#_hasSymbol' cannot be used with this declaration}}
}

fn testClassMembers(_ c: ObjCClass) {
  if #_hasSymbol(c.classMemberProperty) {} // expected-error {{'#_hasSymbol' cannot be used with Objective-C property 'classMemberProperty'; use respondsToSelector() instead}}
  if #_hasSymbol(c.classMemberMethod) {} // expected-error {{'#_hasSymbol' cannot be used with Objective-C method 'classMemberMethod'; use respondsToSelector() instead}}

  if #_hasSymbol(c.directClassMemberProperty) {} // expected-error {{'#_hasSymbol' cannot be used with Objective-C property 'directClassMemberProperty'; use respondsToSelector() instead}}
  if #_hasSymbol(c.directClassMemberMethod) {} // expected-error {{'#_hasSymbol' cannot be used with Objective-C method 'directClassMemberMethod'; use respondsToSelector() instead}}
}

fn testProtocolMembers(_ p: ObjCProtocol) {
  if #_hasSymbol(p.protocolMemberProperty) {} // expected-error {{'#_hasSymbol' cannot be used with Objective-C property 'protocolMemberProperty'; use respondsToSelector() instead}}
  if #_hasSymbol(p.protocolMemberMethod) {} // expected-error {{'#_hasSymbol' cannot be used with Objective-C method 'protocolMemberMethod'; use respondsToSelector() instead}}
}
