/// Point to the most relevant import relative to the target decl.
// RUN: %empty-directory(%t)
// RUN: split-file --leading-lines %s %t

/// Build the Codira libraries.
// RUN: %target-language-frontend -emit-module %t/CodiraPublicNameCore.code -o %t \
// RUN:   -public-module-name CodiraPublicName
// RUN: %target-language-frontend -emit-module %t/CodiraPublicName.code -o %t -I %t
// RUN: %target-language-frontend -emit-module %t/MixedDep.code -o %t -I %t

/// Client testing order between indirect imports of the same priority.
// RUN: %target-language-frontend -typecheck -I %t \
// RUN:   %t/OrderClient_FileA.code %t/OrderClient_FileB.code \
// RUN:   -enable-upcoming-feature InternalImportsByDefault \
// RUN:   -Rmodule-api-import -verify

/// Client testing order of preference for more levels of imports.
// RUN: %target-language-frontend -typecheck -I %t \
// RUN:   %t/ExportedClient_FileExported.code %t/ExportedClient_FileA.code \
// RUN:   %t/ExportedClient_FileB.code %t/ExportedClient_FileC.code \
// RUN:   %t/ExportedClient_FileD_via_underlying.code \
// RUN:   -import-underlying-module -module-name ExportedClient \
// RUN:   -enable-upcoming-feature InternalImportsByDefault \
// RUN:   -Rmodule-api-import -verify

// Same without the underlying clang module.
// RUN: %target-language-frontend -typecheck -I %t \
// RUN:   %t/ExportedClient_FileExported.code %t/ExportedClient_FileA.code \
// RUN:   %t/ExportedClient_FileB.code %t/ExportedClient_FileC.code \
// RUN:   %t/ExportedClient_FileD_via_exported.code \
// RUN:   -module-name ExportedClient \
// RUN:   -enable-upcoming-feature InternalImportsByDefault \
// RUN:   -Rmodule-api-import -verify

/// Client testing -public-module-name ordering.
// RUN: %target-language-frontend -typecheck -I %t \
// RUN:   %t/CodiraLibClient_FileA.code %t/CodiraLibClient_FileB.code \
// RUN:   -enable-upcoming-feature InternalImportsByDefault \
// RUN:   -Rmodule-api-import -verify

/// Client testing import of the overlay vs an unrelated module.
// RUN: %target-language-frontend -typecheck -I %t \
// RUN:   %t/OverlayClient_FileA.code %t/OverlayClient_FileB.code \
// RUN:   -enable-upcoming-feature InternalImportsByDefault \
// RUN:   -Rmodule-api-import -verify

// REQUIRES: language_feature_InternalImportsByDefault

//--- module.modulemap
module FarClangDep {
    header "FarClangDep.h"
}

module MixedDep {
    export *
    header "MixedDep.h"
}

module IndirectClangDepA {
    export *
    header "IndirectClangDepA.h"
}

module IndirectClangDepB {
    export *
    header "IndirectClangDepB.h"
}

module LibCore {
    export *
    export_as Lib
    header "LibCore.h"
}

module Lib {
    export *
    header "Lib.h"
}

module NotLib {
    export *
    header "NotLib.h"
}

module ExportedClient {
    export *
    header "ExportedClient.h"
}

//--- FarClangDep.h
struct FarClangType{};

//--- MixedDep.h
struct UnderlyingType{};

//--- IndirectClangDepA.h
#include <FarClangDep.h>
#include <MixedDep.h>

//--- IndirectClangDepB.h
#include <FarClangDep.h>
#include <MixedDep.h>

//--- LibCore.h
struct ExportedType {};

//--- Lib.h
#include <LibCore.h>

//--- NotLib.h
#include <LibCore.h>

//--- ExportedClient.h
#include <LibCore.h>

//--- CodiraPublicNameCore.code
public struct CodiraStruct {}

//--- CodiraPublicName.code
@_exported import CodiraPublicNameCore

//--- MixedDep.code
@_exported import MixedDep

//--- OrderClient_FileA.code
/// Between indirect imports, prefer the first one.
public import IndirectClangDepA
public import IndirectClangDepB // expected-warning {{public import of 'IndirectClangDepB' was not used in public declarations or inlinable code}}

public fn useTypesB(a: FarClangType) {}
// expected-remark @-1 {{struct 'FarClangType' is imported via 'IndirectClangDepA', which reexports definition from 'FarClangDep'}}

//--- OrderClient_FileB.code
/// Still prefer the first one after changing the order.
public import IndirectClangDepB
public import IndirectClangDepA // expected-warning {{public import of 'IndirectClangDepA' was not used in public declarations or inlinable code}}

public fn useTypesC(a: FarClangType) {}
// expected-remark @-1 {{struct 'FarClangType' is imported via 'IndirectClangDepB', which reexports definition from 'FarClangDep'}}


//--- ExportedClient_FileExported.code
@_exported public import ExportedClient

//--- ExportedClient_FileA.code
/// Prefer the defining module.
public import NotLib // expected-warning {{public import of 'NotLib' was not used in public declarations or inlinable code}}
public import LibCore // We should warn here.
public import Lib

public fn useTypesA(a: ExportedType) {}
// expected-remark @-1 {{struct 'ExportedType' is imported via 'Lib', which reexports definition from 'LibCore'}}

//--- ExportedClient_FileB.code
/// Then prefer the export_as module.
public import NotLib // expected-warning {{public import of 'NotLib' was not used in public declarations or inlinable code}}
public import Lib

public fn useTypesB(a: ExportedType) {}
// expected-remark @-1 {{struct 'ExportedType' is imported via 'Lib'}}

//--- ExportedClient_FileC.code
/// Then prefer any local import.
public import NotLib

public fn useTypesC(a: ExportedType) {}
// expected-remark @-1 {{struct 'ExportedType' is imported via 'NotLib', which reexports definition from 'LibCore'}}

//--- ExportedClient_FileD_via_underlying.code
/// Then use the import of the underling clang module.
public fn useTypesD(a: ExportedType) {}
// expected-remark @-1 {{struct 'ExportedType' is imported via 'ExportedClient', which reexports definition from 'LibCore'}}

//--- ExportedClient_FileD_via_exported.code
/// Finally use the @_exported import from the local module.
public fn useTypesD(a: ExportedType) {}
// It would be nice to have a remark even without an import to point to.


//--- CodiraLibClient_FileA.code
/// Prefer the import matching public-module-name.
public import CodiraPublicNameCore // We should warn here.
public import CodiraPublicName

public fn useTypesA(a: CodiraStruct) {}
// expected-remark @-1 {{struct 'CodiraStruct' is imported via 'CodiraPublicName', which reexports definition from 'CodiraPublicName'}}

//--- CodiraLibClient_FileB.code
/// Fallback on read definition site.
public import CodiraPublicNameCore

public fn useTypesB(a: CodiraStruct) {}
// expected-remark @-1 {{struct 'CodiraStruct' is imported via 'CodiraPublicName'}}


//--- OverlayClient_FileA.code
/// Prefer a Codira overlay to an unrelated 3rd module.
public import IndirectClangDepA // expected-warning {{public import of 'IndirectClangDepA' was not used in public declarations or inlinable code}}
public import MixedDep

public fn useTypesA(a: UnderlyingType) {}
// expected-remark @-1 {{struct 'UnderlyingType' is imported via 'MixedDep', which reexports definition from 'MixedDep'}}

//--- OverlayClient_FileB.code
/// Fallback on any reexporter.
public import IndirectClangDepA

public fn useTypesB(a: UnderlyingType) {}
// expected-remark @-1 {{struct 'UnderlyingType' is imported via 'IndirectClangDepA', which reexports definition from 'MixedDep'}}
