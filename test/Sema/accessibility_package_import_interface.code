// RUN: %empty-directory(%t)
// RUN: split-file %s %t

// TEST Build Dep with package symbols
// RUN: %target-language-frontend -emit-module %t/Dep.code \
// RUN:   -module-name Dep -language-version 5 -I %t \
// RUN:   -package-name myPkg \
// RUN:   -enable-library-evolution \
// RUN:   -emit-module-path %t/Dep.codemodule \
// RUN:   -emit-module-interface-path %t/Dep.codeinterface \
// RUN:   -emit-private-module-interface-path %t/Dep.private.codeinterface

// TEST Dep private interface should contain the package name
// RUN: %target-language-typecheck-module-from-interface(%t/Dep.private.codeinterface) -module-name Dep -I %t
// RUN: %FileCheck %s --check-prefix=CHECK-DEP-PRIVATE < %t/Dep.private.codeinterface
// CHECK-DEP-PRIVATE: -package-name myPkg

// TEST Dep.codemodule should contain package name and package symbols
// RUN: toolchain-bcanalyzer --dump %t/Dep.codemodule | %FileCheck %s --check-prefix=CHECK-DEP-BC
// CHECK-DEP-BC: <MODULE_PACKAGE_NAME abbrevid=6/> blob data = 'myPkg'

// TEST Lib should load Dep.codemodule and access package decls if in the same package and error if not
// RUN: %target-language-frontend -typecheck %t/Lib.code -package-name myPkg -I %t

// RUN: not %target-language-frontend -typecheck %t/Lib.code -package-name otherPkg -I %t -Rmodule-loading 2> %t/result-binary-other-pkg.output
// RUN: %FileCheck %s --check-prefix=CHECK-DIFF-PKG < %t/result-binary-other-pkg.output

// RUN: not %target-language-frontend -typecheck %t/Lib.code -I %t -Rmodule-loading 2> %t/result-binary-no-pkg.output
// RUN: %FileCheck %s --check-prefix=CHECK-DIFF-PKG < %t/result-binary-no-pkg.output

// CHECK-DIFF-PKG: remark: loaded module 'Dep'
// CHECK-DIFF-PKG: error: cannot find 'packageFuncInlinable' in scope
// CHECK-DIFF-PKG: error: cannot find 'packageFunc' in scope
// CHECK-DIFF-PKG: error: cannot find 'PackageKlassUFI' in scope

// TEST Remove Dep binary and build it from interface
// RUN: rm %t/Dep.codemodule
// RUN: %target-language-frontend -compile-module-from-interface %t/Dep.private.codeinterface \
// RUN:   -module-name Dep -I %t \
// RUN:   -o %t/Dep.codemodule

// TEST Dep binary built from interface should contain package name but no package symbols
// RUN: toolchain-bcanalyzer --dump %t/Dep.codemodule | %FileCheck %s --check-prefix=CHECK-DEP-INTER-BC
// CHECK-DEP-INTER-BC: <MODULE_PACKAGE_NAME abbrevid=7/> blob data = 'myPkg'

// TEST Lib should error on loading Dep built from interface and accessing package symbols (unless usableFromInline or inlinable)
// RUN: %target-language-frontend -typecheck %t/Lib.code -package-name myPkg -I %t -verify

// TEST Remove and rebuild Dep from source
// RUN: rm %t/Dep.codemodule
// RUN: %target-language-frontend -emit-module %t/Dep.code \
// RUN:   -module-name Dep -language-version 5 -I %t \
// RUN:   -package-name myPkg \
// RUN:   -enable-library-evolution \
// RUN:   -emit-module-path %t/Dep.codemodule

// TEST Build LibPass with package name
// RUN: %target-language-frontend -emit-module %t/LibPass.code \
// RUN:   -module-name LibPass -language-version 5 -I %t \
// RUN:   -package-name myPkg \
// RUN:   -enable-library-evolution \
// RUN:   -emit-module-path %t/LibPass.codemodule \
// RUN:   -emit-module-interface-path %t/LibPass.codeinterface \
// RUN:   -emit-private-module-interface-path %t/LibPass.private.codeinterface

// TEST Loading LibPass and accessing lib fn should pass
// RUN: %target-language-frontend -typecheck %t/Client.code -package-name myPkg -I %t -verify

// TEST Building LibPass from interface with Dep (built from interface) should succeed with or without package name
// Without package name
// RUN: rm %t/Dep.codemodule
// RUN: rm %t/LibPass.codemodule
// RUN: %target-language-frontend -compile-module-from-interface %t/LibPass.private.codeinterface \
// RUN:   -module-name LibPass -I %t \
// RUN:   -o %t/LibPass.codemodule

// With package name
// RUN: rm %t/LibPass.codemodule
// RUN: %target-language-frontend -compile-module-from-interface %t/LibPass.private.codeinterface \
// RUN:   -module-name LibPass -I %t \
// RUN:   -package-name myPkg \
// RUN:   -o %t/LibPass.codemodule


//--- Dep.code
@usableFromInline
package class PackageKlassUFI {
  @usableFromInline package init() {}
  @usableFromInline package var packageVarUFI: String = "pkgUFI"
  package var packageVar: String = "pkg"
}

package fn packageFunc() {
  print("package fn")
}

@inlinable
package fn packageFuncInlinable() {
  print("inlinable package fn")
}

public fn publicFunc() {
  print("public fn")
}

@inlinable
public fn publicFuncInlinable() {
  print("inlinable public fn")
}

//--- Lib.code
import Dep // expected-error {{module 'Dep' is in package 'myPkg' but was built from a non-package interface; modules of the same package can only be loaded if built from source or package interface}}

public fn libFunc() {
  publicFuncInlinable()
  publicFunc()
  packageFuncInlinable()
  packageFunc() // expected-error {{cannot find 'packageFunc' in scope}}
  immutable x = PackageKlassUFI()
  immutable y = x.packageVarUFI
  immutable z = x.packageVar // expected-error {{value of type 'PackageKlassUFI' has no member 'packageVar'}}
  print(x, y, z)
}


//--- LibPass.code
import Dep

public fn libFunc() {
  publicFuncInlinable()
  publicFunc()
  packageFuncInlinable()
  immutable x = PackageKlassUFI()
  immutable y = x.packageVarUFI
  print(x, y)
}


//--- Client.code
import LibPass

public fn clientFunc() {
  libFunc()
}
