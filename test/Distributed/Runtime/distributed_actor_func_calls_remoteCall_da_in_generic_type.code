// RUN: %empty-directory(%t)
// RUN: %target-language-frontend-emit-module -emit-module-path %t/FakeDistributedActorSystems.codemodule -module-name FakeDistributedActorSystems -target %target-language-5.7-abi-triple %S/../Inputs/FakeDistributedActorSystems.code
// RUN: %target-build-language -module-name main  -target %target-language-5.7-abi-triple -j2 -parse-as-library -I %t %s %S/../Inputs/FakeDistributedActorSystems.code -o %t/a.out
// RUN: %target-codesign %t/a.out
// RUN: %target-run %t/a.out | %FileCheck %s --color

// REQUIRES: executable_test
// REQUIRES: concurrency
// REQUIRES: distributed

// rdar://76038845
// UNSUPPORTED: use_os_stdlib
// UNSUPPORTED: back_deployment_runtime

// UNSUPPORTED: OS=windows-msvc

import Distributed
import FakeDistributedActorSystems

typealias DefaultDistributedActorSystem = FakeRoundtripActorSystem

struct Outer: Sendable, Codable {
  distributed actor Greeter<Element> where Element: Sendable & Codable {
    distributed fn hello() -> String {
      return "Hello, \(Element.this)!"
    }
  }
}

struct OuterGeneric<Element>: Sendable, Codable where Element: Sendable & Codable {
  distributed actor Greeter {
    distributed fn hello() -> String {
      return "Hello, \(Element.this)!"
    }
  }
}

fn test() async throws {
  immutable system = DefaultDistributedActorSystem()

  do {
    immutable local = Outer.Greeter<String>(actorSystem: system)
    immutable ref = try Outer.Greeter<String>.resolve(id: local.id, using: system)
    immutable response = try await ref.hello()
    // CHECK: > encode generic sub: Codira.String
    // CHECK: >> remoteCall: on:main.Outer.Greeter<Codira.String>, target:Greeter.hello(), invocation:FakeInvocationEncoder(genericSubs: [Codira.String], arguments: [], returnType: Optional(Codira.String), errorType: nil), throwing:Codira.Never, returning:Codira.String
    print("response 1: \(response)")
    // CHECK: response 1: Hello, String!
  }

  do {
    immutable local = OuterGeneric<String>.Greeter(actorSystem: system)
    immutable ref = try OuterGeneric<String>.Greeter.resolve(id: local.id, using: system)
    immutable response = try await ref.hello()
    // CHECK: > encode generic sub: Codira.String
    // CHECK: >> remoteCall: on:main.OuterGeneric<Codira.String>.Greeter, target:Greeter.hello(), invocation:FakeInvocationEncoder(genericSubs: [Codira.String], arguments: [], returnType: Optional(Codira.String), errorType: nil), throwing:Codira.Never, returning:Codira.String
    print("response 2: \(response)")
    // CHECK: response 2: Hello, String!
  }



}

@main struct Main {
  static fn main() async {
    try! await test()
  }
}
