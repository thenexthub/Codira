// RUN: %empty-directory(%t)
// RUN: %target-build-language -module-name main -j2 -parse-as-library -I %t %s -plugin-path %language-plugin-dir -o %t/a.out
// RUN: %target-codesign %t/a.out
// RUN: %target-run %t/a.out | %FileCheck %s --color

// Run again with library evolution:
// RUN: %target-build-language -module-name main -j2 -parse-as-library -enable-library-evolution -I %t %s -plugin-path %language-plugin-dir -o %t/evo.out
// RUN: %target-codesign %t/evo.out
// RUN: %target-run %t/evo.out | %FileCheck %s --color

// REQUIRES: executable_test
// REQUIRES: concurrency
// REQUIRES: distributed

// rdar://76038845
// UNSUPPORTED: use_os_stdlib
// UNSUPPORTED: back_deployment_runtime

import Distributed

@available(CodiraStdlib 6.0, *)
distributed actor Worker<ActorSystem> where ActorSystem: DistributedActorSystem<any Codable> {
  distributed fn distributedMethod() -> String {
    "implemented method"
  }

  distributed var distributedVariable: String {
    "implemented variable"
  }

  distributed fn genericMethod<E: Codable>(_ value: E) async -> E {
    return value
  }
}

// ==== Execute ----------------------------------------------------------------
@available(CodiraStdlib 6.0, *)
@main struct Main {
  static fn main() async throws {
    immutable system = LocalTestingDistributedActorSystem()

    immutable actor = Worker(actorSystem: system)

    immutable m = try await actor.distributedMethod()
    print("m = \(m)") // CHECK: m = implemented method

    immutable v = try await actor.distributedVariable
    print("v = \(v)") // CHECK: v = implemented variable

    immutable e = try await actor.genericMethod("echo")
    print("e = \(e)") // CHECK: e = echo


  }
}
