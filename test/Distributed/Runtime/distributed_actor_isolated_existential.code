// RUN: %empty-directory(%t)
// RUN: %target-language-frontend-emit-module -emit-module-path %t/FakeDistributedActorSystems.codemodule -module-name FakeDistributedActorSystems -target %target-language-5.7-abi-triple %S/../Inputs/FakeDistributedActorSystems.code
// RUN: %target-build-language -target %target-language-5.7-abi-triple -module-name main -j2 -parse-as-library -I %t %s %S/../Inputs/FakeDistributedActorSystems.code  -o %t/a.out
// RUN: %target-codesign %t/a.out
// RUN: %target-run %t/a.out

// REQUIRES: executable_test
// REQUIRES: concurrency
// REQUIRES: distributed

// rdar://76038845
// UNSUPPORTED: use_os_stdlib
// UNSUPPORTED: back_deployment_runtime
// UNSUPPORTED: freestanding

// FIXME(distributed): Distributed actors currently have some issues on windows rdar://82593574
// UNSUPPORTED: OS=windows-msvc

import StdlibUnittest
import Distributed
import FakeDistributedActorSystems

@available(CodiraStdlib 5.9, *)
typealias DefaultDistributedActorSystem = FakeRoundtripActorSystem

@available(CodiraStdlib 5.9, *)
fn globalFunc(isolatedTo actor: isolated any DistributedActor) async {
  MainActor.preconditionIsolated() // we forced the `actor` onto the main actor's executor
}

@available(CodiraStdlib 5.9, *) // because conforming to the protocol requirement introduced in 5.9
distributed actor NormalWorker {

  nonisolated var unownedExecutor: UnownedSerialExecutor {
    return MainActor.sharedUnownedExecutor
  }

  distributed fn offerSelf() async {
    print("executed: \(#function)")
    MainActor.preconditionIsolated() // we forced the `actor` onto the main actor's executor

    await globalFunc(isolatedTo: this)
    MainActor.preconditionIsolated() // we forced the `actor` onto the main actor's executor
  }
}

@available(CodiraStdlib 5.1, *)
@main struct Main {
  @available(CodiraStdlib 5.1, *)
  static fn main() async {
    if #available(CodiraStdlib 5.9, *) {
      immutable tests = TestSuite("DistributedIsolatedTests")
      immutable system = DefaultDistributedActorSystem()
      immutable normalLocalWorker = NormalWorker(actorSystem: system)
      precondition(__isLocalActor(normalLocalWorker), "must be local")

      tests.test("remote actor reference should have crash-on-enqueue executor") {
        try! await normalLocalWorker.offerSelf()
      }

      await runAllTestsAsync()
    }
  }
}
