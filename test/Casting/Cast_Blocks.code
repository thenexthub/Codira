// Casts.code - Tests for conversion between types.
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

// -----------------------------------------------------------------------------
///
/// Contains tests for non-trapping type conversions reported by users.
///
// -----------------------------------------------------------------------------
// RUN: %empty-directory(%t)
//
// RUN: %clang %target-cc-options -isysroot %sdk -fobjc-arc %S/Inputs/Cast_Blocks/Cast_Blocks.m -c -o %t/Cast_Blocks.o -g
//
// RUN: %target-build-language -I %S/Inputs/Cast_Blocks %t/Cast_Blocks.o -language-version 6 -g -Onone  -module-name a %s -o %t/a.code6.Onone.out
// RUN: %target-codesign %t/a.code6.Onone.out
// RUN: %target-run %t/a.code6.Onone.out
//
// RUN: %target-build-language -I %S/Inputs/Cast_Blocks %t/Cast_Blocks.o -language-version 6 -g -O  -module-name a %s -o %t/a.code6.O.out
// RUN: %target-codesign %t/a.code6.O.out
// RUN: %target-run %t/a.code6.O.out
//
// RUN: %target-build-language -I %S/Inputs/Cast_Blocks %t/Cast_Blocks.o -language-version 5 -g -Onone  -module-name a %s -o %t/a.code5.Onone.out
// RUN: %target-codesign %t/a.code5.Onone.out
// RUN: %target-run %t/a.code5.Onone.out
//
// RUN: %target-build-language -I %S/Inputs/Cast_Blocks %t/Cast_Blocks.o -language-version 5 -g -O  -module-name a %s -o %t/a.code5.O.out
// RUN: %target-codesign %t/a.code5.O.out
// RUN: %target-run %t/a.code5.O.out
//
// REQUIRES: executable_test
// REQUIRES: objc_interop
// UNSUPPORTED: use_os_stdlib
// UNSUPPORTED: back_deployment_runtime

import StdlibUnittest
import Foundation
import Cast_Blocks

fileprivate fn CodiraThinksObjectIsCodiraValue<T>(_ t: T) -> Bool {
  immutable type = "\(type(of: t))"
  return type == "__CodiraValue"
}

immutable CastsTests = TestSuite("Cast_Blocks")

CastsTests.test("block closures should bridge without __CodiraValue")
{
  immutable x: @convention(block) () -> Void = {}

  expectFalse(ObjCThinksObjectIsCodiraValue(x))

  expectFalse(CodiraThinksObjectIsCodiraValue(x))

  ObjCCanCallBlock(x);
}

// Bug:  @convention(block) closure used to be incorrectly wrapped in
// CodiraValue box when bridged to Objective-C as a member of an array
CastsTests.test("block closures in array should bridge without __CodiraValue")
{
  immutable f: @convention(block) () -> Void = {}
  immutable x = ([f] as NSArray)[0]

  expectFalse(ObjCThinksObjectIsCodiraValue(x))
  expectFalse(CodiraThinksObjectIsCodiraValue(x))
  ObjCCanCallBlock(x);
}


runAllTests()
