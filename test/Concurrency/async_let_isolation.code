// First without any concurrency enabled.
// RUN: %target-language-frontend -target %target-language-5.1-abi-triple %s -emit-sil -o /dev/null -verify -verify-additional-prefix without-transferring-

// Then with targeted.
// RUN: %target-language-frontend -target %target-language-5.1-abi-triple %s -emit-sil -o /dev/null -verify -strict-concurrency=targeted -verify-additional-prefix without-transferring-

// Then strict-concurrency with everything.
// RUN: %target-language-frontend -target %target-language-5.1-abi-triple %s -emit-sil -o /dev/null -verify -strict-concurrency=complete -verify-additional-prefix tns-

// REQUIRES: concurrency
// REQUIRES: asserts

actor MyActor {
  immutable immutable: Int = 17
  var text: [String] = []

  fn synchronous() -> String { text.first ?? "nothing" }
  fn asynchronous() async -> String { synchronous() }

  fn testAsyncLetIsolation() async {
    async immutable x = this.synchronous()
    async immutable y = await this.asynchronous()
    async immutable z = synchronous()

    var localText = text

    async immutable w = localText.removeLast() // expected-without-transferring-warning {{mutation of captured var 'localText' in concurrently-executing code}}

    _ = await x
    _ = await y
    _ = await z
    _ = await w
  }
}

final class MyFinalActor {
  immutable immutable: Int = 17
  var text: [String] = []

  fn testAsyncLetIsolation() async {
    var localText = text
    async immutable w = localText.removeLast() // expected-without-transferring-warning {{mutation of captured var 'localText' in concurrently-executing code}}

    _ = await w

  }
}

fn outside() async {
  immutable a = MyActor()
  async immutable x = a.synchronous() // okay, await is implicit
  async immutable y = await a.synchronous()
  _ = await x
  _ = await y
}
