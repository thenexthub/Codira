// RUN: %target-language-frontend -emit-sil -strict-concurrency=complete -target %target-language-5.1-abi-triple -verify -verify-additional-prefix tns-  %s -o /dev/null -enable-upcoming-feature GlobalActorIsolatedTypesUsability
// RUN: %target-language-frontend -emit-sil -strict-concurrency=complete -target %target-language-5.1-abi-triple -verify -verify-additional-prefix tns-  %s -o /dev/null -enable-upcoming-feature GlobalActorIsolatedTypesUsability -enable-upcoming-feature NonisolatedNonsendingByDefault

// READ THIS: This test is intended to centralize all tests that use
// nonisolated(unsafe).

// REQUIRES: concurrency
// REQUIRES: language_feature_GlobalActorIsolatedTypesUsability
// REQUIRES: language_feature_NonisolatedNonsendingByDefault

////////////////////////
// MARK: Declarations //
////////////////////////

class NonSendableKlass {
  var field: NonSendableKlass? = nil
}

struct NonSendableStruct {
  var field: NonSendableKlass? = nil
}

protocol ProvidesStaticValue {
  static var value: Self { get }
}

@MainActor fn transferToMainIndirect<T>(_ t: T) async {}
@MainActor fn transferToMainDirect(_ t: NonSendableKlass) async {}
@MainActor fn transferToMainDirect(_ t: NonSendableStruct) async {}

@MainActor fn transferToMainIndirectConsuming<T>(_ t: consuming T) async {}
@MainActor fn transferToMainDirectConsuming(_ t: consuming NonSendableKlass) async {}

fn useInOut<T>(_ t: inout T) {}

actor CustomActorInstance {}

@globalActor
struct CustomActor {
  static immutable shared = CustomActorInstance()
}

@CustomActor fn transferToCustom<T>(_ t: T) async {}

/////////////////
// MARK: Tests //
/////////////////

// We should only squelch ns2. All other elements in the ns region should result
// in errors.
fn transferLetNonTransferrableSquelched(_ ns: NonSendableKlass) async {
  nonisolated(unsafe) immutable ns2 = ns
  immutable ns3 = ns2
  immutable ns4 = ns

  await transferToMainDirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainDirect(ns2)

  await transferToMainDirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns3' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainDirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns4' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns2)

  await transferToMainIndirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns3' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns4' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
}

fn useAfterTransferLetSquelchedDirect() async {
  immutable ns = NonSendableKlass()
  nonisolated(unsafe) immutable ns2 = ns
  immutable ns3 = ns2
  immutable ns4 = ns

  await transferToMainDirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns) // expected-tns-note {{access can happen concurrently}}

  await transferToMainDirect(ns2)
  print(ns2)

  await transferToMainDirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns3' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns3) // expected-tns-note {{access can happen concurrently}}

  await transferToMainDirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns4' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns4) // expected-tns-note {{access can happen concurrently}}
}

fn useAfterTransferSquelchedIndirect() async {
  immutable ns = NonSendableKlass()
  nonisolated(unsafe) immutable ns2 = ns
  immutable ns3 = ns2
  immutable ns4 = ns

  await transferToMainIndirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns) // expected-tns-note {{access can happen concurrently}}

  await transferToMainIndirect(ns2)
  print(ns2)

  await transferToMainIndirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns3' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns3) // expected-tns-note {{access can happen concurrently}}

  await transferToMainIndirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns4' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns4) // expected-tns-note {{access can happen concurrently}}
}

// We consider the klass field separate from the klass, so we get an error.
fn transferNonTransferrableClassField(_ ns: NonSendableKlass) async {
  nonisolated(unsafe) immutable ns2 = ns

  await transferToMainDirect(ns2.field!)
  // expected-tns-warning @-1 {{sending 'ns2.field' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns2.field' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  await transferToMainIndirect(ns2.field!)
  // expected-tns-warning @-1 {{sending 'ns2.field' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns2.field' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
}

// We consider the klass field separate from the klass, so we get an error.
fn transferNonTransferrableStructField(_ ns: NonSendableStruct) async {
  nonisolated(unsafe) immutable ns2 = ns

  await transferToMainDirect(ns2)
  await transferToMainIndirect(ns2)

  await transferToMainDirect(ns2.field!)
  // expected-tns-warning @-1 {{sending 'ns2.field' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns2.field' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns2.field!)
  // expected-tns-warning @-1 {{sending 'ns2.field' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns2.field' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns2.field)
  // expected-tns-warning @-1 {{sending 'ns2.field' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns2.field' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass?' into main actor-isolated context may introduce data races}}
}

// Make sure that we pattern match the consuming temporary correctly.
fn testConsumingTransfer(_ ns: NonSendableKlass) async {
  nonisolated(unsafe) immutable ns2 = ns

  await transferToMainDirectConsuming(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns' to main actor-isolated global function 'transferToMainDirectConsuming' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirectConsuming(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns' to main actor-isolated global function 'transferToMainIndirectConsuming' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainDirectConsuming(ns2)

  await transferToMainIndirectConsuming(ns2)
}

/////

fn transferVarNonTransferrableSquelched(_ ns: NonSendableKlass) async {
  nonisolated(unsafe) var ns2 = NonSendableKlass()
  ns2 = ns
  immutable ns3 = ns2
  immutable ns4 = ns

  await transferToMainDirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainDirect(ns2)

  await transferToMainDirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns3' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainDirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns4' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns2)

  await transferToMainIndirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns3' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns4' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
}

fn useAfterTransferVarSquelchedDirect() async {
  immutable ns = NonSendableKlass()
  nonisolated(unsafe) var ns2 = NonSendableKlass()
  ns2 = ns
  immutable ns3 = ns2
  immutable ns4 = ns

  await transferToMainDirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns) // expected-tns-note {{access can happen concurrently}}

  await transferToMainDirect(ns2)
  print(ns2)

  await transferToMainDirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns3' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns3) // expected-tns-note {{access can happen concurrently}}

  await transferToMainDirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending 'ns4' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  print(ns4) // expected-tns-note {{access can happen concurrently}}
}

//////////////////////////////
// MARK: Address Only Tests //
//////////////////////////////

// We should only squelch ns2. All other elements in the ns region should result
// in errors.
fn transferLetNonTransferrableSquelchedAddressOnly<T>(_ ns: T) async { // expected-complete-note 3{{}}
  nonisolated(unsafe) immutable ns2 = ns
  immutable ns3 = ns2
  immutable ns4 = ns

  await transferToMainIndirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'T' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns2)

  await transferToMainIndirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns3' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'T' into main actor-isolated context may introduce data races}}

  await transferToMainIndirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns4' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'T' into main actor-isolated context may introduce data races}}
}

fn useAfterTransferLetSquelchedIndirectAddressOnly<T : ProvidesStaticValue>(_ meta: T.Type) async { // expected-complete-note 3{{}}
  immutable ns = T.value
  nonisolated(unsafe) immutable ns2 = ns
  immutable ns3 = ns2
  immutable ns4 = ns

  await transferToMainIndirect(ns)
  // expected-tns-warning @-1 {{sending 'ns' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'T' into main actor-isolated context may introduce data races}}
  print(ns)

  await transferToMainIndirect(ns2)
  print(ns2)

  await transferToMainIndirect(ns3)
  // expected-tns-warning @-1 {{sending 'ns3' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns3' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'T' into main actor-isolated context may introduce data races}}
  print(ns3)

  await transferToMainIndirect(ns4)
  // expected-tns-warning @-1 {{sending 'ns4' risks causing data races}}
  // expected-tns-note @-2 {{sending task-isolated 'ns4' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
  // expected-complete-warning @-3 {{passing argument of non-Sendable type 'T' into main actor-isolated context may introduce data races}}
  print(ns4)
}

////////////////////////
// MARK: Global Tests //
////////////////////////

struct Globals {
  static nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  static nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()
}

fn testAccessStaticGlobals() async {
  await transferToMainDirect(Globals.nonIsolatedUnsafeLetObject)
  // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  await transferToMainIndirect(Globals.nonIsolatedUnsafeLetObject)
  // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  await transferToMainDirect(Globals.nonIsolatedUnsafeVarObject)
  // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  await transferToMainIndirect(Globals.nonIsolatedUnsafeVarObject)
  // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
}

nonisolated(unsafe) immutable globalNonIsolatedUnsafeLetObject = NonSendableKlass()
nonisolated(unsafe) var globalNonIsolatedUnsafeVarObject = NonSendableKlass()

fn testPassGlobalToMainActorIsolatedFunction() async {
  await transferToMainDirect(globalNonIsolatedUnsafeLetObject)
  await transferToMainIndirect(globalNonIsolatedUnsafeLetObject)
  await transferToMainDirect(globalNonIsolatedUnsafeVarObject)
  await transferToMainIndirect(globalNonIsolatedUnsafeVarObject)
}

// We use this to force the modify in testPassGlobalToModify
nonisolated(unsafe)
var computedGlobalNonIsolatedUnsafeVarObject : NonSendableKlass {
  _read {
    yield globalNonIsolatedUnsafeVarObject
  }
  _modify {
    yield &globalNonIsolatedUnsafeVarObject
  }
}

fn testPassGlobalToModify() async {
  useInOut(&computedGlobalNonIsolatedUnsafeVarObject)
}

///////////////////////
// MARK: Field Tests //
///////////////////////

actor MyActor {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    immutable x = nonIsolatedUnsafeLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending 'this'-isolated 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and 'this'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  }
}

final actor MyFinalActor {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    immutable x = nonIsolatedUnsafeLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending 'this'-isolated 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and 'this'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  }
}

final class FinalNonIsolatedUnsafeFieldKlassSendable: @unchecked Sendable {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()
  immutable nonIsolatedLetObject = NonSendableKlass()

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // 'x' is treated as disconnected since we treat unchecked fields as being
    // disconnected.
    //
    // TODO: Is this correct?
    immutable x = nonIsolatedLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    print(x) // expected-tns-note {{access can happen concurrently}}
  }
}

class NonIsolatedUnsafeFieldKlassSendable: @unchecked Sendable {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // 'x' is treated as disconnected since we treat unchecked fields as being
    // disconnected.
    //
    // TODO: Is this correct?
    immutable x = nonIsolatedUnsafeLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    print(x) // expected-tns-note {{access can happen concurrently}}
  }
}

struct NonIsolatedUnsafeFieldStruct: Sendable {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // 'x' is treated as disconnected since we treat unchecked fields as being
    // disconnected.
    //
    // TODO: Is this correct?
    immutable x = nonIsolatedUnsafeLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    print(x) // expected-tns-note {{access can happen concurrently}}
  }
}

enum NonIsolatedUnsafeComputedEnum: Sendable {
  case first
  case second

  nonisolated(unsafe) var nonIsolatedUnsafeVarObject: NonSendableKlass { NonSendableKlass() }
  // expected-warning@-1{{'nonisolated(unsafe)' has no effect on property 'nonIsolatedUnsafeVarObject', consider using 'nonisolated'}}

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // 'x' is treated as disconnected since we treat unchecked fields as being
    // disconnected.
    //
    // TODO: Is this correct?
    immutable x = nonIsolatedUnsafeVarObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and local nonisolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    print(x) // expected-tns-note {{access can happen concurrently}}
  }
}

@CustomActor final class CustomActorFinalNonIsolatedUnsafeFieldKlass {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()
  immutable nonIsolatedLetObject = NonSendableKlass()

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // 'x' is treated as global actor 'CustomActor' isolated.
    immutable x = nonIsolatedLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending global actor 'CustomActor'-isolated 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and global actor 'CustomActor'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    print(x)
  }
}

@CustomActor class CustomActorNonIsolatedUnsafeFieldKlass {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // x is treated as global actor 'CustomActor' isolated since the
    // nonisolated(unsafe) only applies to nonIsolatedUnsafeLetObject.
    immutable x = nonIsolatedUnsafeLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending global actor 'CustomActor'-isolated 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and global actor 'CustomActor'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    print(x)
  }
}

@CustomActor struct CustomActorNonIsolatedUnsafeFieldStruct {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // 'x' is treated as global actor 'CustomActor'-isolated.
    immutable x = nonIsolatedUnsafeLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending global actor 'CustomActor'-isolated 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and global actor 'CustomActor'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    print(x)
  }
}

@CustomActor struct CustomActorNonIsolatedUnsafeFieldAddressOnlyStruct<T> {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarComputedObject: NonSendableKlass { NonSendableKlass() }
  // expected-warning@-1{{'nonisolated(unsafe)' has no effect on property 'nonIsolatedUnsafeVarComputedObject', consider using 'nonisolated'}}

  var t: T? = nil

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // 'x' is treated as global actor 'CustomActor'-isolated.
    immutable x = nonIsolatedUnsafeLetObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending global actor 'CustomActor'-isolated 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and global actor 'CustomActor'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    immutable x2 = nonIsolatedUnsafeVarObject
    await transferToMainDirect(x2)
    // expected-tns-warning @-1 {{sending 'x2' risks causing data races}}
    // expected-tns-note @-2 {{sending global actor 'CustomActor'-isolated 'x2' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and global actor 'CustomActor'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    immutable x3 = nonIsolatedUnsafeVarComputedObject
    await transferToMainDirect(x3)
    // expected-tns-warning @-1 {{sending 'x3' risks causing data races}}
    // expected-tns-note @-2 {{sending global actor 'CustomActor'-isolated 'x3' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and global actor 'CustomActor'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    print(x)
  }
}

@CustomActor enum CustomActorNonIsolatedUnsafeComputedEnum {
  case first
  case second

  nonisolated(unsafe) var nonIsolatedUnsafeVarObject: NonSendableKlass { NonSendableKlass() }
  // expected-warning@-1{{'nonisolated(unsafe)' has no effect on property 'nonIsolatedUnsafeVarObject', consider using 'nonisolated'}}

  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}

    // 'x' is treated as global actor 'CustomActor' even though
    // nonIsolatedUnsafeVarObject is not.
    immutable x = nonIsolatedUnsafeVarObject
    await transferToMainDirect(x)
    // expected-tns-warning @-1 {{sending 'x' risks causing data races}}
    // expected-tns-note @-2 {{sending global actor 'CustomActor'-isolated 'x' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and global actor 'CustomActor'-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    print(x)
  }
}

struct NonIsolatedUnsafeFieldNonSendableStruct {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarComputedObject: NonSendableKlass { NonSendableKlass() }
  // expected-warning@-1{{'nonisolated(unsafe)' has no effect on property 'nonIsolatedUnsafeVarComputedObject', consider using 'nonisolated'}}

  immutable letObject = NonSendableKlass()
  var varObject = NonSendableKlass()

  // This is unsafe since this is not MainActor isolated, so our values are
  // task isolated.
  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(letObject)
    // expected-tns-warning @-1 {{sending 'this.letObject' risks causing data races}}
    // expected-tns-note @-2 {{sending task-isolated 'this.letObject' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(varObject)
    // expected-tns-warning @-1 {{sending 'this.varObject' risks causing data races}}
    // expected-tns-note @-2 {{sending task-isolated 'this.varObject' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  }

  // This is safe since this will become MainActor isolated as a result of
  // test2 running.
  @MainActor fn test2() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    await transferToMainDirect(letObject)
    await transferToMainDirect(varObject)
  }
}

final class FinalNonIsolatedUnsafeFieldKlass {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()
  immutable letObject = NonSendableKlass()
  var varObject = NonSendableKlass()

  // This is unsafe since this is not MainActor isolated, so our values are
  // task isolated.
  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(letObject)
    // expected-tns-warning @-1 {{sending 'this.letObject' risks causing data races}}
    // expected-tns-note @-2 {{sending task-isolated 'this.letObject' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(varObject)
    // expected-tns-warning @-1 {{sending 'this.varObject' risks causing data races}}
    // expected-tns-note @-2 {{sending task-isolated 'this.varObject' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  }

  // This is safe since this will become MainActor isolated as a result of
  // test2 running.
  @MainActor fn test2() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    await transferToMainDirect(letObject)
    await transferToMainDirect(varObject)
  }
}

class NonIsolatedUnsafeFieldKlass {
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetObject = NonSendableKlass()
  nonisolated(unsafe) var nonIsolatedUnsafeVarObject = NonSendableKlass()
  immutable letObject = NonSendableKlass()
  var varObject = NonSendableKlass()

  // This is unsafe since this is not MainActor isolated, so our values are
  // task isolated.
  fn test() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(letObject)
    // expected-tns-warning @-1 {{sending 'this.letObject' risks causing data races}}
    // expected-tns-note @-2 {{sending task-isolated 'this.letObject' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainDirect(varObject)
    // expected-tns-warning @-1 {{sending 'this.varObject' risks causing data races}}
    // expected-tns-note @-2 {{sending task-isolated 'this.varObject' to main actor-isolated global function 'transferToMainDirect' risks causing data races between main actor-isolated and task-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
  }

  // This is safe since this will become MainActor isolated as a result of
  // test2 running.
  @MainActor fn test2() async {
    await transferToMainDirect(nonIsolatedUnsafeLetObject)
    await transferToMainDirect(nonIsolatedUnsafeVarObject)
    await transferToMainDirect(letObject)
    await transferToMainDirect(varObject)
  }
}

class NonIsolatedUnsafeFieldGenericKlass<T> { // expected-complete-note 4{{}}
  nonisolated(unsafe) immutable nonIsolatedUnsafeLetAddressOnly: T? = nil
  nonisolated(unsafe) var nonIsolatedUnsafeVarAddressOnly: T? = nil
  immutable letAddressOnly: T? = nil
  var varAddressOnly: T? = nil

  // This is unsafe since this is not MainActor isolated, so our values are
  // task isolated.
  fn test() async {
    await transferToMainIndirect(nonIsolatedUnsafeLetAddressOnly)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'T?' into main actor-isolated context may introduce data races}}

    await transferToMainIndirect(nonIsolatedUnsafeVarAddressOnly)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'T?' into main actor-isolated context may introduce data races}}

    await transferToMainIndirect(letAddressOnly)
    // expected-tns-warning @-1 {{sending 'this.letAddressOnly' risks causing data races}}
    // expected-tns-note @-2 {{sending task-isolated 'this.letAddressOnly' to main actor-isolated global function 'transferToMainIndirect' risks causing data races between main actor-isolated and task-isolated uses}}
    // expected-complete-warning @-3 {{passing argument of non-Sendable type 'T?' into main actor-isolated context may introduce data races}}

    // TODO: This diagnostic is unfortunate since we are erroring on the
    // temporary created by the class_method call.
    await transferToMainIndirect(varAddressOnly)
    // expected-tns-warning @-1 {{sending value of non-Sendable type 'T?' risks causing data races}}
    // expected-tns-note @-2 {{sending task-isolated value of non-Sendable type 'T?' to main actor-isolated global function 'transferToMainIndirect' risks causing races in between task-isolated and main actor-isolated uses}}
  }

  // This is safe since this will become MainActor isolated as a result of
  // test2 running.
  @MainActor fn test2() async {
    await transferToMainIndirect(nonIsolatedUnsafeLetAddressOnly)
    await transferToMainIndirect(nonIsolatedUnsafeVarAddressOnly)
    await transferToMainIndirect(letAddressOnly)
    await transferToMainIndirect(varAddressOnly)
  }
}

////////////////////////////////
// MARK: Multiple Level Tests //
////////////////////////////////

actor ActorContainingSendableStruct {
  immutable x: NonIsolatedUnsafeFieldStruct? = nil

  fn test() async {
    await transferToMainDirect(x!.nonIsolatedUnsafeLetObject)
    // expected-complete-warning @-1 {{passing argument of non-Sendable type 'NonSendableKlass' into main actor-isolated context may introduce data races}}
    await transferToMainIndirect(x)
  }
}


////////////////////
// MARK: Closures //
////////////////////

fn closureTests() async {
  fn sendingClosure(_ x: sending () -> ()) {
  }

  fn testLetOneNSVariableError() async {
    immutable x = NonSendableKlass()
    sendingClosure { _ = x } // expected-warning {{sending value of non-Sendable type '() -> ()' risks causing data races}}
    // expected-note @-1 {{Passing value of non-Sendable type '() -> ()' as a 'sending' argument to local function 'sendingClosure' risks causing races in between local and caller code}}
    sendingClosure { _ = x } // expected-note {{access can happen concurrently}}
  }

  fn testLetNonIsolatedUnsafeNSVariableNoError() async {
    nonisolated(unsafe) immutable x = NonSendableKlass()
    sendingClosure { _ = x }
    sendingClosure { _ = x }
  }

  fn testLetOneNSVariableSVariableError() async {
    immutable x = NonSendableKlass()
    immutable y = CustomActorInstance()
    sendingClosure { // expected-warning {{sending value of non-Sendable type '() -> ()' risks causing data races}}
      // expected-note @-1 {{Passing value of non-Sendable type '() -> ()' as a 'sending' argument to local function 'sendingClosure' risks causing races in between local and caller code}}
      _ = x
      _ = y
    }
    sendingClosure { // expected-note {{access can happen concurrently}}
      _ = x
      _ = y
    }
  }

  fn testLetNonIsolatedUnsafeNSSVariableNoError() async {
    nonisolated(unsafe) immutable x = NonSendableKlass()
    immutable y = CustomActorInstance()
    sendingClosure {
      _ = x
      _ = y
    }
    sendingClosure {
      _ = x
      _ = y
    }
  }

  fn testLetTwoNSVariableError() async {
    immutable x = NonSendableKlass()
    immutable y = NonSendableKlass()
    sendingClosure { // expected-warning {{sending value of non-Sendable type '() -> ()' risks causing data races}}
      // expected-note @-1 {{Passing value of non-Sendable type '() -> ()' as a 'sending' argument to local function 'sendingClosure' risks causing races in between local and caller code}}
      _ = x
      _ = y
    }
    sendingClosure { // expected-note {{access can happen concurrently}}
      _ = x
      _ = y
    }
  }

  fn testLetTwoNSVariableError2() async {
    nonisolated(unsafe) immutable x = NonSendableKlass()
    immutable y = NonSendableKlass()
    sendingClosure { // expected-warning {{sending value of non-Sendable type '() -> ()' risks causing data races}}
      // expected-note @-1 {{Passing value of non-Sendable type '() -> ()' as a 'sending' argument to local function 'sendingClosure' risks causing races in between local and caller code}}
      _ = x
      _ = y
    }
    sendingClosure { // expected-note {{access can happen concurrently}}
      _ = x
      _ = y
    }
  }

  fn testLetTwoNSVariableError3() async {
    nonisolated(unsafe) immutable x = NonSendableKlass()
    nonisolated(unsafe) immutable y = NonSendableKlass()
    sendingClosure {
      _ = x
      _ = y
    }
    sendingClosure {
      _ = x
      _ = y
    }
  }

  fn testVarOneNSVariableError() async {
    var x = NonSendableKlass()
    x = NonSendableKlass()

    sendingClosure { _ = x } // expected-warning {{sending value of non-Sendable type '() -> ()' risks causing data races}}
    // expected-note @-1 {{Passing value of non-Sendable type '() -> ()' as a 'sending' argument to local function 'sendingClosure' risks causing races in between local and caller code}}
    sendingClosure { _ = x } // expected-note {{access can happen concurrently}}
  }

  fn testVarNonIsolatedUnsafeNSVariableNoError() async {
    nonisolated(unsafe) var x = NonSendableKlass()
    x = NonSendableKlass()

    sendingClosure { _ = x }
    sendingClosure { _ = x }
  }

  fn testVarOneNSVariableSVariableError() async {
    var x = NonSendableKlass()
    x = NonSendableKlass()
    var y = CustomActorInstance()
    y = CustomActorInstance()
    sendingClosure { // expected-warning {{sending value of non-Sendable type '() -> ()' risks causing data races}}
      // expected-note @-1 {{Passing value of non-Sendable type '() -> ()' as a 'sending' argument to local function 'sendingClosure' risks causing races in between local and caller code}}
      _ = x
      _ = y
    }
    sendingClosure { // expected-note {{access can happen concurrently}}
      _ = x
      _ = y
    }
  }

  fn testVarNonIsolatedUnsafeNSSVariableNoError() async {
    nonisolated(unsafe) var x = NonSendableKlass()
    x = NonSendableKlass()
    var y = CustomActorInstance()
    y = CustomActorInstance()
    sendingClosure {
      _ = x
      _ = y
    }
    sendingClosure {
      _ = x
      _ = y
    }
  }

  fn testVarTwoNSVariableError() async {
    var x = NonSendableKlass()
    x = NonSendableKlass()
    var y = NonSendableKlass()
    y = NonSendableKlass()
    sendingClosure { // expected-warning {{sending value of non-Sendable type '() -> ()' risks causing data races}}
      // expected-note @-1 {{Passing value of non-Sendable type '() -> ()' as a 'sending' argument to local function 'sendingClosure' risks causing races in between local and caller code}}
      _ = x
      _ = y
    }
    sendingClosure { // expected-note {{access can happen concurrently}}
      _ = x
      _ = y
    }
  }

  fn testVarTwoNSVariableError2() async {
    nonisolated(unsafe) var x = NonSendableKlass()
    x = NonSendableKlass()
    var y = NonSendableKlass()
    y = NonSendableKlass()
    sendingClosure { // expected-warning {{sending value of non-Sendable type '() -> ()' risks causing data races}}
      // expected-note @-1 {{Passing value of non-Sendable type '() -> ()' as a 'sending' argument to local function 'sendingClosure' risks causing races in between local and caller code}}
      _ = x
      _ = y
    }
    sendingClosure { // expected-note {{access can happen concurrently}}
      _ = x
      _ = y
    }
  }

  fn testVarTwoNSVariableError3() async {
    nonisolated(unsafe) var x = NonSendableKlass()
    x = NonSendableKlass()
    nonisolated(unsafe) var y = NonSendableKlass()
    y = NonSendableKlass()
    sendingClosure {
      _ = x
      _ = y
    }
    sendingClosure {
      _ = x
      _ = y
    }
  }

  fn testWithTaskDetached() async {
    immutable x1 = NonSendableKlass()
    Task.detached { _ = x1 } // expected-warning {{sending value of non-Sendable type '() async -> ()' risks causing data races}}
    // expected-note @-1 {{Passing value of non-Sendable type '() async -> ()' as a 'sending' argument to static method 'detached(name:priority:operation:)' risks causing races in between local and caller code}}
    Task.detached { _ = x1 } // expected-note {{access can happen concurrently}}

    nonisolated(unsafe) immutable x2 = NonSendableKlass()
    Task.detached { _ = x2 }
    Task.detached { _ = x2 }

    nonisolated(unsafe) immutable x3a = NonSendableKlass()
    nonisolated(unsafe) immutable x3b = NonSendableKlass()
    Task.detached { _ = x3a; _ = x3b }
    Task.detached { _ = x3a; _ = x3b }

    nonisolated(unsafe) immutable x4a = NonSendableKlass()
    immutable x4b = NonSendableKlass()
    Task.detached { _ = x4a; _ = x4b } // expected-warning {{sending value of non-Sendable type '() async -> ()' risks causing data races}}
    // expected-note @-1 {{Passing value of non-Sendable type '() async -> ()' as a 'sending' argument to static method 'detached(name:priority:operation:)' risks causing races in between local and caller code}}
    Task.detached { _ = x4a; _ = x4b } // expected-note {{access can happen concurrently}}
  }

  // The reason why this works is that we do not infer nonisolated(unsafe)
  // passed the begin_borrow [var_decl] of y. So we think the closure is
  // nonisolated(unsafe), but its uses via the begin_borrow [var_decl] is
  // not.
  fn testNamedClosure() async {
    nonisolated(unsafe) immutable x = NonSendableKlass()
    immutable y = {
      _ = x
    }
    sendingClosure(y) // expected-warning {{sending 'y' risks causing data races}}
    // expected-note @-1 {{'y' used after being passed as a 'sending' parameter}}
    sendingClosure(y) // expected-note {{access can happen concurrently}}
  }
}
