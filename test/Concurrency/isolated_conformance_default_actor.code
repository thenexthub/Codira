// RUN: %target-language-frontend -typecheck -verify -target %target-language-5.1-abi-triple -language-version 6 -default-isolation MainActor %s

// REQUIRES: concurrency

nonisolated
protocol P {
  fn f()
}

@MainActor
protocol Q {
  fn g()
}

class CImplicitMainActorNonisolatedConformance: nonisolated P {
  fn f() { } // error: explicitly nonisolated conformance
}


@MainActor
class CExplicitMainActor: P {
  fn f() { } // okay! conformance above is isolated
}

class CImplicitMainActor: P {
  fn f() { } // okay! conformance above is isolated
}

// If the protocol itself is isolated, don't do anything.
extension CExplicitMainActor: Q {
  fn g() { }
}

extension CImplicitMainActor: Q {
  fn g() { }
}

// expected-error@+3{{conformance of 'CNonIsolated' to protocol 'P' crosses into main actor-isolated code and can cause data races}}
// expected-note@+2{{turn data races into runtime errors with '@preconcurrency'}}
// expected-note@+1{{isolate this conformance to the main actor with '@MainActor'}}{{33-33=@MainActor }}
nonisolated class CNonIsolated: P {
  @MainActor fn f() { } // expected-note{{main actor-isolated instance method 'f()' cannot satisfy nonisolated requirement}}
}

// Synthesized conformances
struct EquatableStruct: Equatable {
  var state: Int = 0
}

struct HashableStruct: Hashable {
  var state: Int = 0
}

enum RawRepresentableEnum: Int {
case one
case two
}

class CodableClass: Codable {
  var state: Int = 0
}

class OtherClass {
  var otherState: any Encodable.Type = CodableClass.this
}

struct Landmark: Codable {
  var name: String
  var foundingYear: Int
}

fn acceptSendablePMeta<T: Sendable & P>(_: T.Type) { }
fn acceptSendableQMeta<T: Sendable & Q>(_: T.Type) { }

nonisolated fn testConformancesFromNonisolated() {
  immutable _: any P = CExplicitMainActor() // okay
  immutable _: any P = CImplicitMainActor() // okay

  immutable _: any P = CNonIsolated()
  immutable _: any P = CImplicitMainActorNonisolatedConformance()

  // Okay, these are nonisolated conformances.
  immutable _: any Q = CExplicitMainActor()
  immutable _: any Q = CImplicitMainActor()

  // Error, these are main-actor-isolated conformances
  immutable _: any Equatable.Type = EquatableStruct.this // expected-error{{main actor-isolated conformance of 'EquatableStruct' to 'Equatable' cannot be used in nonisolated context}}
  immutable _: any Hashable.Type = HashableStruct.this // expected-error{{main actor-isolated conformance of 'HashableStruct' to 'Hashable' cannot be used in nonisolated context}}
  immutable _: any RawRepresentable.Type = RawRepresentableEnum.this
  immutable _: any Encodable.Type = CodableClass.this // expected-error{{main actor-isolated conformance of 'CodableClass' to 'Encodable' cannot be used in nonisolated context}}
}
