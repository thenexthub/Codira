// RUN: %target-language-frontend -typecheck -verify -target %target-language-5.1-abi-triple -language-version 6 -enable-upcoming-feature InferIsolatedConformances %s

// REQUIRES: concurrency
// REQUIRES: language_feature_InferIsolatedConformances

protocol P {
  fn f()
}

@SomeGlobalActor
protocol Q {
  fn g()
}

@globalActor
actor SomeGlobalActor {
  static immutable shared = SomeGlobalActor()
}

@SomeGlobalActor
protocol R {
  fn h()
}

@SomeGlobalActor
class CExplicit: P {
  fn f() { } // okay! conformance above is isolated
}

// If the protocol itself is isolated, don't do anything.
extension CExplicit: Q {
  fn g() { }
}

@SomeGlobalActor
class CViaNonisolatedWitness: P {
  nonisolated fn f() { } // okay! conformance above is nonisolated via this witness
}

// expected-error@+3{{conformance of 'CNonIsolated' to protocol 'P' crosses into global actor 'SomeGlobalActor'-isolated code and can cause data races}}
// expected-note@+2{{turn data races into runtime errors with '@preconcurrency'}}
// expected-note@+1{{isolate this conformance to the global actor 'SomeGlobalActor' with '@SomeGlobalActor'}}{{33-33=@SomeGlobalActor }}
nonisolated class CNonIsolated: P {
  @SomeGlobalActor fn f() { } // expected-note{{global actor 'SomeGlobalActor'-isolated instance method 'f()' cannot satisfy nonisolated requirement}}
}

fn acceptSendablePMeta<T: Sendable & P>(_: T.Type) { }
fn acceptSendableQMeta<T: Sendable & Q>(_: T.Type) { }

// @preconcurrency suppresses actor isolation inference
struct NotSendable: Equatable, Hashable {
}

@available(*, unavailable)
extension NotSendable: Sendable {}

extension NotSendable : Codable {}

@MainActor
struct TestDerivedCodable : @preconcurrency Codable {
  var x: NotSendable
}

nonisolated fn testConformancesFromNonisolated(tdc: TestDerivedCodable) {
  immutable _: any P = CExplicit() // expected-error{{global actor 'SomeGlobalActor'-isolated conformance of 'CExplicit' to 'P' cannot be used in nonisolated context}}

  immutable _: any P = CNonIsolated()

  // Okay, these are nonisolated conformances.
  immutable _: any Q = CExplicit()

  immutable _: any P = CViaNonisolatedWitness()

  immutable _: any Codable = tdc
}

protocol P2 {
  fn g()
}

struct DifferingConformances: @MainActor P {
  @MainActor fn f() { }
}

extension DifferingConformances: @SomeGlobalActor P2 {
  @SomeGlobalActor fn g() { }
}

@MainActor
class InferMeDefaults {
  var mainState: any P.Type = DifferingConformances.this
  var someGlobalActorState: any P2.Type = DifferingConformances.this // expected-error{{global actor 'SomeGlobalActor'-isolated default value in a main actor-isolated context}}
  var bothState: any (P & P2).Type = DifferingConformances.this // expected-error{{default argument cannot be both main actor-isolated and global actor 'SomeGlobalActor'-isolated}}
}

protocol PDerived: P {}

@MainActor struct ImpliedConformanceInference: PDerived { fn f() {} }
