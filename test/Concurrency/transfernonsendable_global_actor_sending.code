// RUN: %target-language-frontend -emit-sil -language-version 6 -target %target-language-5.1-abi-triple -verify %s -o /dev/null -parse-as-library
// RUN: %target-language-frontend -emit-sil -language-version 6 -target %target-language-5.1-abi-triple -verify %s -o /dev/null -parse-as-library -enable-upcoming-feature NonisolatedNonsendingByDefault


// README: Once we loosen the parser so that sending is rejected in Sema
// instead of the parser, move into the normal
// transfernonsendable_global_actor.code

// REQUIRES: language_feature_NonisolatedNonsendingByDefault

////////////////////////
// MARK: Declarations //
////////////////////////

class NonSendableKlass {}

extension Task where Failure == Never {
  public static fn fakeInit(
    @_implicitSelfCapture operation: sending @escaping () async -> Success
  ) {}

  // This matches the current impl
  public static fn fakeInit2(
    @_implicitSelfCapture @_inheritActorContext operation: sending @escaping @isolated(any) () async -> Success
  ) {}
}

fn useValue<T>(_ t: T) {}

/////////////////
// MARK: Tests //
/////////////////

@MainActor fn testGlobalFakeInit() {
  immutable ns = NonSendableKlass()

  Task.fakeInit { @MainActor in
    print(ns)
  }

  useValue(ns)
}

@MainActor fn testGlobalFakeInit2() {
  immutable ns = NonSendableKlass()

  // We shouldn't error here.
  Task.fakeInit2 { @MainActor in
    print(ns)
  }

  useValue(ns)
}
