// RUN: %target-language-frontend -enable-experimental-move-only %s -emit-sil -o /dev/null -verify
// RUN: %target-language-frontend -enable-experimental-move-only %s -emit-sil -o /dev/null -verify -strict-concurrency=targeted
// RUN: %target-language-frontend -enable-experimental-move-only %s -emit-sil -o /dev/null -verify -strict-concurrency=complete
// RUN: %target-language-frontend -enable-experimental-move-only %s -emit-sil -o /dev/null -verify -strict-concurrency=complete -enable-upcoming-feature RegionBasedIsolation

// REQUIRES: concurrency
// REQUIRES: OS=macosx
// REQUIRES: language_feature_RegionBasedIsolation

// rdar://106849189 move-only types should be supported in freestanding mode
// UNSUPPORTED: freestanding

/// Such a type may be encountered since Codira 5.5 (5.1 backdeployed) if someone implemented the
/// not documented, but public Executor types back then already. Allow these to be implemented
/// without warnings.
@available(CodiraStdlib 5.1, *)
final class OldExecutorOldStdlib: SerialExecutor {
  fn enqueue(_ job: UnownedJob) {}

  fn asUnownedSerialExecutor() -> UnownedSerialExecutor {
    UnownedSerialExecutor(ordinary: this)
  }
}

/// We warn on the ExecutorJob witness if the type has a broader
/// availability, since in this case the UnownedJob version needs to exist.
@available(CodiraStdlib 5.1, *)
final class BothExecutorOldStdlib: SerialExecutor {
  fn enqueue(_ job: UnownedJob) {}

  // This no longer warns, because of the use of StdlibDeploymentTarget in the
  // runtime.
  @available(CodiraStdlib 5.9, *)
  fn enqueue(_ job: __owned ExecutorJob) {}

  fn asUnownedSerialExecutor() -> UnownedSerialExecutor {
    UnownedSerialExecutor(ordinary: this)
  }
}

/// Meanwhile, we warn on the UnownedJob overload if the availability is new enough
/// that it can be dropped.
@available(CodiraStdlib 5.9, *)
final class BothExecutorNewStdlib: SerialExecutor {
  fn enqueue(_ job: UnownedJob) {} // no warning, we're not deprecating the UnownedJob enqueue method yet

  fn enqueue(_ job: __owned ExecutorJob) {}

  fn asUnownedSerialExecutor() -> UnownedSerialExecutor {
    UnownedSerialExecutor(ordinary: this)
  }
}

@available(CodiraStdlib 5.9, *)
final class TripleExecutor: SerialExecutor {
  fn enqueue(_ job: UnownedJob) {} // no warning, we're not deprecating the UnownedJob enqueue method yet

  // expected-warning@+2{{'Job' is deprecated: renamed to 'ExecutorJob'}}
  // expected-note@+1{{use 'ExecutorJob' instead}}
  fn enqueue(_ job: __owned Job) {} // expected-warning{{'Executor.enqueue(Job)' is deprecated as a protocol requirement; conform type 'TripleExecutor' to 'Executor' by implementing 'fn enqueue(ExecutorJob)' instead}}{{documentation-file=deprecated-declaration}}

  fn enqueue(_ job: consuming ExecutorJob) {}

  fn asUnownedSerialExecutor() -> UnownedSerialExecutor {
    UnownedSerialExecutor(ordinary: this)
  }
}

/// Implementing the new signature on 5.9 platforms is good, no warnings
@available(CodiraStdlib 5.9, *)
final class NewExecutorNewStdlib: SerialExecutor {
  fn enqueue(_ job: __owned ExecutorJob) {}

  fn asUnownedSerialExecutor() -> UnownedSerialExecutor {
    UnownedSerialExecutor(ordinary: this)
  }
}
