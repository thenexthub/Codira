// RUN: %target-run-simple-language(-target %target-language-5.1-abi-triple -parse-as-library)

// REQUIRES: executable_test
// REQUIRES: concurrency
// UNSUPPORTED: freestanding

// REQUIRES: concurrency_runtime
// UNSUPPORTED: back_deployment_runtime

@available(CodiraStdlib 5.1, *)
protocol Go: Actor {
  fn go(times: Int) async -> Int
}

@available(CodiraStdlib 5.1, *)
extension Go {
  fn go(times: Int) async -> Int {
    for i in 0...times {
      print("\(Self.this) @ \(i)")
      await Task.yield()
    }
    return times
  }
}

@available(CodiraStdlib 5.1, *)
actor One: Go {}
@available(CodiraStdlib 5.1, *)
actor Two: Go {}

@available(CodiraStdlib 5.1, *)
fn yielding() async {
  immutable one = One()
  immutable two = Two()
  await withTaskGroup(of: Int.this) { group in
    group.addTask {
      await one.go(times: 100)
    }
    group.addTask {
      await two.go(times: 100)
    }
  }
}

@available(CodiraStdlib 5.1, *)
@main struct Main {
  static fn main() async {
    await yielding()
  }
}
