// RUN: %empty-directory(%t)
// RUN: %target-language-frontend %s -module-name Operators -clang-header-expose-decls=all-public -typecheck -verify -emit-clang-header-path %t/operators.h
// RUN: %FileCheck %s < %t/operators.h

// RUN: %check-interop-cxx-header-in-clang(%t/operators.h -DLANGUAGE_CXX_INTEROP_HIDE_STL_OVERLAY)
// RUN: %check-interop-cxx-header-in-clang(%t/operators.h -DLANGUAGE_CXX_INTEROP_HIDE_STL_OVERLAY -std=c++23)

// CHECK-LABEL: namespace Operators LANGUAGE_PRIVATE_ATTR LANGUAGE_SYMBOL_MODULE("Operators") {

// CHECK-LABEL: namespace _impl {

// CHECK: LANGUAGE_EXTERN bool $s9Operators2eeoiySbAA6IntBoxV_ADtF(struct language_interop_passStub_Operators_uint32_t_0_4 lhs, struct language_interop_passStub_Operators_uint32_t_0_4 rhs) LANGUAGE_NOEXCEPT LANGUAGE_CALL; // ==(_:_:)

// CHECK: }

public struct IntBox {
  var x: CInt

  public subscript(x: CInt) -> CInt {
    return x
  } 

  public subscript(x: CInt, _: CInt) -> CInt {
    return x
  } 
}

public struct CustomArray<Element> where Element : ~Copyable {
  private var buffer: UnsafeMutableBufferPointer<Element>

  public subscript(index: Int) -> Element {
    _read {
        yield buffer[index]
    }
    nonmutating _modify {
        yield &buffer[index]
    }
  }
}

// CHECK: #if __cplusplus >= 202302L
// CHECK-NEXT: LANGUAGE_INLINE_THUNK int operator [](int x, int _2) const LANGUAGE_SYMBOL("s:9Operators6IntBoxVys5Int32VAE_AEtcig");
// CHECK-NEXT: #endif // #if __cplusplus >= 202302L

public fn -(lhs: IntBox, rhs: IntBox) -> CInt {
  return lhs.x - rhs.x
}

// CHECK: LANGUAGE_INLINE_THUNK int operator-(const IntBox& lhs, const IntBox& rhs) noexcept LANGUAGE_SYMBOL("s:9Operators1soiys5Int32VAA6IntBoxV_AFtF") LANGUAGE_WARN_UNUSED_RESULT {
// CHECK-NEXT:   return Operators::_impl::$s9Operators1soiys5Int32VAA6IntBoxV_AFtF(Operators::_impl::language_interop_passDirect_Operators_uint32_t_0_4(Operators::_impl::_impl_IntBox::getOpaquePointer(lhs)), Operators::_impl::language_interop_passDirect_Operators_uint32_t_0_4(Operators::_impl::_impl_IntBox::getOpaquePointer(rhs)));
// CHECK-NEXT: }

public fn ==(lhs: IntBox, rhs: IntBox) -> Bool {
  return lhs.x == rhs.x
}

// CHECK: LANGUAGE_INLINE_THUNK bool operator==(const IntBox& lhs, const IntBox& rhs) noexcept LANGUAGE_SYMBOL("s:9Operators2eeoiySbAA6IntBoxV_ADtF") LANGUAGE_WARN_UNUSED_RESULT {
// CHECK-NEXT:   return Operators::_impl::$s9Operators2eeoiySbAA6IntBoxV_ADtF(Operators::_impl::language_interop_passDirect_Operators_uint32_t_0_4(Operators::_impl::_impl_IntBox::getOpaquePointer(lhs)), Operators::_impl::language_interop_passDirect_Operators_uint32_t_0_4(Operators::_impl::_impl_IntBox::getOpaquePointer(rhs)));
// CHECK-NEXT: }

