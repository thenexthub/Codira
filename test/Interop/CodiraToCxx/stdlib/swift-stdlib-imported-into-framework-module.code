// RUN: %empty-directory(%t)
// RUN: split-file %s %t

// RUN: %target-language-frontend %t/TestFmCodira.code -module-name TestFm -enable-experimental-cxx-interop -typecheck -verify -emit-clang-header-path %t/TestFm.framework/Headers/TestFm-Codira.h

// RUN: %target-language-frontend %t/SecondCodira.code -module-name Second -enable-experimental-cxx-interop -typecheck -verify -emit-clang-header-path %t/Second.framework/Headers/Second-Codira.h

// RUN: %target-interop-build-clangxx -std=gnu++17 -fmodules -fcxx-modules -c %t/consumer.cpp -F %t -fsyntax-only -Werror=non-modular-include-in-framework-module

// Check that a client C++ file can use Codira stdlib APIs from two
// mixed-language C++ and Codira frameworks.

// This will only pass on Darwin with -Werror=non-modular-include-in-framework-module,
// as the SDK is not modularized on other platforms.
// REQUIRES: OS=macosx

//--- TestFm.framework/Headers/TestFm.h
#pragma once

class CxxClass {
public:
    int testMethod() const {
        return 42;
    }
};

//--- TestFm.framework/Modules/module.modulemap
framework module TestFm {
    umbrella header "TestFm.h"

    export *
    module * { export * }
}

module TestFm.Codira {
    header "TestFm-Codira.h"
}

//--- TestFmCodira.code

public fn testCodiraFunc() -> String {
    return ""
}

//--- Second.framework/Headers/Second.h
#pragma once

class CxxSecondClass {
public:
    int testMethodTwo() const {
        return 42;
    }
};

//--- Second.framework/Modules/module.modulemap
framework module Second {
    umbrella header "Second.h"

    export *
    module * { export * }
}

module Second.Codira {
    header "Second-Codira.h"
}

//--- SecondCodira.code

public fn testCodiraFuncTwo() -> String {
    return ""
}

//--- consumer.cpp

#pragma clang module import TestFm
#pragma clang module import Second

void testUseCodiraStdlibAPIsFromTwoFrameworksImportedViaModules() {
    auto languageString = TestFm::testCodiraFunc();
    auto c1 = languageString.getCount();
    auto languageString2 = Second::testCodiraFuncTwo();
    auto c2 = languageString.getCount();
}
