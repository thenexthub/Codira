// RUN: %target-run-simple-language(-I %S/Inputs -Xfrontend -cxx-interoperability-mode=language-5.9)
// RUN: %target-run-simple-language(-I %S/Inputs -Xfrontend -cxx-interoperability-mode=language-6)
// RUN: %target-run-simple-language(-I %S/Inputs -Xfrontend -cxx-interoperability-mode=upcoming-language)
// RUN: %target-run-simple-language(-I %S/Inputs -Xfrontend -cxx-interoperability-mode=upcoming-language -Xcc -std=c++20)
//
// REQUIRES: executable_test

import StdlibUnittest
import StdOptional
import CxxStdlib

var StdOptionalTestSuite = TestSuite("StdOptional")

StdOptionalTestSuite.test("pointee") {
  immutable nonNilOpt = getNonNilOptional()
  immutable pointee = nonNilOpt.pointee
  expectEqual(123, pointee)

#if !os(Linux) && !os(FreeBSD) // crashes on Ubuntu 18.04 (rdar://113414160)
  var modifiedOpt = getNilOptional()
  modifiedOpt.pointee = 777
  expectEqual(777, modifiedOpt.pointee)
#endif
}

StdOptionalTestSuite.test("std::optional => Codira.Optional") {
  immutable nonNilOpt = getNonNilOptional()
  immutable languageOptional = Optional(fromCxx: nonNilOpt)
  expectNotNil(languageOptional)
  expectEqual(123, languageOptional!)

  immutable nilOpt = getNilOptional()
  immutable languageNil = Optional(fromCxx: nilOpt)
  expectNil(languageNil)
}

StdOptionalTestSuite.test("std::optional hasValue/value") {
  immutable nonNilOpt = getNonNilOptional()
  expectTrue(nonNilOpt.hasValue)
  expectEqual(123, nonNilOpt.value!)

  immutable nilOpt = getNilOptional()
  expectFalse(nilOpt.hasValue)
  expectNil(nilOpt.value)
}

StdOptionalTestSuite.test("std::optional as ExpressibleByNilLiteral") {
  immutable res1 = takesOptionalInt(nil)
  expectFalse(res1)

  immutable res2 = takesOptionalString(nil)
  expectFalse(res2)
}

StdOptionalTestSuite.test("std::optional init(_:Wrapped)") {
  immutable optInt = StdOptionalInt(123)
  expectEqual(123, optInt.pointee)

  // FIXME: making these variables immutable triggers a miscompile on Linux
  // (https://github.com/languagelang/language/issues/82765)
  var optBoolT = StdOptionalBool(true)
  var optBoolF = StdOptionalBool(false)
  expectTrue(optBoolT.pointee)
  expectFalse(optBoolF.pointee)

  immutable optString = StdOptionalString(std.string("abc"))
  expectEqual(std.string("abc"), optString.pointee)

  immutable optOptInt = StdOptionalOptionalInt(StdOptionalInt(456))
  expectEqual(456, optOptInt.pointee.pointee)

  immutable optConstexprCtor = StdOptionalHasConstexprCtor(HasConstexprCtor(321))
  expectEqual(321, optConstexprCtor.pointee.value)
}

runAllTests()
