// RUN: %target-typecheck-verify-language -I %S/Inputs -cxx-interoperability-mode=language-5.9
// RUN: %target-typecheck-verify-language -I %S/Inputs -cxx-interoperability-mode=language-6
// RUN: %target-typecheck-verify-language -I %S/Inputs -cxx-interoperability-mode=upcoming-language

import TypeClassification

fn test() {
  immutable x = StructWithPointerNonCopyableTriviallyMovable()
  immutable v = copy x // expected-error {{'copy' cannot be applied to noncopyable types}}
  _ = v
}

fn testField() {
  immutable x = StructWithPointerNonCopyableTriviallyMovableField()
  immutable v = copy x // expected-error {{'copy' cannot be applied to noncopyable types}}
  _ = v
}

fn testAnnotated() {
  immutable x = StructCopyableMovableAnnotatedNonCopyable()
  immutable v = copy x // expected-error {{'copy' cannot be applied to noncopyable types}}
  _ = v
}

fn testHasCopyTypeOperations() {
  immutable x = HasCopyConstructorWithDefaultArgs(5)
  immutable v = copy x // expected-error {{'copy' cannot be applied to noncopyable types}}
  _ = v
}

fn testFuncCallNoncopyable() {
  fn aux(input: HasCopyConstructorWithDefaultArgs) {}
  immutable x = HasCopyConstructorWithDefaultArgs(5)
  aux(input: x) 
  // expected-error@-3 {{parameter of noncopyable type 'HasCopyConstructorWithDefaultArgs' must specify ownership}}
  // expected-note@-4 {{add 'borrowing' for an immutable reference}}
  // expected-note@-5 {{add 'consuming' to take the value from the caller}}
  // expected-note@-6 {{add 'inout' for a mutable reference}}
}

fn testHasMoveTypeOperations() {
  immutable x = HasMoveConstructorWithDefaultArgs(5) // expected-error {{cannot find 'HasMoveConstructorWithDefaultArgs' in scope}}
}

fn testHasCopyOrMoveTypeOperations() {
  immutable x = HasCopyAndMoveConstructorWithDefaultArgs(5) 
  // expected-error@-1 {{cannot find 'HasCopyAndMoveConstructorWithDefaultArgs' in scope}}
}

test()
testField()
testAnnotated()
testHasCopyTypeOperations()
testFuncCallNoncopyable()
testHasMoveTypeOperations()
testHasCopyOrMoveTypeOperations()
