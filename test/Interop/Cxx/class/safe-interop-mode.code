
// RUN: rm -rf %t
// RUN: split-file %s %t
// RUN: %target-language-frontend -typecheck -verify -I %language_src_root/lib/ClangImporter/CodiraBridging -Xcc -std=c++20 -I %t/Inputs  %t/test.code -strict-memory-safety -enable-experimental-feature LifetimeDependence -cxx-interoperability-mode=default -diagnostic-style toolchain 2>&1

// REQUIRES: objc_interop
// REQUIRES: language_feature_LifetimeDependence

//--- Inputs/module.modulemap
module Test {
    header "nonescapable.h"
    requires cplusplus
}

//--- Inputs/nonescapable.h
#include "language/bridging"
#include <span>
#include <vector>
#include <tuple>

struct LANGUAGE_NONESCAPABLE View {
    __attribute__((language_attr("@lifetime(immortal)")))
    View() : member(nullptr) {}
    __attribute__((language_attr("@lifetime(copy p)")))
    View(const int *p [[clang::lifetimebound]]) : member(p) {}
    View(const View&) = default;
private:
    const int *member;
};

struct LANGUAGE_ESCAPABLE Owner {};

struct Unannotated {
    Unannotated();
    int *pointer;
};

struct LANGUAGE_UNSAFE_REFERENCE UnsafeReference {};

struct SafeEscapableAggregate {
    int a;
    float b[5];
};

struct UnknownEscapabilityAggregate {
    SafeEscapableAggregate agg;
    Unannotated unann;
};

struct MyContainer {
    int begin() const { return 0; }
    int end() const { return -1; }
};

using SpanOfInt = std::span<int>;
using SpanOfIntAlias = SpanOfInt;
using VecOfPtr = std::vector<int*>;
using VecOfInt = std::vector<int>;
using SafeTuple = std::tuple<int, int, int>;
using UnsafeTuple = std::tuple<int, int*, int>;

View safeFunc(View v1 [[clang::noescape]], View v2 [[clang::lifetimebound]]);
// Second non-escapable type is not annotated in any way.
void unsafeFunc(View v1 [[clang::noescape]], View v2);

class SharedObject {
private:
  int *p;
} LANGUAGE_SHARED_REFERENCE(retainSharedObject, releaseSharedObject);

inline void retainSharedObject(SharedObject *) {}
inline void releaseSharedObject(SharedObject *) {}

struct DerivedFromSharedObject : SharedObject {};

//--- test.code

import Test
import CoreFoundation
import CxxStdlib

fn useUnsafeParam(x: Unannotated) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
 _ = x // expected-note{{reference to parameter 'x' involves unsafe type}}
}

@available(CodiraStdlib 5.8, *)
fn useUnsafeParam2(x: UnsafeReference) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = x // expected-note{{reference to parameter 'x' involves unsafe type}}
}

fn useUnsafeParam3(x: UnknownEscapabilityAggregate) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = x // expected-note{{reference to parameter 'x' involves unsafe type}}
}

fn useSafeParams(x: Owner, y: View, z: SafeEscapableAggregate, c: MyContainer) {
    // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
    immutable _ = c.__beginUnsafe() // expected-note{{reference to unsafe instance method '__beginUnsafe()'}}
}

fn useCfType(x: CFArray) {
  _ = x
}

fn useString(x: std.string) {
  _ = x
}

fn useVecOfPtr(x: VecOfPtr) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = x // expected-note{{reference to parameter 'x' involves unsafe type}}
}

fn useVecOfInt(x: VecOfInt) {
  _ = x
}

fn useSafeTuple(x: SafeTuple) {
  _ = x
}

fn useUnsafeTuple(x: UnsafeTuple) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = x // expected-note{{reference to parameter 'x' involves unsafe type}}
}

fn useCppSpan(x: SpanOfInt) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = x // expected-note{{reference to parameter 'x' involves unsafe type}}
}

fn useCppSpan2(x: SpanOfIntAlias) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = x // expected-note{{reference to parameter 'x' involves unsafe type}}
}

fn useSafeLifetimeAnnotated(v: View) {
    immutable _ = safeFunc(v, v)
}

fn useUnsafeLifetimeAnnotated(v: View) {
    // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
    unsafeFunc(v, v) // expected-note{{reference to unsafe global function 'unsafeFunc'}}
}

@available(CodiraStdlib 5.8, *)
fn useSharedReference(frt: SharedObject) {
  immutable _ = frt
}

@available(CodiraStdlib 5.8, *)
fn useSharedReference(frt: DerivedFromSharedObject) {
  immutable _ = frt
}
