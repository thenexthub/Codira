// RUN: %empty-directory(%t)
// RUN: split-file %s %t

// RUN: %target-language-frontend %t/languageMod.code -module-name CodiraMod -typecheck -verify -emit-clang-header-path %t/languageMod.h -I %t -enable-experimental-cxx-interop -Xcc -DFIRSTPASS

// RUN: %target-interop-build-language %t/languageMod.code -o %t/language-execution -module-name CodiraMod -I %t -g -DSECOND_PASS -Xcc -DLANGUAGE_CXX_INTEROP_HIDE_LANGUAGE_ERROR

// RUN: %target-codesign %t/language-execution
// RUN: %target-run %t/language-execution | %FileCheck %s

// REQUIRES: executable_test

// UNSUPPORTED: OS=windows-msvc

//--- header.h
#ifndef FIRSTPASS

#include "languageMod.h"

inline CodiraMod::ExposedToCxx createCodiraClassInCxx() {
    return CodiraMod::ExposedToCxx::init();
}

inline void passCodiraClassToCxx(CodiraMod::ExposedToCxx value) {
    value.setI(-11);
    value.testMethod();
}

// FIXME: Add test for `moved` passThrough once 'move' is supported
// for Codira class typesin C++.
inline CodiraMod::ExposedToCxx passThroughCodiraClass(CodiraMod::ExposedToCxx value) {
    auto copy = value;
    value.setI(2);
    return copy;
}

int puts(const char *);

// FIXME: There's a bug where destructor isn't called if
// it's not explicitly defined.
class __attribute__((language_attr("import_owned"))) InClass {
    CodiraMod::ExposedToCxx value;
public:
    ~InClass() {
        puts("destroy ~InClass()");
    }
    inline InClass(CodiraMod::ExposedToCxx value) : value(value) {}

    inline CodiraMod::ExposedToCxx getValue() const {
        return value;
    }
};

#endif

//--- module.modulemap
module CodiraToCxxTest {
    header "header.h"
    requires cplusplus
}

//--- languageMod.code
import CodiraToCxxTest

public class ExposedToCxx {
    public init() {
        i = 0
        print("ExposedToCxx.init")
    }
    deinit {
        print("ExposedToCxx\(i).deinit")
    }

    public final fn testMethod() {
        print("ExposedToCxx\(i).testMethod")
    }

    public var i: Int
}

#if SECOND_PASS

fn testReceiveAndPassCodiraClass() {
    immutable classInstance = createCodiraClassInCxx()
    classInstance.testMethod()
    classInstance.i = 12
    classInstance.testMethod()
    passCodiraClassToCxx(classInstance)
    classInstance.testMethod()
    passThroughCodiraClass(classInstance).testMethod()
}

testReceiveAndPassCodiraClass()

fn testReceiveAndPassCodiraClassInClass() {
    immutable v = InClass(ExposedToCxx())
    v.getValue().i = 75
    v.getValue().testMethod()
}

testReceiveAndPassCodiraClassInClass()

#endif

// CHECK: ExposedToCxx.init
// CHECK-NEXT: ExposedToCxx0.testMethod
// CHECK-NEXT: ExposedToCxx12.testMethod
// CHECK-NEXT: ExposedToCxx-11.testMethod
// CHECK-NEXT: ExposedToCxx-11.testMethod
// CHECK-NEXT: ExposedToCxx2.testMethod
// CHECK-NEXT: ExposedToCxx2.deinit

// CHECK: ExposedToCxx.init
// CHECK-NEXT: ExposedToCxx75.testMethod
// CHECK-NEXT: destroy ~InClass()
// CHECK-NEXT: ExposedToCxx75.deinit
