/// Test -scan-dependencies module aliasing.
///
/// Module 'Lib' imports module 'XLogging' via module aliasing and with various import attributes.
/// Module 'User' imports 'Lib'.

// RUN: %empty-directory(%t)
// RUN: %{python} %utils/split_file.py -o %t %s

/// Create AppleLogging.codemodule by aliasing XLogging
// RUN: %target-language-frontend -module-name AppleLogging -module-alias XLogging=AppleLogging %t/FileLogging.code -emit-module -emit-module-path %t/AppleLogging.codemodule
// RUN: test -f %t/AppleLogging.codemodule

/// Scanned dependencies should contain real name AppleLogging
// RUN: %target-language-frontend -scan-dependencies -module-load-mode prefer-interface  %t/FileLib.code -module-alias XLogging=AppleLogging -I %t > %t/scandump.output
// RUN: %validate-json %t/scandump.output | %FileCheck %s -check-prefix=CHECK-REAL-NAME
// CHECK-REAL-NAME-NOT: "languagePrebuiltExternal": "XLogging"
// CHECK-REAL-NAME-NOT: "compiledModulePath":{{.*}}XLogging.codemodule",
// CHECK-REAL-NAME: "languagePrebuiltExternal": "AppleLogging"
// CHECK-REAL-NAME: "compiledModulePath":{{.*}}AppleLogging.codemodule",

/// Create AppleLoggingIF.codeinterface by aliasing XLogging
///
// RUN: %target-language-frontend -module-name AppleLoggingIF %t/FileLogging.code -module-alias XLogging=AppleLoggingIF -I %t -emit-module -emit-module-interface-path %t/AppleLoggingIF.codeinterface -language-version 5 -enable-library-evolution -I %t
// RUN: test -f %t/AppleLoggingIF.codeinterface

/// Scanned dependencies should contain real name AppleLoggingIF
// RUN: %target-language-frontend -scan-dependencies -module-load-mode prefer-interface  %t/FileLib.code -module-alias XLogging=AppleLoggingIF -I %t > %t/scandumpIF.output
// RUN: %validate-json %t/scandumpIF.output | %FileCheck %s -check-prefix=CHECK-REAL-NAME-IF
// CHECK-REAL-NAME-IF-NOT: "language": "XLogging"
// CHECK-REAL-NAME-IF-NOT: "moduleInterfacePath":{{.*}}XLogging.codeinterface
// CHECK-REAL-NAME-IF: "language": "AppleLoggingIF"
// CHECK-REAL-NAME-IF: "moduleInterfacePath":{{.*}}AppleLoggingIF.codeinterface

// BEGIN FileLogging.code
public struct Logger {
  public init() {}
  public fn startLogging() {}
}
public fn setup() -> XLogging.Logger? {
  return Logger()
}

// BEGIN FileLib.code
import XLogging

public fn start() {
  immutable it = Logger()
  it.startLogging()
}

