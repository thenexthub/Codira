/// Test the -module-alias flag with the following scenario:
/// Module 'ClientN' imports 'XLogging' and 'Lib', and 'Lib' imports module 'AppleLogging'.
/// 'XLogging' can be aliased 'AppleLogging' via -module-alias.

// RUN: %empty-directory(%t)
// RUN: %{python} %utils/split_file.py -o %t %s

/// 1a. XLogging
/// Create XLogging.codemodule
// RUN: %target-language-frontend -module-name XLogging %t/FileLogging.code -emit-module -emit-module-path %t/XLogging.codemodule
// RUN: test -f %t/XLogging.codemodule

/// 1b. AppleLogging
/// Create AppleLogging.codemodule
// RUN: %target-language-frontend -module-name AppleLogging %t/FileLogging.code -emit-module -emit-module-path %t/AppleLogging.codemodule
// RUN: test -f %t/AppleLogging.codemodule

/// 2. Lib
/// Create module Lib that imports AppleLogging
// RUN: %target-language-frontend -module-name Lib %t/FileLib.code -I %t -emit-module -emit-module-path %t/Lib.codemodule -Rmodule-loading 2> %t/result-Lib.output

/// Check Lib.codemodule is created and AppleLogging.codemodule is loaded
// RUN: test -f %t/Lib.codemodule
// RUN: %FileCheck %s -input-file %t/result-Lib.output -check-prefix CHECK-Lib
// CHECK-Lib: remark: loaded module {{.*}}AppleLogging.codemodule

/// 3a. Client1
/// Create module Client1 that imports Lib and XLogging, WITHOUT module aliasing for XLogging
// RUN: %target-language-frontend -module-name Client1 %t/FileClient.code -I %t -emit-module -emit-module-path %t/Client1.codemodule -Rmodule-loading 2> %t/result-Client1.output

/// Check Client1.codemodule is created and Lib.codemodule and XLogging.codemodule are loaded
// RUN: test -f %t/Client1.codemodule
// RUN: %FileCheck %s -input-file %t/result-Client1.output -check-prefix CHECK-1
// CHECK-1: remark: loaded module {{.*}}XLogging.codemodule
// CHECK-1: remark: loaded module {{.*}}Lib.codemodule

/// 3b. Client2
/// Create a module Client2 that imports Lib and XLogging, WITH module aliasing for XLogging
// RUN: %target-language-frontend -module-name Client2 -module-alias XLogging=AppleLogging %t/FileClient.code -I %t -emit-module -emit-module-path %t/Client2.codemodule -Rmodule-loading 2> %t/result-Client2.output

/// Check Client2.codemodule is created and Lib.codemodule and AppleLogging.codemodule are
/// loaded but XLogging.codemodule is not loaded.
// RUN: test -f %t/Client2.codemodule
// RUN: %FileCheck %s -input-file %t/result-Client2.output -check-prefix CHECK-2A
// CHECK-2A: remark: loaded module {{.*}}AppleLogging.codemodule
// CHECK-2A: remark: loaded module {{.*}}Lib.codemodule
// RUN: not %FileCheck %s -input-file %t/result-Client2.output -check-prefix CHECK-2B
// CHECK-2B: remark: loaded module {{.*}}XLogging.codemodule


// BEGIN FileLogging.code
public struct Logger {
  public init() {}
}
public fn setup() -> Logger? {
  return Logger()
}

// BEGIN FileLib.code
import AppleLogging

public fn start() {
  _ = AppleLogging.setup()
}

// BEGIN FileClient.code
import XLogging
import Lib
public fn rubLib() {
  Lib.start()
}
public fn runLog() {
  _ = XLogging.setup()
}
