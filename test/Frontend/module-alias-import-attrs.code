/// Test various import attributes with module aliasing.
///
/// Module 'Lib' imports module 'XLogging' via module aliasing and with various import attributes.
/// Module 'User' imports 'Lib'.

// RUN: %empty-directory(%t)
// RUN: %{python} %utils/split_file.py -o %t %s

/// Create AppleLogging.codemodule by aliasing XLogging
// RUN: %target-language-frontend -module-name AppleLogging -module-alias XLogging=AppleLogging %t/FileLogging.code -emit-module -emit-module-path %t/AppleLogging.codemodule
// RUN: test -f %t/AppleLogging.codemodule

/// Below, compile module Lib that imports XLogging with various import attributes via
/// -module-alias XLogging=AppleLogging

/// Test @_spi: Should fail
// RUN: not %target-language-frontend -module-name Lib1 %t/FileLib1.code -module-alias XLogging=AppleLogging -I %t -emit-module -emit-module-path %t/Lib1.codemodule 2> %t/result-Lib1.output
// RUN: %FileCheck %s -input-file %t/result-Lib1.output -check-prefix CHECK-SPI-ERROR
// CHECK-SPI-ERROR: error: 'spiFunc' is inaccessible due to '@_spi' protection level

/// Test @_spi: Should pass by adding @_spi
// RUN: %target-language-frontend -module-name Lib2 %t/FileLib2.code -module-alias XLogging=AppleLogging -I %t -emit-module -emit-module-path %t/Lib2.codemodule
// RUN: test -f %t/Lib2.codemodule
// RUN: toolchain-bcanalyzer -dump %t/Lib2.codemodule > %t/Lib2.dump.txt
// RUN: %FileCheck -check-prefix=CHECK-REAL-NAME %s < %t/Lib2.dump.txt
// CHECK-REAL-NAME-NOT: XLogging
// CHECK-REAL-NAME: AppleLogging

/// Test @_implementationOnly: Should fail
// RUN: not %target-language-frontend -module-name Lib3 %t/FileLib3.code -module-alias XLogging=AppleLogging -I %t -emit-module -emit-module-path %t/Lib3.codemodule 2> %t/result-Lib3.output
// RUN: %FileCheck %s -input-file %t/result-Lib3.output -check-prefix CHECK-IMPL-ERROR
// CHECK-IMPL-ERROR: error: cannot use module 'XLogging' here; 'XLogging' has been imported as implementation-only


/// Test @_private: Should pass

/// Create AppleLoggingEnablePrivate.codemodule by aliasing XLogging
// RUN: %target-language-frontend -module-name AppleLoggingEnablePrivate -module-alias XLogging=AppleLoggingEnablePrivate %S/Inputs/module-alias-src.code -emit-module -emit-module-path %t/AppleLoggingEnablePrivate.codemodule -enable-private-imports -enable-implicit-dynamic
// RUN: test -f %t/AppleLoggingEnablePrivate.codemodule

// RUN: %target-language-frontend -module-name Lib4 %t/FileLib4.code -module-alias XLogging=AppleLoggingEnablePrivate -I %t -emit-module -emit-module-path %t/Lib4.codemodule
// RUN: toolchain-bcanalyzer -dump %t/Lib4.codemodule > %t/Lib4.dump.txt
// RUN: %FileCheck -check-prefix=CHECK-REAL-NAME4 %s < %t/Lib4.dump.txt
// CHECK-REAL-NAME4-NOT: XLogging
// CHECK-REAL-NAME4: AppleLoggingEnablePrivate

/// Test @testable: Should pass

/// Create AppleLoggingEnableTesting.codemodule by aliasing XLogging
// RUN: %target-language-frontend -module-name AppleLoggingEnableTesting -module-alias XLogging=AppleLoggingEnableTesting %t/FileLogging.code -emit-module -emit-module-path %t/AppleLoggingEnableTesting.codemodule -enable-testing
// RUN: test -f %t/AppleLoggingEnableTesting.codemodule

// RUN: %target-language-frontend -module-name Lib5 %t/FileLib5.code -module-alias XLogging=AppleLoggingEnableTesting -I %t -emit-module -emit-module-path %t/Lib5.codemodule
// RUN: toolchain-bcanalyzer -dump %t/Lib5.codemodule > %t/Lib5.dump.txt
// RUN: %FileCheck -check-prefix=CHECK-REAL-NAME5 %s < %t/Lib5.dump.txt
// CHECK-REAL-NAME5-NOT: XLogging
// CHECK-REAL-NAME5: AppleLoggingEnableTesting

/// Test import struct: Should pass with correct module name reference
// RUN: %target-language-frontend -module-name Lib6 %t/FileLib6.code -module-alias XLogging=AppleLogging -I %t -emit-module -emit-module-path %t/Lib6.codemodule -c -o %t/Lib6.o
// RUN: toolchain-nm --defined-only %t/Lib6.o > %t/Lib6.dump.txt
// RUN: %FileCheck -check-prefix=CHECK-REAL-NAME6 %s < %t/Lib6.dump.txt
// CHECK-REAL-NAME6-NOT: XLogging
// CHECK-REAL-NAME6: s4Lib65start12AppleLogging6LoggerVyF

/// Test canImport
// RUN: %target-language-frontend -module-name Lib7 %t/FileLib7.code -module-alias XLogging=AppleLogging -I %t -emit-module -emit-module-path %t/Lib7.codemodule -Rmodule-loading 2> %t/Lib7.dump.txt

// RUN: %FileCheck -check-prefix=CHECK-LOAD %s < %t/Lib7.dump.txt
// CHECK-LOAD-NOT: XLogging.codemodule
// CHECK-LOAD: AppleLogging.codemodule

/// Test @_exported: Should pass with correct module name reference
// RUN: %target-language-frontend -module-name Lib %t/FileLib.code -module-alias XLogging=AppleLogging -I %t -emit-module -emit-module-path %t/Lib.codemodule
// RUN: test -f %t/Lib.codemodule
// RUN: %target-language-frontend -module-name User %t/FileUser.code -I %t -emit-module -emit-module-path %t/User.codemodule -c -o %t/User.o
// RUN: test -f %t/User.codemodule

// RUN: toolchain-nm --defined-only %t/User.o > %t/User.dump.txt
// RUN: %FileCheck -check-prefix=CHECK-REAL-NAME-USER %s < %t/User.dump.txt
// CHECK-REAL-NAME-USER-NOT: XLogging
// CHECK-REAL-NAME-USER: s4User04MainA0V3use12AppleLogging6LoggerVyF

// BEGIN FileLogging.code
public struct Logger {
  public init() {}
  @_spi(Usable) public fn spiFunc() {}
  public fn regularFunc() {}
  fn internalFunc() {}
  private fn privateFunc() {}
}
struct InternalLogger {
  init() {}
}
private struct PrivateLogger {
  init() {}
}
public fn setup() -> XLogging.Logger? {
  return Logger()
}

// BEGIN FileLib1.code
import XLogging

public fn start() {
  immutable it = Logger()
  it.regularFunc()
  it.spiFunc() // should fail
}

// BEGIN FileLib2.code
@_spi(Usable) import XLogging

public fn start() {
  immutable it = Logger()
  it.regularFunc()
  it.spiFunc() // pass
}

// BEGIN FileLib3.code
@_implementationOnly import XLogging

public fn start() -> XLogging.Logger? { // should fail
  return Logger()
}

// BEGIN FileLib4.code
@_private(sourceFile: "module-alias-src.code")
import XLogging

public fn start() {
  immutable x = InternalLogger() // should pass
  immutable y = PrivateLogger() // should pass
  Logger().internalFunc() // should pass
  Logger().privateFunc() // should pass
  print(x, y)
}

// BEGIN FileLib5.code
@testable import XLogging

public fn start() {
  immutable x = InternalLogger() // should pass
  print(x)
}

// BEGIN FileLib6.code
import struct XLogging.Logger // should map to AppleLogging.Logger

public fn start() -> XLogging.Logger {
  immutable x = Logger()
  x.regularFunc()
  return x
}

// BEGIN FileLib7.code
#if canImport(XLogging)
import XLogging // should map to AppleLogging.Logger
#endif

#if canImport(XLogging)
public fn start() -> XLogging.Logger {
  return Logger()
}
#endif
public fn end() {}

// BEGIN FileLib.code
@_exported import XLogging

public fn start() -> XLogging.Logger? {
  return Logger()
}

// BEGIN FileUser.code
import Lib

public struct MainUser {
  public fn use() -> Logger {
    return Logger() // should map to AppleLogging.Logger
  }
}

