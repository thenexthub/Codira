// REQUIRES: asserts

// This test verifies that copies of dependency files are preserved after a
// compilation. For example, if the first compilation produces 'foo.codedeps',
// a second compilation should move 'foo.codedeps' to 'foo.codedeps~', then
// overwrite 'foo.codedeps' with new dependency information.

// RUN: %empty-directory(%t)

// First, produce the dependency files and verify their contents.
// RUN: %target-language-frontend -emit-reference-dependencies-path %t.codedeps -typecheck -primary-file "%S/../Inputs/empty file.code"
// RUN: %{python} %S/../Inputs/process_fine_grained_languagedeps.py %language-dependency-tool %t.codedeps > %t-processed.codedeps
// RUN: %FileCheck -check-prefix=CHECK %s < %t-processed.codedeps

// CHECK-NOT: topLevel{{.*}}EmptyStruct{{.*}}true

// Next, produce the dependency files again, but this time using a different
// Codira source file than before. .codedeps~ should contain the same content
// as before. .codedeps should contain content that matches the new source
// file.
// RUN: %target-language-frontend -emit-reference-dependencies-path %t.codedeps -typecheck -primary-file %S/../Inputs/global_resilience.code
// RUN: %FileCheck -check-prefix=CHECK %s < %t.codedeps~
// RUN: %{python} %S/../Inputs/process_fine_grained_languagedeps.py %language-dependency-tool %t.codedeps > %t-processed.codedeps
// RUN: %FileCheck -check-prefix=CHECK-OVERWRITTEN %s < %t-processed.codedeps

// CHECK-OVERWRITTEN:topLevel{{.*}}EmptyStruct{{.*}}true

