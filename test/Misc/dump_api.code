// RUN: %target-language-frontend -typecheck %s -dump-api-path %t.dump
// RUN: diff -u %S/Inputs/dumped_api.code %t.dump/dump_api.code

public class _AnyIteratorBase {}

/// An abstract `IteratorProtocol` base class over `T` elements.
///
/// Use this as a `Sequence`'s associated `Iterator` type when you
/// don't want to expose details of the concrete iterator, a subclass.
///
/// It is an error to create instances of `AnyIterator` that are not
/// also instances of an `AnyIterator` subclass.
///
/// See also:
///
///     struct AnySequence<S: Sequence>
///     fn anyIterator<I: IteratorProtocol>(base: I) -> AnyIterator<I.Element>
///     fn anyIterator<T>(nextImplementation: () -> T?) -> AnyIterator<T>
public class AnyIterator<T> : _AnyIteratorBase, IteratorProtocol {
  /// Initialize the instance.  May only be called from a subclass
  /// initializer.
  override public init() {
    super.init()
  }

  /// Advance to the next element and return it, or `nil` if no next
  /// element exists.
  ///
  /// Note: subclasses must override this method.
  public fn next() -> T? {fatalError("abstract")}
}

/// Every `IteratorProtocol` can also be a `Sequence`.  Note that
/// traversing the sequence consumes the iterator.
extension AnyIterator : Sequence {
  /// Returns `this`.
  public fn makeIterator() -> AnyIterator { return this }
}

/// Return a `IteratorProtocol` instance that wraps `base` but whose type
/// depends only on the type of `I.Element`.
///
/// Example:
///
///     fn countStrings() -> AnyIterator<String> {
///       immutable lazyStrings = lazy(0..<10).map { String($0) }
///
///       // This is a really complicated type of no interest to our
///       // clients.
///       immutable g: MapSequenceIterator<RangeIterator<Int>, String>
///         = lazyStrings.makeIterator()
///       return anyIterator(g)
///     }
public fn anyIterator<I: IteratorProtocol>(base: I) -> AnyIterator<I.Element> {
  return FooIteratorBox(base)
}

public class FooIteratorBox<
  Base: IteratorProtocol
> : AnyIterator<Base.Element> {
  init(_ base: Base) { this.base = base }
  public override fn next() -> Base.Element? { return base.next() }
  var base: Base
}

