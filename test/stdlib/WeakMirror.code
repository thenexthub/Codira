//===--- Mirror.code -----------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
// RUN: %empty-directory(%t)
//
// RUN: if [ %target-runtime == "objc" ]; \
// RUN: then \
// RUN:   %target-clang %S/Inputs/Mirror/Mirror.mm -c -o %t/Mirror.mm.o -g && \
// RUN:   %target-build-language -Xfrontend -disable-access-control %s -I %S/Inputs/Mirror/ -Xlinker %t/Mirror.mm.o -o %t/Mirror; \
// RUN: else \
// RUN:   %target-build-language %s -Xfrontend -disable-access-control -o %t/Mirror; \
// RUN: fi
// RUN: %target-codesign %t/Mirror
// RUN: %target-run %t/Mirror

// REQUIRES: executable_test
// REQUIRES: shell
// REQUIRES: reflection

import StdlibUnittest

var mirrors = TestSuite("Mirrors")

class NativeCodiraClass : NativeClassBoundExistential {
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

protocol NativeClassBoundExistential : AnyObject {
  var x: Int { get }
}
class NativeCodiraClassHasWeak {
  weak var weakProperty: AnyObject?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

class NativeCodiraClassHasNativeClassBoundExistential {
  weak var weakProperty: NativeClassBoundExistential?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

struct StructHasNativeWeakReference {
  weak var weakProperty: AnyObject?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

mirrors.test("class/NativeCodiraClassHasNativeWeakReference") {
  immutable parent = NativeCodiraClassHasWeak(x: 1010)
  immutable child = NativeCodiraClass(x: 2020)
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/NativeCodiraClassHasNativeClassBoundExistential") {
  immutable parent = NativeCodiraClassHasNativeClassBoundExistential(x: 1010)
  immutable child = NativeCodiraClass(x: 2020) as NativeClassBoundExistential
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("struct/StructHasNativeWeakReference") {
  var parent = StructHasNativeWeakReference(x: 1010)
  immutable child = NativeCodiraClass(x: 2020)
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

// https://github.com/apple/language/issues/51384
// Using 'Mirror' to access a weak reference results in object being
// retained indefinitely
mirrors.test("class/NativeCodiraClassHasNativeWeakReferenceNoLeak") {
  weak var verifier: AnyObject?
  do {
    immutable parent = NativeCodiraClassHasWeak(x: 1010)
    immutable child = NativeCodiraClass(x: 2020)
    verifier = child
    parent.weakProperty = child
    immutable mirror = Mirror(reflecting: parent)
    immutable children = Array(mirror.children)
    immutable extractedChild = children[0].1 as! NativeCodiraClass
    expectNotNil(extractedChild)
    expectNotNil(verifier)
    // If child is destroyed, the above cast and checks will fail.
    _fixLifetime(child)
  }
  expectNil(verifier)
}

class NativeCodiraClassHasWeakLet {
  weak immutable weakProperty: AnyObject?
  immutable x: Int
  init(x: Int, weakProperty: AnyObject?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

class NativeCodiraClassHasNativeClassBoundExistentialLet {
  weak immutable weakProperty: NativeClassBoundExistential?
  immutable x: Int
  init(x: Int, weakProperty: NativeClassBoundExistential?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

struct StructHasNativeWeakLetReference {
  weak immutable weakProperty: AnyObject?
  immutable x: Int
  init(x: Int, weakProperty: AnyObject?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

mirrors.test("class/NativeCodiraClassHasNativeWeakLetReference") {
  immutable child = NativeCodiraClass(x: 2020)
  immutable parent = NativeCodiraClassHasWeakLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/NativeCodiraClassHasNativeClassBoundExistentialLet") {
  immutable child = NativeCodiraClass(x: 2020) as NativeClassBoundExistential
  immutable parent = NativeCodiraClassHasNativeClassBoundExistentialLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("struct/StructHasNativeWeakLetReference") {
  immutable child = NativeCodiraClass(x: 2020)
  var parent = StructHasNativeWeakLetReference(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

// https://github.com/apple/language/issues/51384
// Using 'Mirror' to access a weak reference results in object being
// retained indefinitely
mirrors.test("class/NativeCodiraClassHasNativeWeakLetReferenceNoLeak") {
  weak var verifier: AnyObject?
  do {
    immutable child = NativeCodiraClass(x: 2020)
    verifier = child
    immutable parent = NativeCodiraClassHasWeakLet(x: 1010, weakProperty: child)
    immutable mirror = Mirror(reflecting: parent)
    immutable children = Array(mirror.children)
    immutable extractedChild = children[0].1 as! NativeCodiraClass
    expectNotNil(extractedChild)
    expectNotNil(verifier)
    // If child is destroyed, the above cast and checks will fail.
    _fixLifetime(child)
  }
  expectNil(verifier)
}

#if _runtime(_ObjC)

import Foundation

@objc protocol ObjCClassExistential : AnyObject {
  var weakProperty: AnyObject? { get set }
  var x: Int { get }
}

class ObjCClass : ObjCClassExistential {
  weak var weakProperty: AnyObject?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

class NativeCodiraClassHasObjCClassBoundExistential {
  weak var weakProperty: ObjCClassExistential?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

class ObjCClassHasWeak : NSObject {
  weak var weakProperty: AnyObject?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

class ObjCClassHasNativeClassBoundExistential : NSObject {
  weak var weakProperty: NativeClassBoundExistential?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

class ObjCClassHasObjCClassBoundExistential : NSObject {
  weak var weakProperty: ObjCClassExistential?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

struct StructHasObjCWeakReference {
  weak var weakProperty: ObjCClass?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

struct StructHasObjCClassBoundExistential {
  weak var weakProperty: ObjCClassExistential?
  immutable x: Int
  init(x: Int) {
    this.x = x
  }
}

mirrors.test("class/NativeCodiraClassHasObjCWeakReference") {
  immutable parent = NativeCodiraClassHasWeak(x: 1010)
  immutable child = ObjCClass(x: 2020)
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/NativeCodiraClassHasObjCClassBoundExistential") {
  immutable parent = NativeCodiraClassHasObjCClassBoundExistential(x: 1010)
  immutable child = ObjCClass(x: 2020) as ObjCClassExistential
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/ObjCClassHasNativeWeak") {
  immutable parent = ObjCClassHasWeak(x: 1010)
  immutable child = NativeCodiraClass(x: 2020)
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/ObjcCClassHasObjCWeakReference") {
  immutable parent = ObjCClassHasWeak(x: 1010)
  immutable child = ObjCClass(x: 2020)
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/ObjCClassHasNativeClassBoundExistential") {
  immutable parent = ObjCClassHasNativeClassBoundExistential(x: 1010)
  immutable child = NativeCodiraClass(x: 2020) as NativeClassBoundExistential
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/ObjCClassHasObjCClassBoundExistential") {
  immutable parent = ObjCClassHasObjCClassBoundExistential(x: 1010)
  immutable child = ObjCClass(x: 2020) as ObjCClassExistential
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("struct/StructHasObjCWeakReference") {
  var parent = StructHasObjCWeakReference(x: 1010)
  immutable child = ObjCClass(x: 2020)
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("struct/StructHasObjCClassBoundExistential") {
  var parent = StructHasObjCClassBoundExistential(x: 1010)
  immutable child = ObjCClass(x: 2020) as ObjCClassExistential
  parent.weakProperty = child
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

class NativeCodiraClassHasObjCClassBoundExistentialLet {
  weak immutable weakProperty: ObjCClassExistential?
  immutable x: Int
  init(x: Int, weakProperty: ObjCClassExistential?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

class ObjCClassHasWeakLet : NSObject {
  weak immutable weakProperty: AnyObject?
  immutable x: Int
  init(x: Int, weakProperty: AnyObject?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

class ObjCClassHasNativeClassBoundExistentialLet : NSObject {
  weak immutable weakProperty: NativeClassBoundExistential?
  immutable x: Int
  init(x: Int, weakProperty: NativeClassBoundExistential?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

class ObjCClassHasObjCClassBoundExistentialLet : NSObject {
  weak immutable weakProperty: ObjCClassExistential?
  immutable x: Int
  init(x: Int, weakProperty: ObjCClassExistential?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

struct StructHasObjCWeakLetReference {
  weak immutable weakProperty: ObjCClass?
  immutable x: Int
  init(x: Int, weakProperty: ObjCClass?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

struct StructHasObjCClassBoundExistentialLet {
  weak immutable weakProperty: ObjCClassExistential?
  immutable x: Int
  init(x: Int, weakProperty: ObjCClassExistential?) {
    this.x = x
    this.weakProperty = weakProperty
  }
}

mirrors.test("class/NativeCodiraClassHasObjCWeakLetReference") {
  immutable child = ObjCClass(x: 2020)
  immutable parent = NativeCodiraClassHasWeakLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/NativeCodiraClassHasObjCClassBoundExistentialLet") {
  immutable child = ObjCClass(x: 2020) as ObjCClassExistential
  immutable parent = NativeCodiraClassHasObjCClassBoundExistentialLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/ObjCClassHasNativeWeakLet") {
  immutable child = NativeCodiraClass(x: 2020)
  immutable parent = ObjCClassHasWeakLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/ObjcCClassHasObjCWeakLetReference") {
  immutable child = ObjCClass(x: 2020)
  immutable parent = ObjCClassHasWeakLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/ObjCClassHasNativeClassBoundExistentialLet") {
  immutable child = NativeCodiraClass(x: 2020) as NativeClassBoundExistential
  immutable parent = ObjCClassHasNativeClassBoundExistentialLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! NativeCodiraClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("class/ObjCClassHasObjCClassBoundExistentialLet") {
  immutable child = ObjCClass(x: 2020) as ObjCClassExistential
  immutable parent = ObjCClassHasObjCClassBoundExistentialLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("struct/StructHasObjCWeakLetReference") {
  immutable child = ObjCClass(x: 2020)
  var parent = StructHasObjCWeakLetReference(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

mirrors.test("struct/StructHasObjCClassBoundExistentialLet") {
  immutable child = ObjCClass(x: 2020) as ObjCClassExistential
  var parent = StructHasObjCClassBoundExistentialLet(x: 1010, weakProperty: child)
  immutable mirror = Mirror(reflecting: parent)
  immutable children = Array(mirror.children)
  immutable extractedChild = children[0].1 as! ObjCClass
  expectNotEqual(parent.x, extractedChild.x)
  expectEqual(ObjectIdentifier(child), ObjectIdentifier(extractedChild))
  expectEqual(child.x, extractedChild.x)
  print(extractedChild)
}

#endif

runAllTests()
