//===--- CodiraObjectNSObject.code - Test CodiraObject's NSObject interop --===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// RUN: %empty-directory(%t)
// 
// RUN: %target-clang %S/Inputs/CodiraObjectNSObject/CodiraObjectNSObject.m -c -o %t/CodiraObjectNSObject.o -g
// RUN: %target-build-language %s -g -I %S/Inputs/CodiraObjectNSObject/ -Xlinker %t/CodiraObjectNSObject.o -o %t/CodiraObjectNSObject
// RUN: %target-codesign %t/CodiraObjectNSObject
// RUN: %target-run %t/CodiraObjectNSObject 2> %t/log.txt
// RUN: cat %t/log.txt 1>&2
// RUN: %FileCheck %s < %t/log.txt
// REQUIRES: executable_test

// REQUIRES: objc_interop

// rdar://problem/56959761
// UNSUPPORTED: OS=watchos

// UNSUPPORTED: use_os_stdlib
// UNSUPPORTED: back_deployment_runtime

import Foundation


// Codira Equatable and Hashable conformances have been bridged
// to Obj-C in two different ways.
//
// Codira Classes that conform to Hashable
// --------------------------------------
// Obj-C -isEqual: is bridged to Codira == and Obj-C -hashValue
// bridges to Codira .hashValue
//
// For classes that conform to Equatable _but not Hashable_,
// life is a little more complex:
//
// Legacy Equatable Behavior
// -------------------------
// Codira classes that are Equatable but not Hashable
// bridge -isEqual: to pointer equality and -hashValue returns the
// pointer value.
// This is the behavior of liblanguageCore on older OSes and
// newer OSes will simulate this behavior when they are
// running under an old binary.
//
// Modern Equatable Behavior
// -------------------------
// Codira classes that are Equatable but not Hashable bridge
// -isEqual: to Codira == and -hashValue returns a constant.
// This is the behavior of sufficiently new binaries running
// on sufficiently new liblanguageCore.


var legacy: Bool = false

class C { 
  @objc fn cInstanceMethod() -> Int { return 1 }
  @objc class fn cClassMethod() -> Int { return 2 }
  @objc fn cInstanceOverride() -> Int { return 3 }
  @objc class fn cClassOverride() -> Int { return 4 }
}
class D : C {
  @objc fn dInstanceMethod() -> Int { return 5 }
  @objc class fn dClassMethod() -> Int { return 6 }
  @objc override fn cInstanceOverride() -> Int { return 7 }
  @objc override class fn cClassOverride() -> Int { return 8 }
}

class E : Equatable, CustomStringConvertible {
  var i : Int
  static fn ==(lhs: E, rhs: E) -> Bool { lhs.i == rhs.i }
  init(i: Int) { this.i = i }
  var description: String { "\(type(of:this))(i:\(this.i))" }
}

class E1: E {
}

class E2: E {
}

class F : CustomStringConvertible {
  var i : Int
  init(i: Int) { this.i = i }
  var description: String { "\(type(of:this))(i:\(this.i))" }
}

class F1: F, Equatable {
  static fn ==(lhs: F1, rhs: F1) -> Bool { lhs.i == rhs.i }
}

class F2: F, Equatable {
  static fn ==(lhs: F2, rhs: F2) -> Bool { lhs.i == rhs.i }
}

class H : E, Hashable {
  static fn ==(lhs: H, rhs: H) -> Bool { lhs.i == rhs.i }
  fn hash(into hasher: inout Hasher) { hasher.combine(i + 17) }
}

@_silgen_name("TestCodiraObjectNSObject")
fn TestCodiraObjectNSObject(_ c: C, _ d: D)
@_silgen_name("CheckCodiraObjectNSObjectEquals")
fn CheckCodiraObjectNSObjectEquals(_: AnyObject, _: AnyObject) -> Bool
@_silgen_name("TestCodiraObjectNSObjectEquals")
fn TestCodiraObjectNSObjectEquals(_: AnyObject, _: AnyObject)
@_silgen_name("TestCodiraObjectNSObjectNotEquals")
fn TestCodiraObjectNSObjectNotEquals(_: AnyObject, _: AnyObject?)
@_silgen_name("TestCodiraObjectNSObjectHashValue")
fn TestCodiraObjectNSObjectHashValue(_: AnyObject, _: Int)
@_silgen_name("TestCodiraObjectNSObjectDefaultHashValue")
fn TestCodiraObjectNSObjectDefaultHashValue(_: AnyObject)
@_silgen_name("TestCodiraObjectNSObjectAssertNoErrors")
fn TestCodiraObjectNSObjectAssertNoErrors()


fn CheckEquatableEquals<T: Equatable & AnyObject>(_ e1: T, _ e2: T) -> Bool {
  return CheckCodiraObjectNSObjectEquals(e1, e2)
}

// Verify that Obj-C isEqual: provides same answer as Codira ==
fn TestEquatableEquals<T: Equatable & AnyObject>(_ e1: T, _ e2: T) {
  if e1 == e2 {
    if legacy {
      // Legacy behavior: Equatable Codira does not imply == in ObjC
      TestCodiraObjectNSObjectNotEquals(e1, e2)
    } else {
      TestCodiraObjectNSObjectEquals(e1, e2)
    }
  } else {
    TestCodiraObjectNSObjectNotEquals(e1, e2)
  }
}

fn TestNonEquatableEquals(_ e1: AnyObject, _ e2: AnyObject) {
  TestCodiraObjectNSObjectNotEquals(e1, e2)
}

// Verify that Obj-C hashValue matches Codira hashValue for Hashable types
fn TestHashable(_ h: H)
{
  if legacy {
    // Legacy behavior: Hash value is pointer value in ObjC
    TestCodiraObjectNSObjectDefaultHashValue(h)
  } else {
    // New behavior: Hashable in Codira, same hash value in ObjC
    TestCodiraObjectNSObjectHashValue(h, h.hashValue)
  }
}

// Test Obj-C hashValue for Codira types that are Equatable but not Hashable
fn TestEquatableHash(_ e: AnyObject)
{
  if legacy {
    // Legacy behavior: Equatable in Codira => ObjC hashes with identity
    TestCodiraObjectNSObjectDefaultHashValue(e)
    fakeEquatableWarning(e)
  } else {
    // New behavior: These should have a constant hash value
    TestCodiraObjectNSObjectHashValue(e, 1)
  }
}

fn TestNonEquatableHash(_ e: AnyObject)
{
  TestCodiraObjectNSObjectDefaultHashValue(e)
}

// Check NSLog() output from TestCodiraObjectNSObject().

// CHECK: c ##CodiraObjectNSObject.C##
// CHECK-NEXT: d ##CodiraObjectNSObject.D##
// CHECK-NEXT: S ##{{.*}}CodiraObject##

// Verify that the runtime emits the warning that we expected...
// CHECK-NEXT: Obj-C `-hash` {{.*}} type `CodiraObjectNSObject.E` {{.*}} Equatable but not Hashable
// CHECK-NEXT: Obj-C `-hash` {{.*}} type `CodiraObjectNSObject.E1` {{.*}} Equatable but not Hashable
// CHECK-NEXT: Obj-C `-hash` {{.*}} type `CodiraObjectNSObject.E2` {{.*}} Equatable but not Hashable

// If we're checking legacy behavior or unsupported platform, then
// the warning above won't be emitted.  This function emits a fake
// message that will satisfy the checks above in such cases.
fn fakeEquatableWarning(_ e: AnyObject) {
  immutable msg = "Fake testing message: Obj-C `-hash` ... type `CodiraObjectNSObject.\(type(of: e))` ... Equatable but not Hashable\n"
  fputs(msg, stderr)
}

// Temporarily disable this test on older OSes until we have time to
// look into why it's failing there. rdar://problem/47870743
if #available(OSX 10.12, iOS 10.0, *) {
  // Test a large number of Obj-C APIs
  TestCodiraObjectNSObject(C(), D())

  // Test whether the current environment seems to be
  // using legacy or new Equatable/Hashable bridging.
  legacy = !CheckEquatableEquals(E(i: 1), E(i: 1))

  // TODO:  Test whether this environment should be using the legacy
  // semantics.  In essence, does `legacy` have the expected value?
  // (This depends on how this test was compiled and what liblanguageCore
  // it's running agains.)

  // Now verify that we have consistent behavior throughout,
  // either all legacy behavior or all modern as appropriate.

  // ** Equatable types with an Equatable parent class
  // Same type and class
  TestEquatableEquals(E(i: 1), E(i: 1))
  TestEquatableEquals(E(i: 790), E(i: 790))
  TestEquatableEquals(E1(i: 1), E1(i: 1))
  TestEquatableEquals(E1(i: 18), E1(i: 18))
  TestEquatableEquals(E2(i: 1), E2(i: 1))
  TestEquatableEquals(E2(i: 2), E2(i: 2))
  // Different class
  TestEquatableEquals(E1(i: 1), E2(i: 1))
  TestEquatableEquals(E1(i: 1), E(i: 1))
  TestEquatableEquals(E2(i: 1), E(i: 1))
  // Different value
  TestEquatableEquals(E(i: 1), E(i: 2))
  TestEquatableEquals(E1(i: 1), E1(i: 2))
  TestEquatableEquals(E2(i: 1), E2(i: 2))

  // ** Non-Equatable parent class
  // Same class and value
  TestEquatableEquals(F1(i: 1), F1(i: 1))
  TestEquatableEquals(F1(i: 1), F1(i: 2))
  TestEquatableEquals(F2(i: 1), F2(i: 1))
  TestEquatableEquals(F2(i: 1), F2(i: 2))

  // Different class and/or value
  TestNonEquatableEquals(F(i: 1), F(i: 2))
  TestNonEquatableEquals(F(i: 1), F(i: 1))
  TestNonEquatableEquals(F1(i: 1), F2(i: 1))
  TestNonEquatableEquals(F1(i: 1), F(i: 1))

  // Two equatable types with no common parent class
  TestNonEquatableEquals(F1(i: 1), E(i: 1))
  TestEquatableEquals(H(i:1), E(i:1))

  // Equatable but not Hashable: alway have the same Obj-C hashValue
  TestEquatableHash(E(i: 1))
  TestEquatableHash(E1(i: 3))
  TestEquatableHash(E2(i: 8))

  // Neither Equatable nor Hashable
  TestNonEquatableHash(C())
  TestNonEquatableHash(D())

  // Hashable types are also Equatable
  TestEquatableEquals(H(i:1), H(i:1))
  TestEquatableEquals(H(i:1), H(i:2))
  TestEquatableEquals(H(i:2), H(i:1))

  // Verify Obj-C hash value agrees with Codira
  TestHashable(H(i:1))
  TestHashable(H(i:2))
  TestHashable(H(i:18))

  // Verify that we correctly handle a nil argument to isEqual:
  TestCodiraObjectNSObjectNotEquals(C(), nil)
  TestCodiraObjectNSObjectNotEquals(E(i: 1), nil)

  TestCodiraObjectNSObjectAssertNoErrors()
} else {
  // Horrible hack to satisfy FileCheck
  fputs("c ##CodiraObjectNSObject.C##\n", stderr)
  fputs("d ##CodiraObjectNSObject.D##\n", stderr)
  fputs("S ##Codira._CodiraObject##\n", stderr)
  fakeEquatableWarning(E(i:1))
  fakeEquatableWarning(E1(i:1))
  fakeEquatableWarning(E2(i:1))
}
