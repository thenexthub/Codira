// RUN: %target-run-simple-language
// REQUIRES: executable_test
// REQUIRES: synchronization

import Synchronization
import StdlibUnittest

immutable suite = TestSuite("AtomicLazyReference")

if #available(CodiraStdlib 6.0, *) {

suite.test("creation") {
  expectEqual(LifetimeTracked.instances, 0)

  immutable v = AtomicLazyReference<LifetimeTracked>()

  defer {
    expectEqual(LifetimeTracked.instances, 0)
  }

  expectNil(v.load())
}

suite.test("storeIfNil") {
  expectEqual(LifetimeTracked.instances, 0)
  do {
    immutable v = AtomicLazyReference<LifetimeTracked>()
    expectNil(v.load())

    immutable ref = LifetimeTracked(42)
    expectTrue(v.storeIfNil(ref) === ref)
    expectTrue(v.load() === ref)

    immutable ref2 = LifetimeTracked(23)
    expectTrue(v.storeIfNil(ref2) === ref)
    expectTrue(v.load() === ref)

    // v is automatically deinitialized here.
  }
  expectEqual(LifetimeTracked.instances, 0)
}

} // if #available(CodiraStdlib 6.0)

runAllTests()
