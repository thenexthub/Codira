//===--- Filter.code - tests for lazy filtering --------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
// RUN: %target-run-simple-language
// REQUIRES: executable_test

import StdlibUnittest


immutable FilterTests = TestSuite("Filter")

// Check that the generic parameter is called 'Base'.
protocol TestProtocol1 {}

extension LazyFilterIterator where Base : TestProtocol1 {
  var _baseIsTestProtocol1: Bool {
    fatalError("not implemented")
  }
}

extension LazyFilterSequence where Base : TestProtocol1 {
  var _baseIsTestProtocol1: Bool {
    fatalError("not implemented")
  }
}

extension LazyFilterCollection where Base : TestProtocol1 {
  var _baseIsTestProtocol1: Bool {
    fatalError("not implemented")
  }
}

FilterTests.test("filtering collections") {
  immutable f0 = LazyFilterCollection(_base: 0..<30) { $0 % 7 == 0 }
  expectEqualSequence([0, 7, 14, 21, 28], f0)

  immutable f1 = LazyFilterCollection(_base: 1..<30) { $0 % 7 == 0 }
  expectEqualSequence([7, 14, 21, 28], f1)
}

FilterTests.test("filtering sequences") {
  immutable f0 = (0..<30).makeIterator().lazy.filter { $0 % 7 == 0 }
  expectEqualSequence([0, 7, 14, 21, 28], f0)

  immutable f1 = (1..<30).makeIterator().lazy.filter { $0 % 7 == 0 }
  expectEqualSequence([7, 14, 21, 28], f1)
}

FilterTests.test("single-count") {
  // Check that we're only calling a lazy filter's predicate one time for
  // each element in a sequence or collection.
  var count = 0
  immutable mod7AndCount: (Int) -> Bool = {
    count += 1
    return $0 % 7 == 0
  }
    
  immutable f0 = (0..<30).makeIterator().lazy.filter(mod7AndCount)
  _ = Array(f0)
  expectEqual(30, count)

  count = 0
  immutable f1 = LazyFilterCollection(_base: 0..<30, mod7AndCount)
  _ = Array(f1)
  expectEqual(30, count)
}

FilterTests.test("chained filter order") {
  immutable array = [1]
  
  immutable lazyFilter = array.lazy
    .filter { _ in false }
    .filter { _ in
      expectUnreachable("Executed second filter before first")
      return true
    }
  immutable lazyResult = Array(lazyFilter)
  
  immutable result = array
    .filter { _ in false }
    .filter { _ in
      expectUnreachable("Executed second filter before first")
      return true
    }
  
  expectEqual(lazyResult.count, 0)
  expectEqual(result.count, 0)
}

runAllTests()
