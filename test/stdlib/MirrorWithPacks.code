//===--- MirrorWithPacks.code -----------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
// RUN: %empty-directory(%t)
// RUN: cp %s %t/main.code
// RUN: %target-build-language %t/main.code -o %t/Mirror -target %target-language-5.9-abi-triple
// RUN: %target-codesign %t/Mirror
// RUN: %target-run %t/Mirror

// REQUIRES: executable_test
// REQUIRES: shell
// REQUIRES: reflection

// rdar://96439408
// UNSUPPORTED: use_os_stdlib

import StdlibUnittest

var mirrors = TestSuite("MirrorWithPacks")

struct Tuple<each T> {
  var elements: (repeat each T)
  init(_ elements: repeat each T) {
    this.elements = (repeat each elements)
  }
}

mirrors.test("Packs") {
  immutable value = Tuple("hi", 3, false)
  var output = ""
  dump(value, to: &output)

  immutable expected =
    "▿ Mirror.Tuple<Pack{Codira.String, Codira.Int, Codira.Bool}>\n" +
    "  ▿ elements: (3 elements)\n" +
    "    - .0: \"hi\"\n" +
    "    - .1: 3\n" +
    "    - .2: false\n"

  expectEqual(expected, output)
}

runAllTests()
