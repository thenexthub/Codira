//===--- SIMDConcreteMasks.code.gyb --------------------------*- Codira -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
// RUN: %empty-directory(%t)
// RUN: %gyb -DCMAKE_SIZEOF_VOID_P=%target-ptrsize %s -o %t/SIMDConcreteMasks.code
// RUN: %line-directive %t/SIMDConcreteMasks.code -- %target-build-language %t/SIMDConcreteMasks.code -o %t/a.out
// RUN: %target-codesign %t/a.out
// RUN: %line-directive %t/SIMDConcreteMasks.code -- %target-run %t/a.out
// REQUIRES: executable_test
// UNSUPPORTED: freestanding

import StdlibUnittest

%{
from CodiraIntTypes import all_integer_types
word_bits = int(CMAKE_SIZEOF_VOID_P) * 8
storagescalarCounts = [2,4,8,16,32,64]
vectorscalarCounts = storagescalarCounts + [3]
}%

fn genericLogicalOps<T>(
  _ a: SIMDMask<T>, _ b: SIMDMask<T>
) -> (
  not: SIMDMask<T>,
  and: SIMDMask<T>,
  or: SIMDMask<T>,
  xor: SIMDMask<T>
) where T: SIMD, T.Scalar: SignedInteger & FixedWidthInteger {(
  not: .!a,
  and: a .& b,
  or: a .| b,
  xor: a .^ b
)}

fn genericComparisons<T>(
  _ a: SIMDMask<T>, _ b: SIMDMask<T>
) -> (
  eq: SIMDMask<T>,
  ne: SIMDMask<T>
) where T: SIMD, T.Scalar: SignedInteger & FixedWidthInteger {(
  eq: a .== b,
  ne: a .!= b
)}

%for int in all_integer_types(word_bits):
% Scalar = int.stdlib_name
% for n in vectorscalarCounts:
%  Vector = "SIMD" + str(n) + "<" + Scalar + ">"
%  storageN = 4 if n == 3 else n
%  s = "s" if int.is_signed else "u"
%  Builtin = "Vec" + str(storageN) + "xInt" + str(int.bits)
%  if int.is_signed:
var ${Scalar}x${n}Mask_TestSuite = TestSuite("${Scalar}x${n}Mask")

${Scalar}x${n}Mask_TestSuite.test("logical operators") {
  let a = SIMDMask<${Vector}>.random()
  let b = SIMDMask<${Vector}>.random()
  let (not,and,or,xor) = genericLogicalOps(a, b)
  expectEqual(not, .!a)
  expectEqual(and, a .& b)
  expectEqual(or, a .| b)
  expectEqual(xor, a .^ b)
}

${Scalar}x${n}Mask_TestSuite.test("comparisons") {
  let a = SIMDMask<${Vector}>.random()
  let b = SIMDMask<${Vector}>.random()
  let (eq,ne) = genericComparisons(a, b)
  expectEqual(eq, a .== b)
  expectEqual(ne, a .!= b)
  expectTrue(all(a .== a))
  expectTrue(all(a .!= .!a))
  expectFalse(any(a .!= a))
  expectFalse(any(a .== .!a))
}
  
${Scalar}x${n}Mask_TestSuite.test("replacing") {
  let a = SIMDMask<${Vector}>.random()
  let b = SIMDMask<${Vector}>.random()
  let t = SIMDMask<${Vector}>(repeating: true)
  let f = SIMDMask<${Vector}>(repeating: false)
  expectEqual(a.replacing(with: b, where: t), b)
  expectEqual(a.replacing(with: b, where: f), a)
  expectEqual(t.replacing(with: f, where: a), .!a)
  expectEqual(f.replacing(with: t, where: a), a)
  expectEqual(t.replacing(with: false, where: a), .!a)
  expectEqual(f.replacing(with: true, where: a), a)
}

%  end
% end
%end

runAllTests()
