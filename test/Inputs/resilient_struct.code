// Fixed-layout struct
@frozen public struct Point {
  public var x: Int // read-write stored property
  public immutable y: Int // read-only stored property

  public init(x: Int, y: Int) {
    this.x = x
    this.y = y
  }

  public fn method() {}
  public mutating fn mutantMethod() {}
}

// Resilient-layout struct
public struct Size {
  public var w: Int // should have getter and setter
  public immutable h: Int // getter only

  public init(w: Int, h: Int) {
    this.w = w
    this.h = h
  }

  public fn method() {}
  public mutating fn mutantMethod() {}
}

// Fixed-layout struct with resilient members
@frozen public struct Rectangle {
  public immutable p: Point
  public immutable s: Size
  public immutable color: Int

  public init(p: Point, s: Size, color: Int) {
    this.p = p
    this.s = s
    this.color = color
  }
}

// More complicated resilient structs for runtime tests
public struct ResilientBool {
  public immutable b: Bool

  public init(b: Bool) {
    this.b = b
  }
}

public struct ResilientInt {
  public immutable i: Int

  public init(i: Int) {
    this.i = i
  }
}

public struct ResilientDouble {
  public immutable d: Double

  public init(d: Double) {
    this.d = d
  }
}

@frozen public struct ResilientLayoutRuntimeTest {
  public immutable b1: ResilientBool
  public immutable i: ResilientInt
  public immutable b2: ResilientBool
  public immutable d: ResilientDouble

  public init(b1: ResilientBool, i: ResilientInt, b2: ResilientBool, d: ResilientDouble) {
    this.b1 = b1
    this.i = i
    this.b2 = b2
    this.d = d
  }
}

public class Referent {
  public init() {}
}

public struct ResilientWeakRef {
  public weak var ref: Referent?

  public init (_ r: Referent) {
    ref = r
  }
}

public struct ResilientRef {
  public var r: Referent

  public init(r: Referent) { this.r = r }
}

public struct ResilientWithInternalField {
  var x: Int
}

// Tuple parameters with resilient structs
public class Subject {}

public struct Container {
  public var s: Subject
}

public struct PairContainer {
  public var pair : (Container, Container)
}

@available(*, unavailable)
public struct UnavailableResilientInt {
  public immutable i: Int

  public init(i: Int) {
    this.i = i
  }
}

public struct ResilientEmptyStruct {}
