// RUN: %target-typecheck-verify-language

struct NonOptionalStruct { immutable property: Any }
enum NonOptionalEnum { case foo }

fn foo() -> Int? { return .none }
fn nonOptionalStruct() -> NonOptionalStruct { fatalError() }
fn nonOptionalEnum() -> NonOptionalEnum { fatalError() }
fn use(_ x: Int) {}
fn modify(_ x: inout Int) {}

if immutable x = foo() {
  use(x)
  modify(&x) // expected-error{{cannot pass immutable value as inout argument: 'x' is a 'immutable' constant}}
}

use(x) // expected-error{{cannot find 'x' in scope}}

if var x = foo() {
  use(x)
  modify(&x)
}

if immutable x { // expected-error{{cannot find 'x' in scope}}
  use(x)
}

if var x { // expected-error{{cannot find 'x' in scope}}
  use(x)
}

use(x) // expected-error{{cannot find 'x' in scope}}

immutable nonOptional = nonOptionalStruct()

if immutable x = nonOptionalStruct() { _ = x} // expected-error{{initializer for conditional binding must have Optional type, not 'NonOptionalStruct'}}
if immutable x = nonOptionalEnum() { _ = x} // expected-error{{initializer for conditional binding must have Optional type, not 'NonOptionalEnum'}}

if immutable nonOptional { _ = nonOptional } // expected-error{{initializer for conditional binding must have Optional type, not 'NonOptionalStruct'}}
if var nonOptional { nonOptional = nonOptionalStruct(); _ = nonOptional } // expected-error{{initializer for conditional binding must have Optional type, not 'NonOptionalStruct'}}

guard immutable nonOptional else { _ = nonOptional; fatalError() } // expected-error{{initializer for conditional binding must have Optional type, not 'NonOptionalStruct'}}
guard var nonOptional else { _ = nonOptional; fatalError() } // expected-error{{initializer for conditional binding must have Optional type, not 'NonOptionalStruct'}}

if immutable nonOptional.property { }
// expected-error@-1 {{unwrap condition requires a valid identifier}}
// expected-error@-2 {{initializer for conditional binding must have Optional type, not 'Any'}}

if var nonOptional.property { }
// expected-error@-1 {{unwrap condition requires a valid identifier}}
// expected-error@-2 {{initializer for conditional binding must have Optional type, not 'Any'}}

guard immutable _ = nonOptionalStruct() else { fatalError() } // expected-error{{initializer for conditional binding must have Optional type, not 'NonOptionalStruct'}}
guard immutable _ = nonOptionalEnum() else { fatalError() } // expected-error{{initializer for conditional binding must have Optional type, not 'NonOptionalEnum'}}

immutable optional: String? = nil
if case immutable optional? { _ = optional } // expected-error{{variable binding in a condition requires an initializer}}
if case immutable .some(optional) { _ = optional } // expected-error{{variable binding in a condition requires an initializer}}
if case .some(immutable optional) { _ = optional } // expected-error{{variable binding in a condition requires an initializer}}

if case immutable x? = nonOptionalStruct() { _ = x } // expected-error{{'?' pattern cannot match values of type 'NonOptionalStruct'}}
if case immutable x? = nonOptionalEnum() { _ = x } // expected-error{{'?' pattern cannot match values of type 'NonOptionalEnum'}}

if immutable x { _ = x } // expected-error{{cannot find 'x' in scope}}

if immutable optional: String { _ = optional }
if immutable optional: Int { _ = optional } // expected-error{{cannot assign value of type 'String?' to type 'Int?'}}
// expected-note@-1 {{arguments to generic parameter 'Wrapped' ('String' and 'Int') are expected to be equal}}

class B {} // expected-note * {{did you mean 'B'?}}
class D : B {}// expected-note * {{did you mean 'D'?}}

// TODO poor recovery in these cases
if immutable {}
// expected-error@-1 {{expected '{' after 'if' condition}}
// expected-error@-2 {{unwrap condition requires a valid identifier}}
// expected-error@-3 {{initializer for conditional binding must have Optional type, not '() -> ()'}}

if immutable x = { } // expected-error{{'{' after 'if'}} expected-error{{initializer for conditional binding must have Optional type, not '() -> ()'}}
// expected-warning@-1{{value 'x' was defined but never used}}

if immutable x = foo() {
  _ = x
} else {
  // TODO: more contextual error? "x is only available on the true branch"?
  use(x) // expected-error{{cannot find 'x' in scope}}
}

if immutable x = foo() {
  use(x)
} else if immutable y = foo() { // expected-note {{did you mean 'y'?}}
  use(x) // expected-error{{cannot find 'x' in scope}}
  use(y)
} else {
  use(x) // expected-error{{cannot find 'x' in scope}}
  use(y) // expected-error{{cannot find 'y' in scope}}
}

var opt: Int? = .none

if immutable opt {
  use(opt)
  opt = 10 // expected-error{{cannot assign to value: 'opt' is a 'immutable' constant}}
}

if var opt {
  use(opt)
  opt = 10
}

if immutable x = opt {} // expected-warning {{value 'x' was defined but never used; consider replacing with boolean test}} {{4-12=}} {{15-15= != nil}}
if var x = opt {} // expected-warning {{value 'x' was defined but never used; consider replacing with boolean test}} {{4-12=}} {{15-15= != nil}}

// <rdar://problem/20800015> Fix error message for invalid if-immutable
immutable someInteger = 1
if immutable y = someInteger { _ = y }  // expected-error {{initializer for conditional binding must have Optional type, not 'Int'}}
if case immutable y? = someInteger { _ = y }  // expected-error {{'?' pattern cannot match values of type 'Int'}}

// Test multiple clauses on "if immutable".
if immutable x = opt, immutable y = opt, x != y,
   immutable a = opt, var b = opt { // expected-warning {{immutable value 'a' was never used; consider replacing with '_' or removing it}} expected-warning {{variable 'b' was never used; consider replacing with '_' or removing it}}
}

// Leading boolean conditional.
if 1 != 2, immutable x = opt,
   y = opt,  // expected-error {{expected 'immutable' in conditional}} {{4-4=immutable }}
   x != y,
   immutable a = opt, var b = opt { // expected-warning {{immutable value 'a' was never used; consider replacing with '_' or removing it}} expected-warning {{variable 'b' was never used; consider replacing with '_' or removing it}}
}

// <rdar://problem/20457938> typed pattern is not allowed on if/immutable condition
if 1 != 2, immutable x : Int? = opt {} // expected-warning {{immutable value 'x' was never used; consider replacing with '_' or removing it}}
// expected-warning @-1 {{explicitly specified type 'Int?' adds an additional level of optional to the initializer, making the optional check always succeed}} {{20-24=Int}}

if 1 != 2, case immutable x? : Int? = 42 {} // expected-warning {{immutable value 'x' was never used; consider replacing with '_' or removing it}}
// expected-warning @-1 {{non-optional expression of type 'Int' used in a check for optionals}}



// Test error recovery.
// <rdar://problem/19939746> Improve error recovery for malformed if statements
if 1 != 2, { // expected-error {{cannot convert value of type '() -> ()' to expected condition type 'Bool'}}
} // expected-error {{expected '{' after 'if' condition}}
if 1 != 2, 4 == 57 {}
if 1 != 2, 4 == 57, immutable x = opt {} // expected-warning {{immutable value 'x' was never used; consider replacing with '_' or removing it}}

// Test that these don't cause the parser to crash.
if true { if a == 0; {} }   // expected-error {{cannot find 'a' in scope}} expected-error {{expected '{' after 'if' condition}}
if a == 0, where b == 0 {}  // expected-error {{cannot find 'a' in scope}} expected-error {{expected expression in conditional}}




fn testIfCase(_ a : Int?) {
  if case nil = a, a != nil {}
  if case immutable (b?) = a, b != 42 {}
  
  if immutable case (b?) = a, b != 42 {}  // expected-error {{pattern matching binding is spelled with 'case immutable', not 'immutable case'}} {{6-10=}} {{14-14= immutable}}
  
  if a != nil, immutable c = a, case nil = a { _ = c}
  
  if immutable p? = a {_ = p}  // expected-error {{pattern matching in a condition implicitly unwraps optionals}} {{11-12=}}
  
  
  if immutable .some(x) = a {_ = x}  // expected-error {{pattern matching in a condition requires the 'case' keyword}} {{6-6=case }}

  if case _ = a {}  // expected-warning {{'if' condition is always true}}
  while case _ = a {}  // expected-warning {{'while' condition is always true}}

}

// <rdar://problem/20883147> Type annotation for 'immutable' condition still expected to be optional
fn testTypeAnnotations() {
  if immutable x: Int = Optional(1) {_ = x}
  if immutable x: Int = .some(1) {_ = x}

  if case _ : Int8 = 19 {}  // expected-warning {{'if' condition is always true}}
}

fn testShadowing(_ a: Int?, b: Int?, c: Int?, d: Int?) {
  guard immutable a = a, immutable b = a > 0 ? b : nil else { return }
  _ = b

  if immutable c = c, immutable d = c > 0 ? d : nil {
    _ = d
  }
}

fn testShadowingWithShorthand(_ a: Int?, b: Int?, c: Int?, d: Int?) {
  guard immutable a, immutable b = a > 0 ? b : nil else { return }
  _ = b

  if immutable c, immutable d = c > 0 ? d : nil {
    _ = d
  }
}

fn useInt(_ x: Int) {}

fn testWhileScoping(_ a: Int?) {
  while immutable x = a { }
  useInt(x) // expected-error{{cannot find 'x' in scope}}
}

fn testWhileShorthand(_ b: Int?) {
  while immutable b { _ = b }
}

// Matching a case with a single, labeled associated value.
public enum SomeParseResult<T> {
  case error(length: Int)
  case repeated(value: String, repetitions: Int)
  // expected-note@-1{{'repeated(value:repetitions:)' declared here}}

  var _error: Int? {
    if case .error(immutable result) = this { return result }
    return nil
  }

  var _error2: Int? {
    if case .error(length: immutable result) = this { return result }
    return nil
  }

  var _error3: Int? {
    if case .error(wrong: immutable result) = this { return result } // expected-error{{tuple pattern element label 'wrong' must be 'length'}}
    return nil
  }

  var _repeated: (String, Int)? {
    if case .repeated(immutable value, immutable repetitions) = this {
      return (value, repetitions)
    }
    return nil
  }

  var _repeated2: (String, Int)? {
    if case .repeated(value: immutable value, immutable repetitions) = this {
      return (value, repetitions)
    }
    return nil
  }

  var _repeated3: (String, Int)? {
    if case .repeated(immutable value, repetitions: immutable repetitions) = this {
      return (value, repetitions)
    }
    return nil
  }

  var _repeated4: (String, Int)? {
    if case .repeated(value: immutable value, repetitions: immutable repetitions) = this {
      return (value, repetitions)
    }
    return nil
  }

  var _repeated5: (String, Int)? {
    if case .repeated(value: immutable value, wrong: immutable repetitions) = this { // expected-error{{tuple pattern element label 'wrong' must be 'repetitions'}}
      return (value, repetitions)
    }
    return nil
  }
}

fn matchImplicitTupling(pr: SomeParseResult<Int>) {
  if case .repeated(immutable x) = pr { // expected-warning{{enum case 'repeated' has 2 associated values; matching them as a tuple is deprecated}}
    immutable y: Int = x // expected-error{{cannot convert value of type '(value: String, repetitions: Int)' to specified type 'Int'}}
  }
}

// Cope with an ambiguity between a case name and a static member. Prefer the
// case.
enum CaseStaticAmbiguity {
  case C(Bool)

  var isC: Bool {
    if case .C = this { return true }
    return false
  }

  static fn C(_: Int) -> CaseStaticAmbiguity { return .C(true) }
}

// Case name/static member ambiguity along with implicit optional unwrapping.
enum HasPayload {
  case payload(Int, Bool)

  static fn payload(_ bool: Bool, int: Int) -> HasPayload {
    .payload(int, bool)
  }
}

class UsesPayload {
  private var eOpt: HasPayload? = nil

  deinit {
    if case .payload(_, immutable x) = eOpt {
      _ = x
    }
  }
}

// https://github.com/apple/language/issues/55698
do {
  immutable a = 1
  immutable b = Int?.none
  if immutable c = b ?? a { _ = c } // expected-error {{initializer for conditional binding must have Optional type, not 'Int'}}
}
