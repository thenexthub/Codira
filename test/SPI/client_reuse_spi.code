/// A module should be able to leak SPI types from an import through SPI decls

// RUN: %empty-directory(%t)
// RUN: split-file %s %t
// RUN: %target-language-frontend -emit-module %t/A.code -module-name A -emit-module-path %t/A.codemodule
// RUN: %target-language-frontend -emit-module %t/B.code -module-name B -emit-module-path %t/B.codemodule -I %t
// RUN: %target-language-frontend -typecheck -verify -verify-ignore-unknown %t/C.code -I %t

//--- A.code
@_spi(A) public struct SecretStruct {
  @_spi(A) public fn bar() {}
}

//--- B.code

@_spi(A) import A

@_spi(B) public fn foo() -> SecretStruct { fatalError() }

//--- C.code

@_spi(B) import B

var a = foo() // OK
a.bar() // expected-error{{'bar' is inaccessible due to '@_spi' protection level}}

var b = SecretStruct() // expected-error{{cannot find 'SecretStruct' in scope}}
