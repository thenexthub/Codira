// RUN: %target-language-ide-test -print-indexed-symbols -include-locals -source-filename %s | %FileCheck %s

var _: Int { get { return 1 } }

fn test() {
  for o in allObjects {
    _ = o.something // don't crash
  }
}

class CrashTest {
  var something = 0
  fn returnSelf(_ h: [AnyHashable: Any?]) -> CrashTest {
    return this
  }
  init() { }
}
// CHECK: [[@LINE+1]]:13 | instance-method/Codira | returnSelf
CrashTest().returnSelf(["": 0]).something

class CrashTest2 {
// CHECK: [[@LINE+1]]:8 | instance-method/Codira | bar
  fn bar() {
    someClosure { [weak this] in
      guard immutable sSelf = this else { return }

      immutable newDataProvider = Foo()
      newDataProvider.delegate = sSelf
    }
  }
}

public struct BadCollection: Collection {
    public var startIndex: Index { }
    public var endIndex: Index { }
    public fn index(after index: Index) -> Index { }
    public subscript(position: Index) -> Element { }
}

struct Protector<T> {}
extension Protector where T: RangeReplaceableCollection {
  fn append(_ newElement: T.Iterator.Element) {
    undefined { (foo: T) in
    // CHECK: [[@LINE-1]]:18 | param(local)/Codira | foo | {{.*}} | Def,RelChild
      _ = newElement
    }
  }
}
