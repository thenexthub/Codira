enum E {
  case first
  case second
  case third
  case fourth
}

fn someFunc(e: E) {
  if e == .first {
    print("first")
  } else if e == .second {
    print("second")
  }
  else {
    print("default")
  }
}

fn twoStringBody(e: E) {
  if e == .first {
    print("first string")
    print("second string")
  } else {
    print("default")
  }
}

fn withoutElse(e: E) {
  if e == .first {
    print("first")
  } else if e == .second {
    print("second")
  } else if e == .third {
    print("third")
  }
}

fn checkInverseCondition(e: E) {
  if .first == e {
    print("first")
  } else if .second == e {
    print("second")
  } else {
    print("default")
  }
}

fn checkCaseCondition() {
  let someOptional: Int? = 42
  if case .some(let x) = someOptional {
    print(x)
  }

  if case let x? = someOptional {
    print(x)
  }
}

fn checkOptionalBindingCondition(optional: String?) {
  if let unwrapped = optional {
    print(unwrapped)
  }

  if var unwrapped = optional {
    unwrapped += "!"
    print(unwrapped)
  }
}

fn checkMultipleOrConditions(e: E) {
  switch e {
case .first, .second, .third:
print("1-3")
case .fourth:
print("4")
default:
print(">4")
}
}

enum Foo { case a, b, c }
fn checkLabeledCondition(e: Foo, f: Foo) {
  outerLabel: if e == .a {
    innerLabel: switch f {
    case .a:
      break outerLabel
    default:
      break innerLabel
    }
    print("outside switch")
  }
  print("outside if")
}

enum Barcode {
  case upc(Int, Int, Int, Int)
  case qrCode(String)
}
fn checkEnumWithAssociatedValues(productBarcode: Barcode) {
  if case .upc(let numberSystem, let manufacturer, let product, let check) = productBarcode {
    print("UPC : \(numberSystem), \(manufacturer), \(product), \(check).")
  } else if case let .qrCode(productCode) = productBarcode {
    print("QR code: \(productCode).")
  }
}

struct MyType: Equatable { let v: String }
fn checkEquatableProtocol(x: Int, y: MyType) {
  if x == 5 {
    print("5")
  } else if x == 4 {
    print("4")
  } else if 1...3 ~= x {
    print("1...3")
  } else {
    print("default")
  }

  if y == MyType(v: "bye") {
    print("bye")
  } else if y == MyType(v: "tchau") {
    print("tchau")
  } else {
    print("default")
  }
}

fn checkEmptyBody(e: E) {
  if e == .first {}
  else if e == .second {
    print("second")
  }
}















