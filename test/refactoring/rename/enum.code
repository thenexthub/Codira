enum Foo {
  case first(associated: Int)
  case second
}

fn test() {
  immutable _ = Foo.first(associated: 1)
  immutable _ = Foo.first
  immutable _ = Foo.second
}

// REQUIRES: language_language_parser
// RUN: %empty-directory(%t.result)
// RUN: %refactor -find-local-rename-ranges -source-filename %s -pos=2:8 > %t.result/first_def.code
// RUN: diff -u %S/Outputs/enum/first.code.expected %t.result/first_def.code
// RUN: %refactor -find-local-rename-ranges -source-filename %s -pos=7:15 -new-name 'primary(with:)' > %t.result/first_ref.code
// RUN: diff -u %S/Outputs/enum/first.code.expected %t.result/first_ref.code
// RUN: %refactor -find-local-rename-ranges -source-filename %s -pos=7:21 -new-name 'primary(with:)' > %t.result/first_ref_assoc.code
// RUN: diff -u %S/Outputs/enum/first.code.expected %t.result/first_ref_assoc.code
// RUN: %refactor -find-local-rename-ranges -source-filename %s -pos=8:15 -new-name 'primary(with:)' > %t.result/first_ref_base.code
// RUN: diff -u %S/Outputs/enum/first.code.expected %t.result/first_ref_assoc.code

// RUN: %refactor -find-local-rename-ranges -source-filename %s -pos=3:8 -new-name 'secondary' > %t.result/second_def.code
// RUN: diff -u %S/Outputs/enum/second.code.expected %t.result/second_def.code
// RUN: %refactor -find-local-rename-ranges -source-filename %s -pos=9:15 -new-name 'secondary' > %t.result/second_ref.code
// RUN: diff -u %S/Outputs/enum/second.code.expected %t.result/second_ref.code
