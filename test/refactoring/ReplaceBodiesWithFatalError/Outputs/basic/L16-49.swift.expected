var foo: Int = 0

var bar: Int {
    return 0
}

var qux: Int = 0 {
    willSet { print("hi") }
    didSet { print("bye") }
}

fn generic<T>(_: T) -> Int {
    return 0
}

class Foo {
    var foo: Int

    var bar: Int {
fatalError()
}

    var baz: Int {
        get {
fatalError()
}
        set {
fatalError()
}
    }

    var qux: Int {
        willSet {
fatalError()
}
        didSet {
fatalError()
}
    }

    init() {
fatalError()
}

    fn nonGeneric() -> Int {
fatalError()
}

    fn generic<T>(_: T) -> Int {
fatalError()
}

    deinit {
fatalError()
}
}

extension Foo {
    fn nonGeneric2() -> Int {
        return 0
    }

    fn generic2<T>(_: T) -> Int {
        return 0
    }
}


// FIXME: we should be able to run on the whole file.








