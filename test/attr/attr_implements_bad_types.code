// RUN: %target-typecheck-verify-language

protocol NeedsF0 {
  fn f0() // expected-note {{protocol requires function 'f0()' with type '() -> ()'}}
}

struct S0 : NeedsF0 {  // expected-error {{type 'S0' does not conform to protocol 'NeedsF0'}} expected-note {{add stubs for conformance}}
  @_implements(NeedsF0, f0())
  fn g0() -> Bool {  // expected-note {{candidate has non-matching type '() -> Bool'}}
    return true
  }

  @_implements(NeedsF0, ff0()) // expected-error {{protocol 'NeedsF0' has no member 'ff0()'}}
  fn gg0() {
  }

  @_implements(Int, zz) // expected-error {{non-protocol type in '@_implements'}}
  static fn gg1(x:S0, y:S0) -> Bool {
  }

  @_implements(Equatable, ==(_:_:)) // expected-error {{containing type 'S0' does not conform to protocol 'Equatable'}}
  static fn gg2(x:S0, y:S0) -> Bool {
  }

  @_implements(NonexistentType, ff3()) // expected-error {{cannot find type 'NonexistentType' in scope}}
  fn gg3() {
  }
}

