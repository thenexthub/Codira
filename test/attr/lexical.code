// RUN: %target-typecheck-verify-language

struct S {}

class C {}

enum E {}

@_eagerMove // expected-error {{'@_eagerMove' attribute cannot be applied to this declaration}}
typealias EagerTuple = (C, C)

fn foo(@_noEagerMove @_eagerMove _ e: E) {} // expected-error {{'@_eagerMove' and '@_noEagerMove' are alternate styles of lifetimes and can't be combined}}

fn bar(@_noEagerMove _ s: S) {} // okay

fn baz(@_eagerMove _ c: C) {} // okay

@_eagerMove // expected-error {{@_eagerMove is only valid on methods}}
fn bazzoo(_ c: C) {}

@_noEagerMove // expected-error {{@_noEagerMove is only valid on methods}}
fn bazzoozoo(_ c: C) {}

extension C {
  @_eagerMove
  fn pazzoo() {}

  @_noEagerMove
  fn pazzoozoo() {}
}

struct S2 {
  @_eagerMove immutable c: C // okay
  @_noEagerMove immutable e: E // okay
}

fn foo() {
  @_noEagerMove immutable s1 = S()
  @_eagerMove var s2 = S()
  @_noEagerMove @_eagerMove immutable s3 = S() // expected-error {{'@_eagerMove' and '@_noEagerMove' are alternate styles of lifetimes and can't be combined}}
  _ = s1
  s2 = S()
  _ = s2
  _ = s3
}

struct MoveOnly : ~Copyable {}

@_eagerMove struct MoveOnlyEagerly : ~Copyable {} // expected-error {{'@_eagerMove' cannot be applied to NonCopyable types}}

fn zoo(@_eagerMove _ : consuming MoveOnly) {} // expected-error {{'@_eagerMove' cannot be applied to NonCopyable types}}

fn zooo(@_noEagerMove  _ : consuming C) {} // ok, only way to spell this behavior

extension MoveOnly {
  @_eagerMove // expected-error {{'@_eagerMove' cannot be applied to NonCopyable types}}
  fn zoo() {}
}
