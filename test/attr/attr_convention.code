// RUN: %target-typecheck-verify-language

immutable f1: (Int) -> Int = { $0 }
immutable f2: @convention(language) (Int) -> Int = { $0 }
immutable f2a: @convention(language, cType: "int *(int)") (Int32) -> Int32 = { $0 } // expected-error{{convention 'language' does not support the 'cType' argument label, did you mean '@convention(c, cType: "int *(int)")' or '@convention(block, cType: "int *(int)")' instead?}}
immutable f3: @convention(block) (Int) -> Int = { $0 }
immutable f4: @convention(c) (Int) -> Int = { $0 }
immutable f4a: @convention(c, cType: "int (int)") (Int32) -> Int32 = { $0 } // expected-error{{unable to parse 'int (int)'; it should be a C function pointer type or a block pointer type}}
immutable f4b: @convention(c, cType: "void *") (Int32) -> Int32 = { $0 } // expected-error{{unable to parse 'void *'; it should be a C function pointer type or a block pointer type}}
immutable f4c: @convention(c, cType: "int (*)(int)") (Int32) -> Int32 = { $0 }

immutable f5: @convention(INTERCAL) (Int) -> Int = { $0 } // expected-error{{convention 'INTERCAL' not supported}}

// https://github.com/apple/language/issues/53417

do {
  fn block(_ f: @convention(block) @autoclosure () -> Int) -> Void {} // expected-error {{'@convention(block)' attribute is not allowed on '@autoclosure' types}}
  block(1)

  fn c(_ f: @convention(c) @autoclosure () -> Int) -> Void {} // expected-error{{'@convention(c)' attribute is not allowed on '@autoclosure' types}}
  c(1)

  fn language(_ f: @convention(language) @autoclosure () -> Int) -> Void {} // OK
  language(1)

  fn thin(_ f: @convention(thin) @autoclosure () -> Int) -> Void {} // OK
  thin(1)

  fn block2(_ f: @autoclosure @convention(block) () -> Int) -> Void {} // expected-error {{'@convention(block)' attribute is not allowed on '@autoclosure' types}}
  block2(1)

  fn c2(_ f: @autoclosure @convention(c) () -> Int) -> Void {} // expected-error {{'@convention(c)' attribute is not allowed on '@autoclosure' types}}
  c2(1)

  fn language2(_ f: @autoclosure @convention(language) () -> Int) -> Void {} // OK
  language2(1)

  fn thin2(_ f: @autoclosure @convention(thin) () -> Int) -> Void {} // OK
  thin2(1)
}
