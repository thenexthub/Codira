// RUN: %empty-directory(%t)

// REQUIRES: objc_interop
// REQUIRES: OS=macosx

// RUN: %target-language-frontend(mock-sdk: %clang-importer-sdk-nosource -I %t) -emit-module -o %t %S/../Inputs/clang-importer-sdk/language-modules/ObjectiveC.code -disable-objc-attr-requires-foundation-module
// RUN: %target-language-frontend(mock-sdk: %clang-importer-sdk-nosource -I %t) -emit-module -o %t %S/../Inputs/clang-importer-sdk/language-modules/CoreGraphics.code
// RUN: %target-language-frontend(mock-sdk: %clang-importer-sdk-nosource -I %t) -emit-module -o %t  %S/../Inputs/clang-importer-sdk/language-modules/Foundation.code
// RUN: %target-language-frontend(mock-sdk: %clang-importer-sdk-nosource -I %t) -emit-module -o %t  %S/../Inputs/clang-importer-sdk/language-modules/AppKit.code

// RUN: %target-language-ide-test(mock-sdk: -sdk %S/../Inputs/clang-importer-sdk -I %t) -print-module -source-filename %s -module-to-print=AppKit -function-definitions=false -prefer-type-repr=true  -skip-parameter-names > %t.AppKit.txt
// RUN: %FileCheck %s -check-prefix=CHECK-APPKIT -strict-whitespace < %t.AppKit.txt

// Note: class method name stripping context type.
// CHECK-APPKIT: class fn red() -> NSColor

// Note: instance method name stripping context type.
// CHECK-APPKIT: fn same() -> Self

// Note: Unsafe(Mutable)Pointers don't get defaulted to 'nil'
// CHECK-APPKIT: fn getRGBAComponents(_: UnsafeMutablePointer<CChar>?)

// Note: Skipping over "3D"
// CHECK-APPKIT: fn drawInAir(at: Point3D)

// Note: with<something> -> <something>
// CHECK-APPKIT: fn draw(at: Point3D, withAttributes: [String : Any]? = nil)

// Note: Don't strip names that aren't preceded by a verb or preposition.
// CHECK-APPKIT: fn setTextColor(_: NSColor?)

// Note: Splitting with default arguments.
// CHECK-APPKIT: fn draw(in: NSView?)

// Note: NSDictionary default arguments for "options"
// CHECK-APPKIT: fn drawAnywhere(in: NSView?, options: [AnyHashable : Any] = [:])
// CHECK-APPKIT: fn drawAnywhere(options: [AnyHashable : Any] = [:])
// CHECK-APPKIT: fn drawAnywhere(optionalOptions: [AnyHashable : Any]? = nil)

// Make sure we're removing redundant context type info at both the
// beginning and the end.
// CHECK-APPKIT: fn reversing() -> NSBezierPath

// Make sure we're dealing with 'instancetype' properly.
// CHECK-APPKIT: fn inventing() -> Self

// Make sure we're removing redundant context type info at both the
// beginning and the end of a property.
// CHECK-APPKIT: var flattened: NSBezierPath { get }

// CHECK-APPKIT: fn dismiss(animated: Bool)

// CHECK-APPKIT: fn shouldCollapseAutoExpandedItems(forDeposited: Bool) -> Bool

// Introducing argument labels and pruning the base name.
// CHECK-APPKIT: fn rectForCancelButton(whenCentered: Bool)

// CHECK-APPKIT: fn openUntitledDocumentAndDisplay(_: Bool)

// Don't strip due to weak type information.
// CHECK-APPKIT: fn setContentHuggingPriority(_: NSLayoutPriority)

// Look through typedefs of pointers.
// CHECK-APPKIT: fn layout(at: NSPointPointer!)

// The presence of a property prevents us from stripping redundant
// type information from the base name.
// CHECK-APPKIT: fn addGestureRecognizer(_: NSGestureRecognizer)
// CHECK-APPKIT: fn removeGestureRecognizer(_: NSGestureRecognizer)
// CHECK-APPKIT: fn favoriteView(for: NSGestureRecognizer) -> NSView?
// CHECK-APPKIT: fn addLayoutConstraints(_: Set<NSLayoutConstraint>)
// CHECK-APPKIT: fn add(_: NSRect)
// CHECK-APPKIT: class fn conjureRect(_: NSRect)
