@_exported import Foo.FooSub
@_exported import FooHelper


/// Aaa.  FooEnum1.  Bbb.
struct FooEnum1 : RawRepresentable, Equatable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
}

/// Aaa.  FooEnum1X.  Bbb.
var FooEnum1X: FooEnum1 { get }
struct FooEnum2 : RawRepresentable, Equatable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
}
var FooEnum2X: FooEnum2 { get }
var FooEnum2Y: FooEnum2 { get }
struct FooEnum3 : RawRepresentable, Equatable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
}
var FooEnum3X: FooEnum3 { get }
var FooEnum3Y: FooEnum3 { get }

/// Aaa.  FooComparisonResult.  Bbb.
enum FooComparisonResult : Int {
  init?(rawValue: Int)
  var rawValue: Int { get }
  case orderedAscending
  case orderedSame
  case orderedDescending
}

/// Aaa.  FooRuncingOptions.  Bbb.
struct FooRuncingOptions : OptionSet {
  init(rawValue: Int)
  let rawValue: Int
  static var enableMince: FooRuncingOptions { get }
  static var enableQuince: FooRuncingOptions { get }
}
struct FooStruct1 {
  var x: Int32
  var y: Double
  init()
  init(x: Int32, y: Double)
}
typealias FooStruct1Pointer = UnsafeMutablePointer<FooStruct1>
struct FooStruct2 {
  var x: Int32
  var y: Double
  init()
  init(x: Int32, y: Double)
}
typealias FooStructTypedef1 = FooStruct2
struct FooStructTypedef2 {
  var x: Int32
  var y: Double
  init()
  init(x: Int32, y: Double)
}

/// Aaa.  FooTypedef1.  Bbb.
typealias FooTypedef1 = Int32

/// Aaa.  fooIntVar.  Bbb.
var fooIntVar: Int32

/// Aaa.  fooFunc1.  Bbb.
fn fooFunc1(_ a: Int32) -> Int32
fn fooFunc1AnonymousParam(_: Int32) -> Int32
fn fooFunc3(_ a: Int32, _ b: Float, _ c: Double, _ d: UnsafeMutablePointer<Int32>!) -> Int32
fn fooFuncWithBlock(_ blk: (@escaping (Float) -> Int32)!)
fn fooFuncWithFunctionPointer(_ fptr: (@escaping @convention(c) (Float) -> Int32)!)
fn fooFuncNoreturn1() -> Never
fn fooFuncNoreturn2() -> Never

/**
 * Aaa.  fooFuncWithComment1.  Bbb.
 * Ccc.
 *
 * Ddd.
 */
fn fooFuncWithComment1()

/*!
  Aaa.  fooFuncWithComment2.  Bbb.
 */
fn fooFuncWithComment2()

/**
 * Aaa.  fooFuncWithComment3.  Bbb.
 */
/**
 * Ccc.
 */
fn fooFuncWithComment3()

/**
 * Aaa.  fooFuncWithComment4.  Bbb.
 */
/// Ddd.
fn fooFuncWithComment4()

/// Aaa.  fooFuncWithComment5.  Bbb.
/// Ccc.
///
/// Ddd.
fn fooFuncWithComment5()

/// Aaa.  redeclaredInMultipleModulesFunc1.  Bbb.
fn redeclaredInMultipleModulesFunc1(_ a: Int32) -> Int32
@available(*, unavailable, message: "Variadic function is unavailable")
fn fooFuncUsingVararg(_ a: Int32, _ varargs: Any...) -> Int32

/// Aaa.  FooProtocolBase.  Bbb.
protocol FooProtocolBase {

  /// Aaa.  fooProtoFunc.  Bbb.
  /// Ccc.
  fn fooProtoFunc()

  /// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.
  /// Ccc.
  fn fooProtoFuncWithExtraIndentation1()

  /**
   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.
   * Ccc.
   */
  fn fooProtoFuncWithExtraIndentation2()
  static fn fooProtoClassFunc()
  var fooProperty1: Int32 { get set }
  var fooProperty2: Int32 { get set }
  var fooProperty3: Int32 { get }
}
protocol FooProtocolDerived : FooProtocolBase {
}
class FooClassBase {
  class fn fooBaseInstanceFunc0()
  fn fooBaseInstanceFunc0()
  class fn fooBaseInstanceFunc1(_ anObject: AnyObject!) -> FooClassBase!
  fn fooBaseInstanceFunc1(_ anObject: AnyObject!) -> FooClassBase!
  init!()
  convenience init!(float f: Float)
  class fn fooBaseInstanceFuncOverridden()
  fn fooBaseInstanceFuncOverridden()
  class fn fooBaseClassFunc0()
  /*not inherited*/ init!(_ x: Int32)
  @available(*, unavailable, message: "use object construction 'FooClassBase(_:)'")
  class fn fooClassBase(_ x: Int32) -> FooClassBase!
}

/// Aaa.  FooClassDerived.  Bbb.
class FooClassDerived : FooClassBase, FooProtocolDerived {
  var fooProperty1: Int32
  var fooProperty2: Int32
  var fooProperty3: Int32 { get }
  fn fooInstanceFunc0()
  fn fooInstanceFunc1(_ a: Int32)
  fn fooInstanceFunc2(_ a: Int32, withB b: Int32)
  fn fooBaseInstanceFuncOverridden()
  class fn fooClassFunc0()
  init!()
  convenience init!(float f: Float)

  /// Aaa.  fooProtoFunc.  Bbb.
  /// Ccc.
  fn fooProtoFunc()

  /// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.
  /// Ccc.
  fn fooProtoFuncWithExtraIndentation1()

  /**
   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.
   * Ccc.
   */
  fn fooProtoFuncWithExtraIndentation2()
  class fn fooProtoClassFunc()
}
typealias typedef_int_t = Int32
var FOO_MACRO_1: Int32 { get }
var FOO_MACRO_2: Int32 { get }
var FOO_MACRO_3: Int32 { get }
var FOO_MACRO_4: UInt32 { get }
var FOO_MACRO_5: UInt64 { get }
var FOO_MACRO_6: typedef_int_t { get }
var FOO_MACRO_7: typedef_int_t { get }
var FOO_MACRO_8: Int8 { get }
var FOO_MACRO_9: Int32 { get }
var FOO_MACRO_10: Int16 { get }
var FOO_MACRO_11: Int { get }
var FOO_MACRO_OR: Int32 { get }
var FOO_MACRO_AND: Int32 { get }
var FOO_MACRO_BITWIDTH: UInt64 { get }
var FOO_MACRO_SIGNED: Int32 { get }
var FOO_MACRO_REDEF_1: Int32 { get }
var FOO_MACRO_REDEF_2: Int32 { get }
fn theLastDeclInFoo()
fn _internalTopLevelFunc()
struct _InternalStruct {
  var x: Int32
  init()
  init(x: Int32)
}
extension FooClassBase {
  class fn _internalMeth1() -> AnyObject!
  fn _internalMeth1() -> AnyObject!
}
extension FooClassBase {
  class fn _internalMeth2() -> AnyObject!
  fn _internalMeth2() -> AnyObject!
  class fn nonInternalMeth() -> AnyObject!
  fn nonInternalMeth() -> AnyObject!
}
extension FooClassBase {
  class fn _internalMeth3() -> AnyObject!
  fn _internalMeth3() -> AnyObject!
}
protocol _InternalProt {
}
class ClassWithInternalProt : _InternalProt {
}
class FooClassPropertyOwnership : FooClassBase {
  unowned(unsafe) var assignable: @sil_unmanaged AnyObject!
  unowned(unsafe) var unsafeAssignable: @sil_unmanaged AnyObject!
  var retainable: AnyObject!
  var strongRef: AnyObject!
  @NSCopying var copyable: AnyObject!
  weak var weakRef: @sil_weak AnyObject!
  var scalar: Int32
  init!()
  convenience init!(float f: Float)
}
class FooClassWithClassProperties : FooClassBase {
  unowned(unsafe) class var assignable: @sil_unmanaged AnyObject!
  unowned(unsafe) class var unsafeAssignable: @sil_unmanaged AnyObject!
  class var retainable: AnyObject!
  class var strongRef: AnyObject!
  @NSCopying class var copyable: AnyObject!
  weak class var weakRef: @sil_weak AnyObject!
  class var scalar: Int32
  init!()
  convenience init!(float f: Float)
}
@available(*, unavailable, message: "use 'nil' instead of this imported macro")
var FOO_NIL: ()
class FooUnavailableMembers : FooClassBase {
  convenience init!(int i: Int32)
  @available(*, unavailable, message: "use object construction 'FooUnavailableMembers(int:)'")
  class fn withInt(_ i: Int32) -> Self!
  @available(*, unavailable, message: "x")
  fn unavailable()
  @available(*, unavailable, message: "Not available in Codira")
  fn languageUnavailable()
  @available(*, deprecated, message: "x")
  fn deprecated()
  @available(OSX 10.1, *)
  fn availabilityIntroduced()
  @available(OSX, unavailable, deprecated: 10.1, message: "APIs deprecated as of OS X 10.9 and earlier are unavailable in Codira")
  fn availabilityDeprecated()
  @available(OSX, obsoleted: 10.1)
  fn availabilityObsoleted()
  @available(OSX, unavailable)
  fn availabilityUnavailable()
  @available(OSX, introduced: 10.1, message: "x")
  fn availabilityIntroducedMsg()
  @available(OSX, unavailable, deprecated: 10.1, message: "x")
  fn availabilityDeprecatedMsg()
  @available(OSX, obsoleted: 10.1, message: "x")
  fn availabilityObsoletedMsg()
  @available(OSX, unavailable, message: "x")
  fn availabilityUnavailableMsg()
  init!()
  convenience init!(float f: Float)
}
class FooCFType {
}
@available(*, unavailable, message: "Core Foundation objects are automatically memory managed")
fn FooCFTypeRelease(_: FooCFType!)
class FooRepeatedMembers : FooClassBase {
  fn repeatedMethod()
  fn anotherMethod()
  init!()
  convenience init!(float f: Float)
}
extension FooRepeatedMembers {
  var repeatedPropertyInCategory: Int32
  fn repeatedMethodInCategory()
}
extension FooRepeatedMembers {
  var repeatedPropertyFromCategory: Int32
  fn repeatedMethodFromCategory()
}
enum SCNFilterMode : Int {
  init?(rawValue: Int)
  var rawValue: Int { get }
  case none
  case nearest
  case linear
  @available(*, unavailable)
  case SCNNoFiltering
}
fn fooSubFunc1(_ a: Int32) -> Int32
struct FooSubEnum1 : RawRepresentable, Equatable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
}
var FooSubEnum1X: FooSubEnum1 { get }
var FooSubEnum1Y: FooSubEnum1 { get }
var FooSubUnnamedEnumeratorA1: Int { get }
