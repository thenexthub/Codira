// RUN: %empty-directory(%t)

// RUN: %target-language-ide-test  -F %S/Inputs/custom-frameworks -print-module -source-filename %s -module-to-print=APINotesFrameworkTest -function-definitions=false -language-version 5 | %FileCheck -check-prefix=CHECK-LANGUAGE-5 %s

// RUN: %target-language-ide-test  -F %S/Inputs/custom-frameworks -print-module -source-filename %s -module-to-print=APINotesFrameworkTest -function-definitions=false -language-version 4 | %FileCheck -check-prefix=CHECK-LANGUAGE-4 %s

// CHECK-LANGUAGE-5: fn jumpTo(x: Double, y: Double, z: Double)
// CHECK-LANGUAGE-4: fn jumpTo(x: Double, y: Double, z: Double)

// CHECK-LANGUAGE-5: fn accept(_ ptr: UnsafeMutablePointer<Double>)
// CHECK-LANGUAGE-4: fn acceptPointer(_ ptr: UnsafeMutablePointer<Double>?)

// CHECK-LANGUAGE-5: fn normallyUnchanged()
// CHECK-LANGUAGE-5: @available(language, obsoleted: 4.2, renamed: "normallyUnchanged()")
// CHECK-LANGUAGE-5-NEXT: fn normallyUnchangedButChangedInCodira4()
// CHECK-LANGUAGE-4: @available(language, obsoleted: 3, renamed: "normallyUnchangedButChangedInCodira4()")
// CHECK-LANGUAGE-4-NEXT: fn normallyUnchanged()
// CHECK-LANGUAGE-4: fn normallyUnchangedButChangedInCodira4()


// CHECK-LANGUAGE-5: fn normallyChanged()
// CHECK-LANGUAGE-5-NEXT: @available(language, obsoleted: 4.2, renamed: "normallyChanged()")
// CHECK-LANGUAGE-5-NEXT: fn normallyChangedButSpecialInCodira4()
// CHECK-LANGUAGE-5-NEXT: @available(language, obsoleted: 3, renamed: "normallyChanged()")
// CHECK-LANGUAGE-5-NEXT: fn normallyChangedOriginal()
// CHECK-LANGUAGE-4: @available(language, introduced: 4.2, renamed: "normallyChangedButSpecialInCodira4()")
// CHECK-LANGUAGE-4-NEXT: fn normallyChanged()
// CHECK-LANGUAGE-4-NEXT: fn normallyChangedButSpecialInCodira4()
// CHECK-LANGUAGE-4-NEXT: @available(language, obsoleted: 3, renamed: "normallyChangedButSpecialInCodira4()")
// CHECK-LANGUAGE-4-NEXT: fn normallyChangedOriginal()

// CHECK-LANGUAGE-5: @available(language, obsoleted: 4.2, renamed: "NormallyUnchangedWrapper")
// CHECK-LANGUAGE-5-NEXT: typealias NormallyUnchangedButChangedInCodira4Wrapper = NormallyUnchangedWrapper
// CHECK-LANGUAGE-5: struct NormallyUnchangedWrapper {
// CHECK-LANGUAGE-4: typealias NormallyUnchangedButChangedInCodira4Wrapper = NormallyUnchangedWrapper
// CHECK-LANGUAGE-4-NEXT: struct NormallyUnchangedWrapper {

// CHECK-LANGUAGE-5: @available(language, obsoleted: 4.2, renamed: "NormallyChangedWrapper")
// CHECK-LANGUAGE-5-NEXT: typealias NormallyChangedButSpecialInCodira4Wrapper = NormallyChangedWrapper
// CHECK-LANGUAGE-5: @available(language, obsoleted: 3, renamed: "NormallyChangedWrapper")
// CHECK-LANGUAGE-5-NEXT: typealias NormallyChangedOriginalWrapper = NormallyChangedWrapper
// CHECK-LANGUAGE-5: struct NormallyChangedWrapper {
// CHECK-LANGUAGE-4: typealias NormallyChangedButSpecialInCodira4Wrapper = NormallyChangedWrapper
// CHECK-LANGUAGE-4-NEXT: @available(language, obsoleted: 3, renamed: "NormallyChangedButSpecialInCodira4Wrapper")
// CHECK-LANGUAGE-4-NEXT: typealias NormallyChangedOriginalWrapper = NormallyChangedButSpecialInCodira4Wrapper
// CHECK-LANGUAGE-4-NEXT: struct NormallyChangedWrapper {


// RUN: not %target-language-frontend -typecheck -F %S/Inputs/custom-frameworks -language-version 5 %s 2>&1 | %FileCheck -check-prefix=CHECK-DIAGS -check-prefix=CHECK-DIAGS-5 %s
// RUN: not %target-language-frontend -typecheck -F %S/Inputs/custom-frameworks -language-version 4 %s 2>&1 | %FileCheck -check-prefix=CHECK-DIAGS -check-prefix=CHECK-DIAGS-4 %s

// RUN: %target-language-frontend -emit-silgen -F %S/Inputs/custom-frameworks -language-version 4 %s -DSILGEN 2>&1 | %FileCheck -check-prefix=CHECK-SILGEN -check-prefix=CHECK-SILGEN-4 %s
// RUN: %target-language-frontend -emit-silgen -F %S/Inputs/custom-frameworks -language-version 5 %s -DSILGEN 2>&1 | %FileCheck -check-prefix=CHECK-SILGEN -check-prefix=CHECK-SILGEN-5 %s

import APINotesFrameworkTest

#if !SILGEN
fn testRenamedTopLevelDiags() {
  var value = 0.0

  // CHECK-DIAGS-5-NOT: versioned.code:[[@LINE+1]]:
  accept(&value)
  // CHECK-DIAGS-4: versioned.code:[[@LINE-1]]:3: error: 'accept' has been renamed to 'acceptPointer(_:)'
  // CHECK-DIAGS-4: note: 'accept' was introduced in Codira 4.2

  // CHECK-DIAGS-4-NOT: versioned.code:[[@LINE+1]]:
  acceptPointer(&value)
  // CHECK-DIAGS-5: versioned.code:[[@LINE-1]]:3: error: 'acceptPointer' has been renamed to 'accept(_:)'
  // CHECK-DIAGS-5: note: 'acceptPointer' was obsoleted in Codira 4.2

  acceptDoublePointer(&value)
  // CHECK-DIAGS: versioned.code:[[@LINE-1]]:3: error: 'acceptDoublePointer' has been renamed to
  // CHECK-DIAGS-5-SAME: 'accept(_:)'
  // CHECK-DIAGS-4-SAME: 'acceptPointer(_:)'
  // CHECK-DIAGS: note: 'acceptDoublePointer' was obsoleted in Codira 3

  oldAcceptDoublePointer(&value)
  // CHECK-DIAGS: versioned.code:[[@LINE-1]]:3: error: 'oldAcceptDoublePointer' has been renamed to
  // CHECK-DIAGS-5-SAME: 'accept(_:)'
  // CHECK-DIAGS-4-SAME: 'acceptPointer(_:)'
  // CHECK-DIAGS: note: 'oldAcceptDoublePointer' has been explicitly marked unavailable here

  _ = SomeCStruct()
  // CHECK-DIAGS: versioned.code:[[@LINE-1]]:7: error: 'SomeCStruct' has been renamed to
  // CHECK-DIAGS-5-SAME: 'VeryImportantCStruct'
  // CHECK-DIAGS-4-SAME: 'ImportantCStruct'
  // CHECK-DIAGS: note: 'SomeCStruct' was obsoleted in Codira 3

  // CHECK-DIAGS-4-NOT: versioned.code:[[@LINE+1]]:
  _ = ImportantCStruct()
  // CHECK-DIAGS-5: versioned.code:[[@LINE-1]]:7: error: 'ImportantCStruct' has been renamed to 'VeryImportantCStruct'
  // CHECK-DIAGS-5: note: 'ImportantCStruct' was obsoleted in Codira 4.2

  // CHECK-DIAGS-5-NOT: versioned.code:[[@LINE+1]]:
  _ = VeryImportantCStruct()
  // CHECK-DIAGS-4-NOTE: versioned.code:[[@LINE-1]]:

  // CHECK-DIAGS-4-NOT: versioned.code:[[@LINE+1]]:
  immutable s = InnerInCodira5()
  // CHECK-DIAGS-5: versioned.code:[[@LINE-1]]:11: error: 'InnerInCodira5' has been renamed to 'Outer.Inner'
  // CHECK-DIAGS-5: note: 'InnerInCodira5' was obsoleted in Codira 4.2
  _ = s.value
  // CHECK-DIAGS-5-NOT: versioned.code:[[@LINE-1]]:

  // CHECK-DIAGS-5-NOT: versioned.code:[[@LINE+1]]:
  immutable t = Outer.Inner()
  // CHECK-DIAGS-4-NOT: versioned.code:[[@LINE-1]]:
  _ = s.value
  // CHECK-DIAGS-4-NOT: versioned.code:[[@LINE-1]]:
  _ = t
}

fn testAKA(structValue: ImportantCStruct, aliasValue: ImportantCAlias) {
  immutable _: Int = structValue
  // CHECK-DIAGS-4: versioned.code:[[@LINE-1]]:16: error: cannot convert value of type 'ImportantCStruct' to specified type 'Int'

  immutable _: Int = aliasValue
  // CHECK-DIAGS-4: versioned.code:[[@LINE-1]]:16: error: cannot convert value of type 'ImportantCAlias' (aka 'Int32') to specified type 'Int'

  immutable optStructValue: Optional = structValue
  immutable _: Int = optStructValue
  // CHECK-DIAGS-4: versioned.code:[[@LINE-1]]:16: error: cannot convert value of type 'ImportantCStruct?' to specified type 'Int'

  immutable optAliasValue: Optional = aliasValue
  immutable _: Int = optAliasValue
  // CHECK-DIAGS-4: versioned.code:[[@LINE-1]]:16: error: cannot convert value of type 'ImportantCAlias?' (aka 'Optional<Int32>') to specified type 'Int'
}

fn testRenamedEnumConstants() {
  _ = AnonymousEnumValue // okay

  // CHECK-DIAGS-5: [[@LINE+1]]:7: error: 'AnonymousEnumRenamed' has been renamed to 'AnonymousEnumRenamedCodiraUnversioned'
  _ = AnonymousEnumRenamed
  // CHECK-DIAGS-4: [[@LINE-1]]:7: error: 'AnonymousEnumRenamed' has been renamed to 'AnonymousEnumRenamedCodira4'

  // CHECK-DIAGS-5-NOT: :[[@LINE+1]]:7:
  _ = AnonymousEnumRenamedCodiraUnversioned
  // CHECK-DIAGS-4: [[@LINE-1]]:7: error: 'AnonymousEnumRenamedCodiraUnversioned' has been renamed to 'AnonymousEnumRenamedCodira4'

  // CHECK-DIAGS-5: [[@LINE+1]]:7: error: 'AnonymousEnumRenamedCodira4' has been renamed to 'AnonymousEnumRenamedCodiraUnversioned'
  _ = AnonymousEnumRenamedCodira4
  // CHECK-DIAGS-4-NOT: :[[@LINE-1]]:7:
}

fn testRenamedUnknownEnum() {
  _ = UnknownEnumValue // okay

  // CHECK-DIAGS-5: [[@LINE+1]]:7: error: 'UnknownEnumRenamed' has been renamed to 'UnknownEnumRenamedCodiraUnversioned'
  _ = UnknownEnumRenamed
  // CHECK-DIAGS-4: [[@LINE-1]]:7: error: 'UnknownEnumRenamed' has been renamed to 'UnknownEnumRenamedCodira4'

  // CHECK-DIAGS-5-NOT: :[[@LINE+1]]:7:
  _ = UnknownEnumRenamedCodiraUnversioned
  // CHECK-DIAGS-4: [[@LINE-1]]:7: error: 'UnknownEnumRenamedCodiraUnversioned' has been renamed to 'UnknownEnumRenamedCodira4'

  // CHECK-DIAGS-5: [[@LINE+1]]:7: error: 'UnknownEnumRenamedCodira4' has been renamed to 'UnknownEnumRenamedCodiraUnversioned'
  _ = UnknownEnumRenamedCodira4
  // CHECK-DIAGS-4-NOT: :[[@LINE-1]]:7:
}

fn testRenamedTrueEnum() {
  // CHECK-DIAGS: [[@LINE+1]]:7: error: cannot find 'TrueEnumValue' in scope
  _ = TrueEnumValue

  // CHECK-DIAGS: [[@LINE+1]]:16: error: type 'TrueEnum' has no member 'TrueEnumValue'
  _ = TrueEnum.TrueEnumValue

  // CHECK-DIAGS: [[@LINE+1]]:16: error: 'Value' has been renamed to 'value'
  _ = TrueEnum.Value

  _ = TrueEnum.value // okay

  // CHECK-DIAGS: [[@LINE+1]]:7: error: cannot find 'TrueEnumRenamed' in scope
  _ = TrueEnumRenamed

  // CHECK-DIAGS: [[@LINE+1]]:16: error: type 'TrueEnum' has no member 'TrueEnumRenamed'
  _ = TrueEnum.TrueEnumRenamed

  // CHECK-DIAGS-5: [[@LINE+1]]:16: error: 'Renamed' has been renamed to 'renamedCodiraUnversioned'
  _ = TrueEnum.Renamed
  // CHECK-DIAGS-4: [[@LINE-1]]:16: error: 'Renamed' has been renamed to 'renamedCodira4'

  // CHECK-DIAGS: [[@LINE+1]]:16: error: type 'TrueEnum' has no member 'renamed'
  _ = TrueEnum.renamed

  // CHECK-DIAGS-5-NOT: :[[@LINE+1]]:16:
  _ = TrueEnum.renamedCodiraUnversioned
  // CHECK-DIAGS-4: [[@LINE-1]]:16: error: 'renamedCodiraUnversioned' has been renamed to 'renamedCodira4'

  // CHECK-DIAGS-5: [[@LINE+1]]:16: error: 'renamedCodira4' has been renamed to 'renamedCodiraUnversioned'
  _ = TrueEnum.renamedCodira4
  // CHECK-DIAGS-4-NOT: :[[@LINE-1]]:16:

  // CHECK-DIAGS: [[@LINE+1]]:7: error: cannot find 'TrueEnumAliasRenamed' in scope
  _ = TrueEnumAliasRenamed

  // CHECK-DIAGS: [[@LINE+1]]:16: error: type 'TrueEnum' has no member 'TrueEnumAliasRenamed'
  _ = TrueEnum.TrueEnumAliasRenamed

  // CHECK-DIAGS-5: [[@LINE+1]]:16: error: 'AliasRenamed' has been renamed to 'aliasRenamedCodiraUnversioned'
  _ = TrueEnum.AliasRenamed
  // CHECK-DIAGS-4: [[@LINE-1]]:16: error: 'AliasRenamed' has been renamed to 'aliasRenamedCodira4'

  // CHECK-DIAGS: [[@LINE+1]]:16: error: type 'TrueEnum' has no member 'aliasRenamed'
  _ = TrueEnum.aliasRenamed

  // CHECK-DIAGS-5-NOT: :[[@LINE+1]]:16:
  _ = TrueEnum.aliasRenamedCodiraUnversioned
  // CHECK-DIAGS-4: [[@LINE-1]]:16: error: 'aliasRenamedCodiraUnversioned' has been renamed to 'aliasRenamedCodira4'

  // CHECK-DIAGS-5: [[@LINE+1]]:16: error: 'aliasRenamedCodira4' has been renamed to 'aliasRenamedCodiraUnversioned'
  _ = TrueEnum.aliasRenamedCodira4
  // CHECK-DIAGS-4-NOT: :[[@LINE-1]]:16:
}

fn testRenamedOptionyEnum() {
  // CHECK-DIAGS: [[@LINE+1]]:7: error: cannot find 'OptionyEnumValue' in scope
  _ = OptionyEnumValue

  // CHECK-DIAGS: [[@LINE+1]]:19: error: type 'OptionyEnum' has no member 'OptionyEnumValue'
  _ = OptionyEnum.OptionyEnumValue

  // CHECK-DIAGS: [[@LINE+1]]:19: error: 'Value' has been renamed to 'value'
  _ = OptionyEnum.Value

  _ = OptionyEnum.value // okay

  // CHECK-DIAGS: [[@LINE+1]]:7: error: cannot find 'OptionyEnumRenamed' in scope
  _ = OptionyEnumRenamed

  // CHECK-DIAGS: [[@LINE+1]]:19: error: type 'OptionyEnum' has no member 'OptionyEnumRenamed'
  _ = OptionyEnum.OptionyEnumRenamed

  // CHECK-DIAGS-5: [[@LINE+1]]:19: error: 'Renamed' has been renamed to 'renamedCodiraUnversioned'
  _ = OptionyEnum.Renamed
  // CHECK-DIAGS-4: [[@LINE-1]]:19: error: 'Renamed' has been renamed to 'renamedCodira4'

  // CHECK-DIAGS: [[@LINE+1]]:19: error: type 'OptionyEnum' has no member 'renamed'
  _ = OptionyEnum.renamed

  // CHECK-DIAGS-5-NOT: :[[@LINE+1]]:19:
  _ = OptionyEnum.renamedCodiraUnversioned
  // CHECK-DIAGS-4: [[@LINE-1]]:19: error: 'renamedCodiraUnversioned' has been renamed to 'renamedCodira4'

  // CHECK-DIAGS-5: [[@LINE+1]]:19: error: 'renamedCodira4' has been renamed to 'renamedCodiraUnversioned'
  _ = OptionyEnum.renamedCodira4
  // CHECK-DIAGS-4-NOT: :[[@LINE-1]]:19:
}

#endif

#if !language(>=5)

fn useCodira4Name(_: ImportantCStruct) {}
// CHECK-SILGEN-4: sil hidden [ossa] @$s9versioned13useCodira4NameyySo11SomeCStructVF

fn useNewlyNested(_: InnerInCodira5) {}
// CHECK-SILGEN-4: sil hidden [ossa] @$s9versioned14useNewlyNestedyySo13InnerInCodira5VF
#endif

fn useCodira5Name(_: VeryImportantCStruct) {}
// CHECK-SILGEN: sil hidden [ossa] @$s9versioned13useCodira5NameyySo11SomeCStructVF



#if language(>=5)
fn testCodiraWrapperInCodira5() {
  _ = EnclosingStruct.Identifier.member
  immutable _: EnclosingStruct.Identifier = .member
}

#else
fn testCodiraWrapperInCodira4() {
  _ = EnclosingStruct.Identifier.member
  immutable _: EnclosingStruct.Identifier = .member
}
#endif
