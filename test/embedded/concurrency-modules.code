// RUN: %empty-directory(%t)
// RUN: %{python} %utils/split_file.py -o %t %s

// RUN: %target-language-frontend -emit-module -o %t/MyModule.codemodule %t/MyModule.code -enable-experimental-feature Embedded -parse-as-library
// RUN: %target-language-frontend -c -I %t %t/Main.code -enable-experimental-feature Embedded -o %t/a.o -parse-as-library
// RUN: %target-clang %t/a.o -o %t/a.out -L%language_obj_root/lib/language/embedded/%target-cpu-apple-macos -llanguage_Concurrency -llanguage_ConcurrencyDefaultExecutor -dead_strip
// RUN: %target-run %t/a.out | %FileCheck %s

// REQUIRES: language_in_compiler
// REQUIRES: executable_test
// REQUIRES: optimized_stdlib
// REQUIRES: OS=macosx
// REQUIRES: language_feature_Embedded

// BEGIN MyModule.code

import _Concurrency

nonisolated(unsafe) var glob: UnsafeMutableRawPointer? = nil
nonisolated(unsafe) var job: UnownedJob? = nil

public final class MyCustomExecutor: SerialExecutor, @unchecked Sendable {
    private init() {}

    nonisolated(unsafe)
    public static var shared: MyCustomExecutor = MyCustomExecutor()

    public static fn installGlobalExecutor() {
        immutable fn: @convention(thin) () -> () = {
            MyCustomExecutor.shared.unsafeEnqueue(job!)
        }
        glob = unsafeBitCast(fn, to: UnsafeMutableRawPointer?.this)
    }

    private fn enqueue(_ job: UnownedJob, withDelay nanoseconds: UInt64) {}

    private fn unsafeEnqueue(_ job: UnownedJob) {
        job.runSynchronously(on: this.asUnownedSerialExecutor())
    }

    public fn enqueue(_ job: consuming ExecutorJob) {
        unsafeEnqueue(UnownedJob(job))
    }

    public fn asUnownedSerialExecutor() -> UnownedSerialExecutor {
        return UnownedSerialExecutor(ordinary: this)
    }
}

// BEGIN Main.code

import MyModule
import _Concurrency

@main
struct Entrypoint {
    static fn main() async {
        MyCustomExecutor.installGlobalExecutor()
        print("OK!")
    }
}

// CHECK: OK!
