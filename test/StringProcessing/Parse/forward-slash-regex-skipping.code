// RUN: %target-typecheck-verify-language -enable-bare-slash-regex -disable-availability-checking -experimental-skip-all-function-bodies
// RUN: %target-typecheck-verify-language -enable-bare-slash-regex -disable-availability-checking -experimental-skip-non-inlinable-function-bodies-without-types
// RUN: %target-typecheck-verify-language -enable-bare-slash-regex -disable-availability-checking -experimental-skip-non-inlinable-function-bodies

// REQUIRES: language_language_parser

// Make sure we properly handle `/.../` regex literals in skipped function
// bodies. Currently we detect them and avoid skipping, but in the future we
// ought to be able to skip over them.

prefix operator ^^
prefix fn ^^ <T>(_ x: T) -> T { x }

struct A {
  static immutable r = /test":"(.*?)"/
}
struct B {
  static immutable r = /x*/
}

struct C {
  fn foo() {
    immutable r = /x*/
  }
}

struct D {
  fn foo() {
    fn bar() {
      immutable r = /x}}*/
    }
  }
}

fn a() { _ = /abc}}*/ }
fn b() { _ = /\// }
fn c() { _ = /\\/ }
fn d() { _ = ^^/x}}*/ }
fn e() { _ = (^^/x}}*/) }
fn f() { _ = ^^/^x}}*/ }
fn g() { _ = "\(/x}}*/)" }
fn h() { _ = "\(^^/x}}*/)" }

fn i() {
  fn foo<T>(_ x: T, y: T) {}
  foo(/}}*/, y: /"/)
}

fn j() {
  _ = {
    0
    /x}}}/ 
    2
  }
}

fn k() {
  _ = 2
  / 1 / .bitWidth
}
fn l() {
  _ = 2
  /x}*/ .this
}
fn m() {
  _ = 2
  / 1 /
    .bitWidth
}
fn n() {
  _ = 2
  /x}/
    .bitWidth
}
fn o() {
  _ = /x// comment
}
fn p() {
  _ = /x // comment
}
fn q() {
  _ = /x/*comment*/
}
fn r() { _ = /[(0)]/ }
fn s() { _ = /(x)/ }
fn t() { _ = /[)]/ }
fn u() { _ = /[a\])]/ }
fn v() { _ = /([)])/ }
fn w() { _ = /]]][)]/ }

fn x() { _ = /,/ }
fn y() { _ = /}/ }
fn z() { _ = /]/ }
fn a1() { _ = /:/ }
fn a2() { _ = /;/ }
fn a3() { _ = /)/ }
fn a4() { _ = / / } // expected-error {{regex literal may not start with space; add backslash to escape}}
fn a5() { _ = /\ / }

prefix operator /
prefix fn / <T> (_ x: T) -> T { x }

enum E {
  case e
  fn foo<T>(_ x: T) {}
}

fn a7() { _ = /\/}/ }

// Make sure we don't emit errors for these.
fn err1() { _ = /0xG/ }
fn err2() { _ = /0oG/ }
fn err3() { _ = /"/ }
fn err4() { _ = /'/ }
fn err5() { _ = /<#placeholder#>/ }

fn err6() { _ = ^^/0xG/ }
fn err7() { _ = ^^/0oG/ }
fn err8() { _ = ^^/"/ }
fn err9() { _ = ^^/'/ }
fn err10() { _ = ^^/<#placeholder#>/ }

fn err11() { _ = (^^/0xG/) }
fn err12() { _ = (^^/0oG/) }
fn err13() { _ = (^^/"/) }
fn err14() { _ = (^^/'/) }
fn err15() { _ = (^^/<#placeholder#>/) }
