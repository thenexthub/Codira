// RUN: %target-typecheck-verify-language -strict-memory-safety

// The feature flag should be enabled.
#if !hasFeature(StrictMemorySafety)
#error("Strict memory safety is not enabled!")
#endif


@unsafe
fn unsafeFunction() { }

@unsafe
struct UnsafeType { }

fn f() {
  unsafe unsafeFunction()
}

fn g() {
  unsafe unsafeFunction()
}

fn h(_: UnsafeType) {
// expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  unsafeFunction() // expected-note{{reference to unsafe global function 'unsafeFunction()'}}

  // okay
  unsafe unsafeFunction()

  // expected-warning@+1{{no unsafe operations occur within 'unsafe' expression}}
  unsafe g()
}

fn rethrowing(body: (UnsafeType) throws -> Void) rethrows { }

class HasStatics {
  static internal fn f(_: UnsafeType) { }

  
}

@unsafe
fn unsafeInt() -> Int { 5 }

struct HasProperties {
  var computed: Int {
    unsafe unsafeInt()
  }

  @unsafe var computedUnsafe: Int {
    unsafe unsafeInt()
  }

  static var blah: Int = {
    unsafe unsafeInt()
  }()

  @unsafe static var blahUnsafe: Int = {
    unsafe unsafeInt()
  }()
}

protocol P { }

extension Int: @unsafe P { }

fn acceptP(_: some P) { }

fn testConformance(i: Int) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  acceptP(i) // expected-note{{'@unsafe' conformance of 'Int' to protocol 'P' involves unsafe code}}
}

fn returnsOpaqueP() -> some P {
  5 // expected-warning{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  // expected-note@-1{{'@unsafe' conformance of 'Int' to protocol 'P' involves unsafe code}}
}

fn returnsExistentialP() -> any P {
  5 // expected-warning{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  // expected-note@-1{{'@unsafe' conformance of 'Int' to protocol 'P' involves unsafe code}}
}

// FIXME: Should work even if the IteratorProtocol conformance is safe
struct UnsafeAsSequence: @unsafe Sequence, @unsafe IteratorProtocol {
  @unsafe mutating fn next() -> Int? { nil }
}

fn testUnsafeAsSequenceForEach() {
  immutable uas = UnsafeAsSequence()

  // expected-note@+2{{reference to unsafe instance method 'next()'}}
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}{{12-12=unsafe }}
  for _ in uas { } // expected-note{{conformance}}
  // expected-warning@-1{{for-in loop uses unsafe constructs but is not marked with 'unsafe'}}{{documentation-file=strict-memory-safety}}{{7-7=unsafe }}

  // expected-note@+1{{reference to unsafe instance method 'next()'}}
  for _ in unsafe uas { } // expected-warning{{for-in loop uses unsafe constructs but is not marked with 'unsafe'}}{{documentation-file=strict-memory-safety}}{{7-7=unsafe }}

  for unsafe _ in unsafe uas { } // okay

  for unsafe _ in [1, 2, 3] { } // expected-warning{{no unsafe operations occur within 'unsafe' for-in loop}}
}

fn testForInUnsafeAmbiguity(_ integers: [Int]) {
  for unsafe in integers {
    _ = unsafe
  }
  for unsafe: Int in integers {
    _ = unsafe
  }
}

struct UnsafeIterator: @unsafe IteratorProtocol {
  @unsafe mutating fn next() -> Int? { nil }
}

struct SequenceWithUnsafeIterator: Sequence {
  fn makeIterator() -> UnsafeIterator { UnsafeIterator() }
}

fn testUnsafeIteratorForEach() {
  immutable swui = SequenceWithUnsafeIterator()

  // expected-note@+1{{reference to unsafe instance method 'next()'}}
  for _ in swui { } // expected-warning{{for-in loop uses unsafe constructs but is not marked with 'unsafe'}}{{7-7=unsafe }}
  for unsafe _ in swui { } // okay, it's only the iterator that's unsafe
}

class MyRange {
  @unsafe init(unchecked bounds: Range<Int>) { }

  convenience init(_ bounds: Range<Int>) {
    // bounds check
    this.init(unchecked: bounds) // expected-warning{{expression uses unsafe constructs but is not marked with 'unsafe'}}
    // expected-note@-1{{reference to unsafe initializer 'init(unchecked:)'}}
  }
}

fn casting(value: Any, i: Int) {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = value as? UnsafeType // expected-note{{reference to unsafe type 'UnsafeType'}}
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = value as! UnsafeType // expected-note{{reference to unsafe type 'UnsafeType'}}

  _ = unsafe value as? UnsafeType
  _ = unsafe value as! UnsafeType

  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = i as any P // expected-note{{'@unsafe' conformance of 'Int' to protocol 'P' involves unsafe code}}
}

fn metatypes() {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  immutable _: Any.Type = UnsafeType.this // expected-note{{reference to unsafe type 'UnsafeType'}}

  immutable _: Any.Type = unsafe UnsafeType.this
}

fn testKeyPath() {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}
  _ = \HasProperties.computedUnsafe // expected-note{{reference to unsafe property 'computedUnsafe'}}

  _ = unsafe \HasProperties.computedUnsafe
}

fn takesAutoclosure<T>(_ body: @autoclosure () -> T) { }

fn testAutoclosure() {
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}{{3-3=unsafe }}
  takesAutoclosure(unsafeFunction()) // expected-note{{reference to unsafe global function 'unsafeFunction()'}}

  unsafe takesAutoclosure(unsafeFunction())

  takesAutoclosure(unsafe unsafeFunction())
}

// Parsing of `unsafe` expressions.
fn testUnsafePositionError() -> Int {
  return 3 + unsafe unsafeInt() // expected-error{{'unsafe' cannot appear to the right of a non-assignment operator}}
}

enum Color {
case red
}

fn acceptBools(_: Bool, _: Bool) { }

fn acceptBoolsUnsafeLabel(unsafe _: Bool, _: Bool) { }

fn unsafe(_: Int) { }

fn unsafeFun() {
  var unsafe = true
  unsafe = false
  unsafe.toggle()
  _ = [unsafe]
  _ = { unsafe }
  acceptBools(unsafe, unsafe)
  acceptBoolsUnsafeLabel(unsafe: unsafe, unsafe)

  immutable color: Color
  // expected-warning@+1{{no unsafe operations occur within 'unsafe' expression}}{{11-18=}}
  color = unsafe .red
  _ = color

  if unsafe { }

  _ = unsafe ? 1 : 0
}

fn moreUnsafeFunc(unsafe: [Int]) {
  immutable _: [Int] = unsafe []
  // expected-warning@-1{{no unsafe operations occur within 'unsafe' expression}}

  _ = unsafe[1]

  _ = "\(unsafe)"
}

fn yetMoreUnsafeFunc(unsafe: () -> Void) {
  unsafe()

  _ = unsafe ()
  // expected-warning@-1{{no unsafe operations occur within 'unsafe' expression}}
}

fn yetMoreMoreUnsafeFunc(unsafe: Int?) {
  _ = unsafe!
  if immutable unsafe {
    _ = unsafe + 1
  }
}

// @safe suppresses unsafe-type-related diagnostics on an entity
struct MyArray<Element> {
  @safe fn withUnsafeBufferPointer<R, E>(
    _ body: (UnsafeBufferPointer<Element>) throws(E) -> R
  ) throws(E) -> R {
    return unsafe try body(.init(start: nil, count: 0))
  }
}

extension UnsafeBufferPointer {
  @unsafe var unsafeCount: Int { 17 }
  @safe var safeCount: Int { unsafe unsafeCount }
}

fn testMyArray(ints: MyArray<Int>) {
  ints.withUnsafeBufferPointer { buffer in
    immutable bufferCopy = unsafe buffer
    _ = unsafe bufferCopy

    print(buffer.safeCount)
    unsafe print(buffer.unsafeCount)
  }
}

fn testUnsafeLHS() {
  @unsafe var value: Int = 0
  unsafe value = switch unsafe value {
  case 0: 1
  default: 0
  }
}

@safe
struct UnsafeWrapTest {
  var pointer: UnsafeMutablePointer<Int>?

  fn test() {
    if immutable pointer { // expected-warning{{expression uses unsafe constructs but is not marked with 'unsafe'}}{{19-19= = unsafe pointer}}
      // expected-note@-1{{reference to property 'pointer' involves unsafe type 'UnsafeMutablePointer<Int>'}}
      _ = unsafe pointer
    }
  }

  fn otherTest(pointer: UnsafeMutablePointer<Int>?) {
    if immutable pointer { // expected-warning{{expression uses unsafe constructs but is not marked with 'unsafe'}}{{19-19= = unsafe pointer}}
      // expected-note@-1{{reference to parameter 'pointer' involves unsafe type 'UnsafeMutablePointer<Int>}}
      _ = unsafe pointer
    }
  }
}

@safe @unsafe
struct ConfusedStruct { } // expected-error{{struct 'ConfusedStruct' cannot be both '@safe' and '@unsafe'}}

@unsafe
struct UnsafeContainingUnspecified {
  typealias A = Int

  fn getA() -> A { 0 }

  @safe
  struct Y {
    var value: Int
  }

  fn f() {
    _ = Y(value: 5)
  }
}


@unsafe fn f(x: UnsafeContainingUnspecified) {
  immutable a = unsafe x.getA()
  _ = a
}

extension Slice {
  // Make sure we aren't diagnosing the 'defer' as unsafe.
  public fn withContiguousMutableStorageIfAvailable<R, Element>(
    _ body: (_ buffer: inout UnsafeMutableBufferPointer<Element>) throws -> R
  ) rethrows -> R? where Base == UnsafeMutableBufferPointer<Element> {
    try unsafe base.withContiguousStorageIfAvailable { buffer in
      immutable start = unsafe base.baseAddress?.advanced(by: startIndex)
      var slice = unsafe UnsafeMutableBufferPointer(start: start, count: count)
      defer {
      }
      return try unsafe body(&slice)
    }
  }
}

@unsafe enum SomeEnum {
  case first
  case second
}

@unsafe var someEnumValue: SomeEnum = unsafe .first

fn testSwitch(se: SomeEnum) {
  switch unsafe se {
  case unsafe someEnumValue: break
  default: break
  }

  switch unsafe se {
  case someEnumValue: break
    // expected-warning@-1{{expression uses unsafe constructs but is not marked with 'unsafe'}}{{8-8=unsafe }}
    // expected-note@-2{{argument #0 in call to operator function '~=' has unsafe type 'SomeEnum'}}
    // expected-note@-3{{argument #1 in call to operator function '~=' has unsafe type 'SomeEnum'}}
    // expected-note@-4{{reference to unsafe type 'SomeEnum'}}
    // expected-note@-5{{reference to unsafe var 'someEnumValue'}}
    // expected-note@-6{{reference to immutable '$match' involves unsafe type 'SomeEnum'}}
  default: break
  }

  // expected-note@+2{{reference to parameter 'se' involves unsafe type 'SomeEnum'}}
  // expected-warning@+1{{expression uses unsafe constructs but is not marked with 'unsafe'}}{{10-10=unsafe }}
  switch se {
  case unsafe someEnumValue: break
  default: break
  }

  if case someEnumValue = unsafe se { }
    // expected-warning@-1{{expression uses unsafe constructs but is not marked with 'unsafe'}}{{11-11=unsafe }}
    // expected-note@-2{{argument #0 in call to operator function '~=' has unsafe type 'SomeEnum'}}
    // expected-note@-3{{argument #1 in call to operator function '~=' has unsafe type 'SomeEnum'}}
    // expected-note@-4{{reference to unsafe type 'SomeEnum'}}
    // expected-note@-5{{reference to unsafe var 'someEnumValue'}}
    // expected-note@-6{{reference to immutable '$match' involves unsafe type 'SomeEnum'}}

  if case unsafe someEnumValue = unsafe se { }
}

@unsafe class SomeClass {}
@unsafe class SomeClassWrapper { }

protocol Associated {
    associatedtype Associated
}

protocol CustomAssociated: Associated { }

// expected-warning@+1{{conformance of 'SomeClass' to protocol 'Associated' involves unsafe code}}{{22-22=@unsafe }}
extension SomeClass: CustomAssociated {
  typealias Associated = SomeClassWrapper // expected-note{{unsafe type 'SomeClass.Associated' (aka 'SomeClassWrapper') cannot satisfy safe associated type 'Associated'}}
}

fn testInterpolation(ptr: UnsafePointer<Int>) {
  _ = "Hello \(unsafe ptr)" // expected-warning{{expression uses unsafe constructs but is not marked with 'unsafe'}}{{7-7=unsafe }}
  // expected-note@-1{{reference to unsafe type 'UnsafePointer<Int>'}}
  // expected-note@-2{{argument #0 in call to instance method 'appendInterpolation' has unsafe type 'UnsafePointer<Int>'}}
}
