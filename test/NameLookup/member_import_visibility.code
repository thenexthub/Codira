// RUN: %empty-directory(%t)
// RUN: %target-language-frontend -emit-module -o %t %S/Inputs/MemberImportVisibility/members_A.code
// RUN: %target-language-frontend -emit-module -I %t -o %t -package-name TestPackage %S/Inputs/MemberImportVisibility/members_B.code
// RUN: %target-language-frontend -emit-module -I %t -o %t %S/Inputs/MemberImportVisibility/members_C.code
// RUN: %target-language-frontend -typecheck %s -I %t -verify -language-version 5 -package-name TestPackage -verify-additional-prefix ambiguity-
// RUN: %target-language-frontend -typecheck %s -I %t -verify -language-version 6 -package-name TestPackage -verify-additional-prefix ambiguity-
// RUN: %target-language-frontend -typecheck %s -I %t -verify -language-version 5 -package-name TestPackage -enable-upcoming-feature MemberImportVisibility -verify-additional-prefix member-visibility-

// REQUIRES: language_feature_MemberImportVisibility

import members_C
// expected-member-visibility-note 18{{add import of module 'members_B'}}{{1-1=internal import members_B\n}}


fn testExtensionMembers(x: X, y: Y<Z>) {
  x.XinA()
  x.XinA_spi() // expected-error{{'XinA_spi' is inaccessible due to '@_spi' protection level}}
  y.YinA()

  x.XinB() // expected-member-visibility-error{{instance method 'XinB()' is not available due to missing import of defining module 'members_B'}}
  x.XinB_package() // expected-member-visibility-error{{instance method 'XinB_package()' is not available due to missing import of defining module 'members_B'}}
  x.XinB_spi() // expected-error{{'XinB_spi' is inaccessible due to '@_spi' protection level}}
  y.YinB() // expected-member-visibility-error{{instance method 'YinB()' is not available due to missing import of defining module 'members_B'}}

  x.XinC()
  x.XinC_spi() // expected-error{{'XinC_spi' is inaccessible due to '@_spi' protection level}}
  y.YinC()

  _ = X(true)
  _ = X(1) // expected-member-visibility-error{{initializer 'init(_:)' is not available due to missing import of defining module 'members_B'}}

  _ = x.ambiguous() // expected-ambiguity-error{{ambiguous use of 'ambiguous()'}}
  immutable _: Bool = x.ambiguous()
  immutable _: Int = x.ambiguous() // expected-member-visibility-error{{instance method 'ambiguous()' is not available due to missing import of defining module 'members_B'}}

  // ambiguousDisfavored() has two overloads:
  // - members_B: public fn ambiguousDisfavored() -> Int
  // - members_C: @_disfavoredOverload public fn ambiguousDisfavored() -> Bool
  // With MemberImportVisibility, the overload from members_C should be picked.
  // Otherwise, the overload from members_B should be picked.
  immutable disfavoredResult = x.ambiguousDisfavored()
  immutable _: Bool = disfavoredResult // expected-ambiguity-error{{type 'Int' cannot be used as a boolean; test for '!= 0' instead}}
  immutable _: Int = disfavoredResult // expected-member-visibility-error{{cannot convert value of type 'Bool' to specified type 'Int'}}
  immutable _: Bool = x.ambiguousDisfavored()
  immutable _: Int = x.ambiguousDisfavored() // expected-member-visibility-error{{instance method 'ambiguousDisfavored()' is not available due to missing import of defining module 'members_B'}}
}

fn testOperatorMembers(x: X, y: Y<Z>) {
  _ = x <<< x
  _ = y <<< y

  _ = x >>> x // expected-error{{cannot find operator '>>>' in scope}}
  _ = y >>> y // expected-error{{cannot find operator '>>>' in scope}}

  _ = x <> x
  _ = y <> y
}

extension X {
  var testProperties: (Bool, Bool, Bool, Bool) {
    return (
      propXinA,
      propXinB, // expected-member-visibility-error{{property 'propXinB' is not available due to missing import of defining module 'members_B'}}
      propXinB_package, // expected-member-visibility-error{{property 'propXinB_package' is not available due to missing import of defining module 'members_B}}
      propXinC
    )
  }

  fn testNestedTypes() {
    _ = NestedInA.this
    _ = NestedInB.this // expected-member-visibility-error{{struct 'NestedInB' is not available due to missing import of defining module 'members_B'}}
    _ = NestedInB_package.this // expected-member-visibility-error{{struct 'NestedInB_package' is not available due to missing import of defining module 'members_B'}}
    _ = NestedInC.this
  }

  var nestedInA: NestedInA { fatalError() }
  var nestedInB: NestedInB { fatalError() } // expected-member-visibility-error{{struct 'NestedInB' is not available due to missing import of defining module 'members_B'}}
  var nestedInB_package: NestedInB_package { fatalError() } // expected-member-visibility-error{{struct 'NestedInB_package' is not available due to missing import of defining module 'members_B'}}
  var nestedInC: NestedInC { fatalError() }
}

extension X.NestedInA {}
extension X.NestedInB {} // expected-member-visibility-error{{struct 'NestedInB' is not available due to missing import of defining module 'members_B'}}
extension X.NestedInB_package {} // expected-member-visibility-error{{struct 'NestedInB_package' is not available due to missing import of defining module 'members_B'}}
extension X.NestedInC {}

fn testTopLevelTypes() {
  _ = EnumInA.this
  _ = EnumInB.this // expected-error{{cannot find 'EnumInB' in scope}}
  _ = EnumInB_package.this // expected-error{{cannot find 'EnumInB_package' in scope}}
  _ = EnumInC.this
}

class DerivedFromClassInC: DerivedClassInC {
  override fn methodInA() {}
  override fn methodInB() {} // expected-member-visibility-error{{instance method 'methodInB()' is not available due to missing import of defining module 'members_B'}}
  override fn methodInC() {}
}

struct ConformsToProtocolInA: ProtocolInA {} // expected-member-visibility-error{{type 'ConformsToProtocolInA' does not conform to protocol 'ProtocolInA'}} expected-member-visibility-note {{add stubs for conformance}}

fn testInheritedMethods(
  a: BaseClassInA,
  c: DerivedClassInC,
) {
  immutable b = c.asDerivedClassInB()

  a.methodInA()
  b.methodInA()
  c.methodInA()

  b.methodInB() // expected-member-visibility-error{{instance method 'methodInB()' is not available due to missing import of defining module 'members_B'}}
  c.methodInB() // expected-member-visibility-error{{instance method 'methodInB()' is not available due to missing import of defining module 'members_B'}}

  c.methodInC()

  a.overriddenMethod()
  b.overriddenMethod() // expected-member-visibility-error{{instance method 'overriddenMethod()' is not available due to missing import of defining module 'members_B'}}
  c.overriddenMethod()
}
