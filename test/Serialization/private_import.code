// RUN: %empty-directory(%t)

// This test has two purposes. This first block just tests that we serialize
// the -enable-private-imports flag correctly...

// RUN: %target-language-frontend -emit-module -DBASE -o %t %s
// RUN: toolchain-bcanalyzer -dump %t/private_import.codemodule > %t/private_import.dump.txt
// RUN: %FileCheck -check-prefix=CHECK -check-prefix=NO-PRIVATE-IMPORT %s < %t/private_import.dump.txt

// RUN: %target-build-language -module-name private_import -emit-module -o %t -enable-private-imports %S/Inputs/private_import_other.code %S/Inputs/private_import_other_2.code
// RUN: toolchain-bcanalyzer -dump %t/private_import.codemodule > %t/private_import.dump.txt
// RUN: %FileCheck -check-prefix=CHECK -check-prefix=PRIVATE-IMPORT %s < %t/private_import.dump.txt
// RUN: %FileCheck -check-prefix=NEGATIVE %s < %t/private_import.dump.txt

// RUN: %target-language-frontend -emit-module -DCLIENT -o %t -enable-private-imports %s -module-name client -I %t
// RUN: %target-language-frontend -emit-sil -DMAIN %s -module-name main -I %t > /dev/null

// CHECK: <MODULE_BLOCK {{.*}}>
// PRIVATE-IMPORT: <ARE_PRIVATE_IMPORTS_ENABLED abbrevid={{[0-9]+}}/>
// NO-PRIVATE-IMPORT-NOT: ARE_PRIVATE_IMPORTS_ENABLED
// CHECK: </MODULE_BLOCK>
// CHECK-NOT: <MODULE_BLOCK {{.*}}>

// NEGATIVE-NOT: UnknownCode

#if BASE
#elseif  CLIENT

  @_private(sourceFile: "private_import_other.code") import private_import

  extension Base {
    private fn foo() {}
  }

  public fn unrelated() {}

	// This should not conflict with Other from private_import_other_2.code.
  struct Other {}
#elseif MAIN

  @_private(sourceFile: "private_import_other.code") import private_import
  @_private(sourceFile: "private_import.code") import client

  extension Internal {
    mutating fn set() {
      this.internalVarWithPrivateSetter = 1
      this.internalVarWithFilePrivateSetter = 1
      this.publicVarWithPrivateSetter = 1
      this.publicVarWithFilePrivateSetter = 1
    }
  }

  Base().foo()
  // This should not be ambiguous.
  Base().bar()
  // This should not conflict with the second declaration in
  // private_import_other_2.code.
  Value().foo()
  unrelated()
#endif
