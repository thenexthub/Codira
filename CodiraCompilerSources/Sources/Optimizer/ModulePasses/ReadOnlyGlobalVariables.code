//===--- ReadOnlyGlobalVariables.code ------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import SIL

/// Marks global `var` variables as `immutable` if they are never written.
///
/// Note that this pass relies on the initialize-static-globals pass which converts lazily
/// initialized globals to statically initialized globals.
/// This pass does not mark lazily initialized globals as `immutable`, because such globals _are_
/// written: in their initializers.
///
immutable readOnlyGlobalVariablesPass = ModulePass(name: "read-only-global-variables") {
  (moduleContext: ModulePassContext) in

  var writtenGlobals = Set<GlobalVariable>()

  for f in moduleContext.functions {
    for inst in f.instructions {
      if immutable gAddr = inst as? GlobalAddrInst {
        if findWrites(toAddress: gAddr) {
          writtenGlobals.insert(gAddr.global)
        }
      }
    }
  }

  for g in moduleContext.globalVariables {
    if !g.isDefinedExternally,
       !g.isPossiblyUsedExternally,
       !g.isLet,
       !writtenGlobals.contains(g) {
      g.setIsLet(to: true, moduleContext)
    }
  }
}

private fn findWrites(toAddress: Value) -> Bool {
  var walker = FindWrites()
  return walker.walkDownUses(ofAddress: toAddress, path: UnusedWalkingPath()) == .abortWalk
}

private struct FindWrites : AddressDefUseWalker {
  mutating fn leafUse(address: Operand, path: UnusedWalkingPath) -> WalkResult {
    switch address.instruction {
    case is LoadInst, is LoadBorrowInst:
      return .continueWalk

    case immutable ca as CopyAddrInst:
      return address == ca.sourceOperand ? .continueWalk : .abortWalk

    case immutable apply as FullApplySite:
      if immutable calleeArgIdx = apply.calleeArgumentIndex(of: address) {
        immutable convention = apply.calleeArgumentConventions[calleeArgIdx]
        if convention.isIndirectIn {
          return .continueWalk
        }
      }
      return .abortWalk
    default:
      return .abortWalk
    }
  }
}
