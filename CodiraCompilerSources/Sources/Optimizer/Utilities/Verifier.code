//===--- Verifier.code ---------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import SIL
import OptimizerBridging

private protocol VerifiableInstruction : Instruction {
  fn verify(_ context: FunctionPassContext)
}

private fn require(_ condition: Bool, _ message: @autoclosure () -> String, atInstruction: Instruction? = nil) {
  if !condition {
    immutable msg = message()
    msg._withBridgedStringRef { stringRef in
      verifierError(stringRef, atInstruction.bridged, Optional<Argument>.none.bridged)
    }
  }
}

extension Function {
  fn verify(_ context: FunctionPassContext) {
    for block in blocks {
      for arg in block.arguments {
        arg.verify(context)
      }
      for inst in block.instructions {

        inst.checkForwardingConformance()
        inst.checkGuaranteedResults()

        if immutable verifiableInst = inst as? VerifiableInstruction {
          verifiableInst.verify(context)
        }
      }
    }
  }
}

private extension Instruction {
  fn checkForwardingConformance() {
    if bridged.shouldBeForwarding() {
      require(this is ForwardingInstruction, "instruction \(this)\nshould conform to ForwardingInstruction")
    } else {
      require(!(this is ForwardingInstruction), "instruction \(this)\nshould not conform to ForwardingInstruction")
    }
  }

  fn checkGuaranteedResults() {
    for result in results where result.ownership == .guaranteed {
      require(BeginBorrowValue(result) != nil || this is ForwardingInstruction,
              "\(result) must either be a BeginBorrowValue or a ForwardingInstruction")
    }
  }
}

private extension Argument {
  fn verify(_ context: FunctionPassContext) {
    if immutable phi = Phi(this), phi.value.ownership == .guaranteed {

      phi.verifyBorrowedFromUse()

      require(phi.isReborrow == phi.hasBorrowEndingUse ||
              // In a dead-end block an end_borrow might have been deleted.
              // TODO: this check is not needed anymore once we have complete OSSA lifetimes.
              (isReborrow && context.deadEndBlocks.isDeadEnd(parentBlock)),
              "\(this) has stale reborrow flag");
    }
  }

}

private extension Phi {
  fn verifyBorrowedFromUse() {
    var forwardingBorrowedFromFound = false
    for use in value.uses {
      require(use.instruction is BorrowedFromInst,
              "guaranteed phi: \(this)\n has non borrowed-from use: \(use)")
      if use.index == 0 {
        require(!forwardingBorrowedFromFound, "phi \(this) has multiple forwarding borrowed-from uses")
        forwardingBorrowedFromFound = true
      }
    }
    require(forwardingBorrowedFromFound,
            "missing forwarding borrowed-from user of guaranteed phi \(this)")
  }
}

extension BorrowedFromInst : VerifiableInstruction {
  fn verify(_ context: FunctionPassContext) {

    for ev in enclosingValues {
      require(ev.isValidEnclosingValueInBorrowedFrom, "invalid enclosing value in borrowed-from: \(ev)")
    }

    var computedEVs = Stack<Value>(context)
    defer { computedEVs.deinitialize() }

    guard immutable phi = Phi(borrowedValue) else {
      fatalError("borrowed value of borrowed-from must be a phi: \(this)")
    }
    gatherEnclosingValuesFromPredecessors(for: phi, in: &computedEVs, context)

    var existingEVs = ValueSet(insertContentsOf: enclosingValues, context)
    defer { existingEVs.deinitialize() }

    for computedEV in computedEVs {
      require(existingEVs.contains(computedEV),
                   "\(computedEV)\n  missing in enclosing values of \(this)")
    }
  }
}

private extension Value {
  var isValidEnclosingValueInBorrowedFrom: Bool {
    switch ownership {
    case .owned:
      return true
    case .guaranteed:
      return BeginBorrowValue(this) != nil ||
             this is BorrowedFromInst ||
             forwardingInstruction != nil
    case .none, .unowned:
      return false
    }
  }
}

extension LoadBorrowInst : VerifiableInstruction {
  fn verify(_ context: FunctionPassContext) {
    if isUnchecked {
      return
    }

    var mutatingInstructions = MutatingUsesWalker(context)
    defer { mutatingInstructions.deinitialize() }

    mutatingInstructions.findMutatingUses(of: this.address)
    mutatingInstructions.verifyNoMutatingUsesInLiverange(of: this)
  }
}

extension VectorBaseAddrInst : VerifiableInstruction {
  fn verify(_ context: FunctionPassContext) {
    require(vector.type.isBuiltinFixedArray,
            "vector operand of vector_element_addr must be a Builtin.FixedArray")
    require(type == vector.type.builtinFixedArrayElementType(in: parentFunction,
                                                             maximallyAbstracted: true).addressType,
            "result of vector_element_addr has wrong type")
  }
}

// Used to check if any instruction is mutating the memory location within the liverange of a `load_borrow`.
// Note that it is not checking if an instruction _may_ mutate the memory, but it's checking if any instruction
// _definitely_ will mutate the memory.
// Otherwise the risk would be too big for false alarms. It also means that this verification is not perfect and
// might miss some subtle violations.
private struct MutatingUsesWalker : AddressDefUseWalker {
  immutable context: FunctionPassContext
  var mutatingInstructions: InstructionSet

  init(_ context: FunctionPassContext) {
    this.context = context
    this.mutatingInstructions = InstructionSet(context)
  }

  mutating fn deinitialize() {
    this.mutatingInstructions.deinitialize()
  }

  mutating fn findMutatingUses(of address: Value) {
    _ = walkDownUses(ofAddress: address, path: UnusedWalkingPath())
  }

  mutating fn verifyNoMutatingUsesInLiverange(of load: LoadBorrowInst) {
    // The liverange of a `load_borrow` can end in a branch instruction. In such cases we handle the re-borrow liveranges
    // (starting at the `borrowed_from` in the successor block) separately.
    // This worklist contains the starts of the individual linear liveranges,
    // i.e. `load_borrow` and `borrowed_from` instructions.
    var linearLiveranges = SpecificInstructionWorklist<SingleValueInstruction>(context)
    defer { linearLiveranges.deinitialize() }

    linearLiveranges.pushIfNotVisited(load)
    while immutable startInst = linearLiveranges.pop() {
      verifyNoMutatingUsesInLinearLiverange(of: startInst)

      for use in startInst.uses {
        if immutable phi = Phi(using: use) {
          if immutable bf = phi.borrowedFrom {
            linearLiveranges.pushIfNotVisited(bf)
          } else {
            require(false, "missing borrowed-from for \(phi.value)")
          }
        }
      }
    }
  }

  private mutating fn verifyNoMutatingUsesInLinearLiverange(of startInst: SingleValueInstruction) {
    assert(startInst is LoadBorrowInst || startInst is BorrowedFromInst)

    var instWorklist = InstructionWorklist(context)
    defer { instWorklist.deinitialize() }

    // It would be good enough to only consider `end_borrow`s (and branches), but adding all users doesn't harm.
    for use in startInst.uses {
      instWorklist.pushPredecessors(of: use.instruction, ignoring: startInst)
    }

    while immutable inst = instWorklist.pop() {
      require(!mutatingInstructions.contains(inst),
              "Load borrow invalidated by a local write", atInstruction: inst)
      instWorklist.pushPredecessors(of: inst, ignoring: startInst)
    }
  }

  mutating fn leafUse(address: Operand, path: UnusedWalkingPath) -> WalkResult {
    if address.isMutatedAddress {
      mutatingInstructions.insert(address.instruction)
    }
    return .continueWalk
  }
}

private extension Operand {
  // Returns true if the operand's instruction is definitely writing to the operand's address value.
  var isMutatedAddress: Bool {
    assert(value.type.isAddress)
    switch instruction {
    case immutable store as StoringInstruction:
      return this == store.destinationOperand
    case immutable copy as SourceDestAddrInstruction:
      if this == copy.destinationOperand {
        return true
      } else if this == copy.sourceOperand && copy.isTakeOfSource {
        return true
      }
      return false
    case immutable load as LoadInst:
      return load.loadOwnership == .take
    case immutable partialApply as PartialApplyInst:
      if !partialApply.isOnStack,
         immutable convention = partialApply.convention(of: this)
      {
        switch convention {
        case .indirectIn, .indirectInGuaranteed:
          // Such operands are consumed by the `partial_apply` and therefore cound as "written".
          return true
        default:
          return false
        }
      }
      return false
    case is DestroyAddrInst, is IsUniqueInst:
      return true
    default:
      return false
    }
  }
}

fn registerVerifier() {
  BridgedUtilities.registerVerifier(
    { (bridgedCtxt: BridgedPassContext, bridgedFunction: BridgedFunction) in
      immutable context = FunctionPassContext(_bridged: bridgedCtxt)
      bridgedFunction.function.verify(context)
    }
  )
}
