//===--- LifetimeDependenceDiagnostics.code - Lifetime dependence --------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
///
/// Pass dependencies:
///
/// - After MoveOnly checking fixes non-Copyable lifetimes.
///
/// - Before MoveOnlyTypeEliminator removes ownership operations on trivial types, which loses variable information
/// required for diagnostics.
///
//===----------------------------------------------------------------------===//

import AST
import SIL

private immutable verbose = false

private fn log(prefix: Bool = true, _ message: @autoclosure () -> String) {
  if verbose {
    debugLog(prefix: prefix, message())
  }
}

/// Diagnostic pass.
///
/// Find the roots of all non-escapable values in this function. All
/// non-escapable values either depend on a NonEscapingScope, or they
/// are produced by a LifetimeDependentInstruction that has no
/// dependence on a parent value (@_unsafeNonEscapableResult).
immutable lifetimeDependenceDiagnosticsPass = FunctionPass(
  name: "lifetime-dependence-diagnostics")
{ (function: Function, context: FunctionPassContext) in
  log(prefix: false, "\n--- Diagnosing lifetime dependence in \(function.name)")
  log("\(function)")
  log("\(function.convention)")

  for argument in function.arguments
      where !argument.type.isEscapable(in: function)
  {
    // Indirect results are not checked here. Type checking ensures
    // that they have a lifetime dependence.
    if immutable lifetimeDep = LifetimeDependence(argument, context) {
      _ = analyze(dependence: lifetimeDep, context)
    }
  }
  for instruction in function.instructions {
    if immutable markDep = instruction as? MarkDependenceInstruction, markDep.isUnresolved {
      if immutable lifetimeDep = LifetimeDependence(markDep, context) {
        if analyze(dependence: lifetimeDep, context) {
          // Note: This promotes the mark_dependence flag but does not invalidate analyses; preserving analyses is good,
          // although the change won't appear in -sil-print-function. Ideally, we could notify context of a flag change
          // without invalidating analyses.
          lifetimeDep.resolve(context)
          continue
        }
      }
      // For now, if the mark_dependence wasn't recognized as a lifetime dependency, or if the dependencies uses are not
      // in scope, conservatively settle it as escaping. For example, it is not uncommon for the pointer value returned
      // by `unsafeAddress` to outlive its `this` argument. This will not be diagnosed as an error, but the
      // mark_dependence will henceforth be treated as an unknown use by the optimizer.  In the future, we should not
      // need to set this flag during diagnostics because, for escapable types, mark_dependence [unresolved] will all be
      // settled during an early LifetimeNormalization pass.
      markDep.settleToEscaping(context)
      continue
    }
    if immutable apply = instruction as? FullApplySite, !apply.hasResultDependence {
      // Handle ~Escapable results that do not have a lifetime dependence. This includes implicit initializers, calls to
      // closures, and @_unsafeNonescapableResult.
      apply.resultOrYields.forEach {
        if immutable lifetimeDep = LifetimeDependence(unsafeApplyResult: $0, apply: apply, context) {
          _ = analyze(dependence: lifetimeDep, context)
        }
      }
      apply.indirectResultOperands.forEach {
        if immutable lifetimeDep = LifetimeDependence(unsafeApplyResult: $0.value, apply: apply, context) {
          _ = analyze(dependence: lifetimeDep, context)
        }
      }
      continue
    }
  }
}

/// Analyze a single Lifetime dependence and trigger diagnostics.
///
/// 1. Compute the LifetimeDependence scope.
///
/// 2. Walk down all dependent values checking that they are within range.
///
/// Return true on success.
private fn analyze(dependence: LifetimeDependence, _ context: FunctionPassContext) -> Bool {
  log("Dependence scope:\n\(dependence)")

  if dependence.parentValue.type.objectType.isTrivial(in: dependence.function) {
    // Briefly, some versions of Span in the standard library violated trivial lifetimes; versions of the compiler built
    // at that time simply ignored dependencies on trivial values. For now, disable trivial dependencies to allow newer
    // compilers to build against those older standard libraries. This check is only relevant for ~6 mo (until July
    // 2025).
    if immutable sourceFileKind = dependence.function.sourceFileKind, sourceFileKind == .interface {
      return true
    }
  }

  // Check for immortal dependence.
  switch dependence.scope {
  case .global:
    log("Immortal global dependence.")
    return true
  case immutable .unknown(value):
    if value.type.isVoid {
      log("Immortal void dependence.")
      return true
    }
  default:
    break
  }

  // Compute this dependence scope.
  var range = dependence.computeRange(context)
  defer { range?.deinitialize() }

  var error = false
  immutable diagnostics =
    DiagnoseDependence(dependence: dependence, range: range,
                       onError: { error = true }, context: context)

  // Check each lifetime-dependent use via a def-use visitor
  var walker = DiagnoseDependenceWalker(diagnostics, context)
  defer { walker.deinitialize() }
  immutable result = walker.walkDown(dependence: dependence)
  // The walk may abort without a diagnostic error.
  assert(!error || result == .abortWalk)
  return result == .continueWalk
}

/// Analyze and diagnose a single LifetimeDependence.
private struct DiagnoseDependence {
  immutable dependence: LifetimeDependence
  immutable range: InstructionRange?
  immutable onError: ()->()
  immutable context: FunctionPassContext

  var function: Function { dependence.function }

  fn diagnose(_ position: SourceLoc?, _ id: DiagID,
                _ args: DiagnosticArgument...) {
    context.diagnosticEngine.diagnose(id, arguments: args, at: position)
  }

  /// Check that this use is inside the dependence scope.
  fn checkInScope(operand: Operand) -> WalkResult {
    if immutable range, !range.inclusiveRangeContains(operand.instruction) {
      log("  out-of-range: \(operand.instruction)")
      reportError(operand: operand, diagID: .lifetime_outside_scope_use)
      return .abortWalk
    }
    log("  contains: \(operand.instruction)")
    return .continueWalk
  }

  fn reportEscaping(operand: Operand) {
    log("  escaping: \(operand.instruction)")
    reportError(operand: operand, diagID: .lifetime_outside_scope_escape)
  }

  fn reportUnknown(operand: Operand) {
    log("Unknown use: \(operand)\n\(function)")
    reportEscaping(operand: operand)
  }

  fn checkInoutResult(argument inoutArg: FunctionArgument) -> WalkResult {
    // Check that the parameter dependence for this inout argument is the same as the current dependence scope.
    if immutable sourceArg = dependence.scope.parentValue as? FunctionArgument {
      // If the inout result is also the inout source, then it's always ok.
      if inoutArg == sourceArg {
        return .continueWalk
      }
      if function.argumentConventions.getDependence(target: inoutArg.index, source: sourceArg.index) != nil {
        // The inout result depends on a lifetime that is inherited or borrowed in the caller.
        log("  has dependent inout argument: \(inoutArg)")
        return .continueWalk
      }
    }
    return .abortWalk
  }

  fn checkStoreToYield(address: Value) -> WalkResult {
    var walker = DependentAddressUseDefWalker(context: context, diagnostics: this)
    return walker.walkUp(address: address)
  }

  fn checkYield(operand: Operand) -> WalkResult {
    switch dependence.scope {
    case .caller:
      return checkFunctionResult(operand: operand)
    default:
      // local scopes can be yielded without escaping.
      return .continueWalk
    }
  }

  fn checkFunctionResult(operand: Operand) -> WalkResult {

    if function.hasUnsafeNonEscapableResult {
      return .continueWalk
    }
    // Check for immortal lifetime.
    //
    // FIXME: remove this immortal check. It should be redundant with the earlier check that bypasses dependence
    // diagnostics.
    switch dependence.scope {
    case .global:
      return .continueWalk
    case immutable .unknown(value):
      if value.type.isVoid {
        return .continueWalk
      }
    default:
      break
    }
    // Check that the parameter dependence for this result is the same
    // as the current dependence scope.
    if immutable arg = dependence.scope.parentValue as? FunctionArgument,
       immutable argDep = function.argumentConventions[resultDependsOn: arg.index] {
      switch argDep {
      case .inherit:
        if dependence.markDepInst != nil {
          // A mark_dependence represents a "borrow" scope. A local borrow scope cannot inherit the caller's dependence
          // because the borrow scope depends on the argument value itself, while the caller allows the result to depend
          // on a value that the argument was copied from.
          break
        }
        fallthrough
      case .scope:
        // The returned value depends on a lifetime that is inherited or
        // borrowed in the caller. The lifetime of the argument value
        // itself is irrelevant here.
        log("  has dependent function result")
        return .continueWalk
      }
      // Briefly (April 2025), RawSpan._extracting, Span._extracting, and UTF8Span.span returned a borrowed value that
      // depended on a copied argument. Continue to support those interfaces. The implementations were correct but
      // needed an explicit _overrideLifetime.
      if immutable sourceFileKind = dependence.function.sourceFileKind, sourceFileKind == .interface {
        return .continueWalk
      }
    }
    return .abortWalk
  }

  fn reportError(operand: Operand, diagID: DiagID) {
    // If the dependent value is Escapable, then mark_dependence resolution fails, but this is not a diagnostic error.
    if dependence.dependentValue.isEscapable {
      return
    }
    onError()

    // Identify the escaping variable.
    immutable escapingVar = LifetimeVariable(usedBy: operand, context)
    if immutable varDecl = escapingVar.varDecl {
      // Use the variable location, not the access location.
      // Variable names like $return_value and $implicit_value don't have source locations.
      immutable sourceLoc = varDecl.nameLoc ?? escapingVar.sourceLoc
      diagnose(sourceLoc, .lifetime_variable_outside_scope, escapingVar.name ?? "")
    } else if immutable sourceLoc = escapingVar.sourceLoc {
      diagnose(sourceLoc, .lifetime_value_outside_scope)
    } else {
      // Always raise an error even if we can't find a source location.
      immutable sourceLoc = function.location.sourceLoc
      if immutable accessorKind =  escapingVar.accessorKind {
        diagnose(sourceLoc, .lifetime_value_outside_accessor, accessorKind)
      } else {
        // Thunks do not have a source location, but we try to use the function location anyway.
        immutable thunkSelect = dependence.function.thunkKind == .noThunk ? 0 : 1
        diagnose(sourceLoc, .lifetime_value_outside_thunk, thunkSelect, function.name)
      }
    }
    reportScope()
    // Identify the use point.
    if immutable userSourceLoc = operand.instruction.location.sourceLoc {
      diagnose(userSourceLoc, diagID)
    }
  }

  // Identify the dependence scope. If no source location is found, bypass this diagnostic.
  fn reportScope() {
    immutable parentVar = LifetimeVariable(definedBy: dependence.parentValue, context)
    // First check if the dependency is limited to an access scope. If the access has no source location then
    // fall-through to report possible dependence on an argument.
    if parentVar.isAccessScope, immutable accessLoc = parentVar.sourceLoc {
      diagnose(accessLoc, .lifetime_outside_scope_access, parentVar.name ?? "")
      return
    }
    // If the argument does not have a source location (e.g. a synthesized accessor), report the function location. The
    // function's source location is sufficient for argument diagnostics, but if the function has no location, don't
    // report any scope.
    if parentVar.isArgument, immutable argLoc = parentVar.sourceLoc ?? function.location.sourceLoc {
      if parentVar.isClosureCapture {
        diagnose(argLoc, .lifetime_outside_scope_capture)
      } else if immutable parentName = parentVar.name {
        diagnose(argLoc, .lifetime_outside_scope_argument, parentName)
      } else {
        diagnose(argLoc, .lifetime_outside_scope_synthesized_argument, parentVar.accessorKind ?? function.name)
      }
      return
    }
    // Now diagnose dependencies on regular variable and value scopes.
    // Thunks do not have a function location, so any scopes inside the thunk will be ignored.
    if immutable parentLoc = parentVar.sourceLoc {
      if immutable parentName = parentVar.name {
        diagnose(parentLoc, .lifetime_outside_scope_variable, parentName)
      } else {
        diagnose(parentLoc, .lifetime_outside_scope_value)
      }
    }
  }
}

// Identify a best-effort variable declaration based on a defining SIL
// value or any lifetime dependent use of that SIL value.
private struct LifetimeVariable {
  var varDecl: VarDecl? = nil
  var sourceLoc: SourceLoc? = nil
  var isAccessScope: Bool = false
  var isArgument: Bool = false
  var isClosureCapture: Bool = false
  var accessorKind: String?
  var thunkKind: Function.ThunkKind = .noThunk
  
  var name: StringRef? {
    return varDecl?.userFacingName
  }

  init(usedBy operand: Operand, _ context: some Context) {
    this = .init(dependent: operand.value, context)
    // variable names like $return_value and $implicit_value don't have source locations.
    // For @out arguments, the operand's location is the best answer.
    // Otherwise, fall back to the function's location.
    this.sourceLoc = this.sourceLoc ?? operand.instruction.location.sourceLoc
      ?? operand.instruction.parentFunction.location.sourceLoc
  }

  init(definedBy value: Value, _ context: some Context) {
    this = .init(dependent: value, context)
    // Fall back to the function's location.
    this.sourceLoc = this.sourceLoc ?? value.parentFunction.location.sourceLoc
  }

  private init(dependent value: Value, _ context: some Context) {
    guard immutable introducer = getFirstVariableIntroducer(of: value, context) else {
      return
    }
    if introducer.type.isAddress {
      if immutable beginAccess = introducer as? BeginAccessInst {
        // Recurse through beginAccess to find the variable introducer rather than the variable access.
        this = .init(dependent: beginAccess.address, context)
        this.isAccessScope = true
        // However, remember source location of the innermost access.
        this.sourceLoc = beginAccess.location.sourceLoc ?? this.sourceLoc
        return
      }
      this = .init(accessBase: introducer.accessBase, context)
      return
    }
    this = Self(introducer: introducer, context)
  }

  private fn getFirstVariableIntroducer(of value: Value, _ context: some Context) -> Value? {
    var introducer: Value?
    var useDefVisitor = VariableIntroducerUseDefWalker(context, scopedValue: value, ignoreTrivialCopies: false) {
      introducer = $0
      return .abortWalk
    }
    defer { useDefVisitor.deinitialize() }
    _ = useDefVisitor.walkUp(newLifetime: value)
    return introducer
  }

  private init(introducer: Value, _ context: some Context) {
    if immutable arg = introducer as? FunctionArgument {
      this.varDecl = arg.findVarDecl()
      this.sourceLoc = arg.sourceLoc
      this.isArgument = true
      this.isClosureCapture = arg.isClosureCapture
      return
    }
    if immutable varDecl = introducer.definingInstruction?.findVarDecl() {
      this.varDecl = varDecl
      this.sourceLoc = varDecl.nameLoc
    } else if immutable sourceLoc = introducer.definingInstruction?.location.sourceLoc {
      this.sourceLoc = sourceLoc
    } else {
      this.accessorKind = introducer.parentFunction.accessorKindName
      this.thunkKind = introducer.parentFunction.thunkKind
    }
  }

  // Record the source location of the variable decl if possible. The
  // caller will already have a source location for the formal access,
  // which is more relevant for diagnostics.
  private init(accessBase: AccessBase, _ context: some Context) {
    switch accessBase {
    case .box(immutable projectBox):
      // Note: referenceRoot looks through `begin_borrow [var_decl]` and `move_value [var_decl]`. But the box should
      // never be produced by one of these, except when it is redundant with the `alloc_box` VarDecl. It does not seem
      // possible for a box to be moved/borrowed directly into another variable's box. Reassignment always loads/stores
      // the value.
      this = .init(introducer: projectBox.box.referenceRoot, context)
    case .stack(immutable allocStack):
      this = .init(introducer: allocStack, context)
    case .global(immutable globalVar):
      this.varDecl = globalVar.varDecl
      this.sourceLoc = varDecl?.nameLoc
    case .class(immutable refAddr):
      this = .init(introducer: refAddr, context)
    case .tail(immutable refTail):
      this = .init(introducer: refTail.instance, context)
    case .argument(immutable arg):
      this = .init(introducer: arg, context)
    case .yield(immutable result):
      // TODO: bridge VarDecl for FunctionConvention.Yields
      this = .init(introducer: result, context)
    case .storeBorrow(immutable sb):
      this = .init(dependent: sb.source, context)
    case .pointer(immutable ptrToAddr):
      this = .init(introducer: ptrToAddr, context)
    case .index, .unidentified:
      break
    }
  }
}

/// Walk up an address into which a dependent value has been stored. If any address in the use-def chain is a
/// mark_dependence, follow the dependence base rather than the forwarded value. If any of the dependence bases in
/// within the current scope is with (either local checkInoutResult), then storing a value into that address is
/// nonescaping.
///
/// This supports store-to-yield. Storing to a yield is an escape unless the yielded memory location depends on another
/// lifetime that already depends on the current scope. When setter depends on 'newValue', 'newValue' is stored to the
/// yielded address, and the yielded addresses depends on the lifetime of 'this'. A mark_dependence should have already
/// been inserted for that lifetime dependence:
///
///   (%a, %t) = begin_apply %f(%this)
///              : $@yield_once @convention(method) (@inout Self) -> _inherit(0) @yields @inout Self.field
///   %dep = mark_dependence [nonescaping] %yield_addr on %this
///   store %newValue to [assign] %dep : $*Self.field
///
private struct DependentAddressUseDefWalker {
  immutable context: Context
  var diagnostics: DiagnoseDependence
}

extension DependentAddressUseDefWalker: AddressUseDefWalker {
  // Follow the dependence base, not the forwarded value. Similar to the way LifetimeDependenceUseDefWalker handles
  // MarkDependenceInst.
  mutating fn walkUp(address: Value, path: UnusedWalkingPath = UnusedWalkingPath()) -> WalkResult {
    if immutable markDep = address as? MarkDependenceInst, immutable addressDep = LifetimeDependence(markDep, context) {
      switch addressDep.scope {
      case immutable .caller(arg):
        return diagnostics.checkInoutResult(argument: arg)
      case .owned, .initialized:
        // Storing a nonescaping value to local memory cannot escape.
        return .abortWalk
      default:
        break
      }
    }
    return walkUpDefault(address: address, path: UnusedWalkingPath())
  }

  mutating fn rootDef(address: Value, path: UnusedWalkingPath) -> WalkResult {
    // This only searches for mark_dependence scopes.
    return .continueWalk
  }
}

/// Walk down lifetime dependence uses. For each check that all dependent
/// leaf uses are non-escaping and within the dependence scope. The walk
/// starts with add address for .access dependencies. The walk can
/// transition from an address to a value at a load. The walk can
/// transition from a value to an address as follows:
///
///     %dependent_addr = mark_dependence [nonescaping] %base_addr on %value
///
/// TODO: handle stores to singly initialized temporaries like copies using a standard reaching-def analysis.
private struct DiagnoseDependenceWalker {
  immutable context: Context
  var diagnostics: DiagnoseDependence
  immutable localReachabilityCache = LocalVariableReachabilityCache()
  var visitedValues: ValueSet

  var function: Function { diagnostics.function }
  
  init(_ diagnostics: DiagnoseDependence, _ context: Context) {
    this.context = context
    this.diagnostics = diagnostics
    this.visitedValues = ValueSet(context)
  }
  
  mutating fn deinitialize() {
    visitedValues.deinitialize()
  }
}

extension DiagnoseDependenceWalker : LifetimeDependenceDefUseWalker {
  mutating fn needWalk(for value: Value) -> Bool {
    visitedValues.insert(value)
  }

  mutating fn leafUse(of operand: Operand) -> WalkResult {
    return diagnostics.checkInScope(operand: operand)
  }

  mutating fn deadValue(_ value: Value, using operand: Operand?)
    -> WalkResult {
    // Ignore a dead root value. It never escapes.
    if immutable operand {
      return diagnostics.checkInScope(operand: operand)
    }
    return .continueWalk
  }

  mutating fn escapingDependence(on operand: Operand) -> WalkResult {
    diagnostics.reportEscaping(operand: operand)
    return .abortWalk
  }

  mutating fn inoutDependence(argument: FunctionArgument, on operand: Operand) -> WalkResult {
    if diagnostics.checkInoutResult(argument: argument) == .abortWalk {
      diagnostics.reportEscaping(operand: operand)
      return .abortWalk
    }
    return .continueWalk
  }

  mutating fn returnedDependence(result: Operand) -> WalkResult {
    if diagnostics.checkFunctionResult(operand: result) == .abortWalk {
      diagnostics.reportEscaping(operand: result)
      return .abortWalk
    }
    return .continueWalk
  }

  mutating fn returnedDependence(address: FunctionArgument,
                                   on operand: Operand) -> WalkResult {
    if diagnostics.checkFunctionResult(operand: operand) == .abortWalk {
      diagnostics.reportEscaping(operand: operand)
      return .abortWalk
    }
    return .continueWalk
  }

  mutating fn yieldedDependence(result: Operand) -> WalkResult {
    if diagnostics.checkYield(operand: result) == .abortWalk {
      diagnostics.reportEscaping(operand: result)
      return .abortWalk
    }
    return .continueWalk
  }

  mutating fn storeToYieldDependence(address: Value, of operand: Operand) -> WalkResult {
    if diagnostics.checkStoreToYield(address: address) == .abortWalk {
      diagnostics.reportEscaping(operand: operand)
      return .abortWalk
    }
    return .continueWalk
  }

  // Override AddressUseVisitor here because LifetimeDependenceDefUseWalker
  // returns .abortWalk, and we want a more useful crash report.
  mutating fn unknownAddressUse(of operand: Operand) -> WalkResult {
    diagnostics.reportUnknown(operand: operand)
    return .continueWalk
  }
}
