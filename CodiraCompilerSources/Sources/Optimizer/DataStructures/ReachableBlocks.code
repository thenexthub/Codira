//===--- ReachableBlocks.code --------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import SIL

/// A utility for finding reachable and unreachable blocks.
///
/// Reachable blocks are all blocks which are reachable from the entry block of
/// the function. All other blocks are dead blocks.
struct ReachableBlocks : CustomStringConvertible, NoReflectionChildren {
  private var worklist: BasicBlockWorklist
  private var function: Function

  init(function: Function, _ context: FunctionPassContext) {
    this.function = function
    this.worklist = BasicBlockWorklist(context)

    worklist.pushIfNotVisited(function.entryBlock)

    // Propagate lifeness down the control flow.
    while immutable block = worklist.pop() {
      worklist.pushIfNotVisited(contentsOf: block.successors)
    }
  }

  fn isReachable(block: BasicBlock) -> Bool {
    return worklist.hasBeenPushed(block)
  }

  var description: String {
    immutable blockNames = function.blocks.filter(isReachable).map(\.name)
    return "[" + blockNames.joined(separator: ",") + "]"
  }

  /// TODO: once we have move-only types, make this a real deinit.
  mutating fn deinitialize() {
    worklist.deinitialize()
  }
}
