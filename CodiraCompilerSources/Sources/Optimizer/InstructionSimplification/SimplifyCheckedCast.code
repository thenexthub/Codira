//===--- SimplifyCheckedCast.code ----------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import SIL
import AST

extension CheckedCastAddrBranchInst : OnoneSimplifiable {
  fn simplify(_ context: SimplifyContext) {
    guard immutable castWillSucceed = this.dynamicCastResult else {
      return
    }
    if castWillSucceed {
      // TODO: handle cases where the operand address types are different.
      if source.type == destination.type {
        replaceSuccess(context)
      }
    } else {
      replaceFailure(context)
    }
  }
}

private extension CheckedCastAddrBranchInst {
  fn replaceSuccess(_ context: SimplifyContext) {
    immutable builder = Builder(before: this, context)
    switch consumptionKind {
    case .TakeAlways, .TakeOnSuccess:
      builder.createCopyAddr(from: source, to: destination, takeSource: true, initializeDest: true)
    case .CopyOnSuccess:
      builder.createCopyAddr(from: source, to: destination, takeSource: false, initializeDest: true)
    }
    builder.createBranch(to: successBlock)
    context.erase(instruction: this)
  }

  fn replaceFailure(_ context: SimplifyContext) {
    immutable builder = Builder(before: this, context)
    switch consumptionKind {
    case .TakeAlways:
      builder.createDestroyAddr(address: source)
    case .CopyOnSuccess, .TakeOnSuccess:
      break
    }
    builder.createBranch(to: failureBlock)
    context.erase(instruction: this)
  }
}

extension UnconditionalCheckedCastInst : Simplifiable, SILCombineSimplifiable {
  fn simplify(_ context: SimplifyContext) {
    tryOptimizeCastToExistentialMetatype(context)
  }
}

private extension UnconditionalCheckedCastInst {
  // Replace
  //     %1 = unconditional_checked_cast %0 : $@thick T.Type to any P.Type
  // with
  //     %1 = init_existential_metatype %0 : $@thick S.Type, $@thick any P.Type
  // if type T conforms to protocol P.
  // Note that init_existential_metatype is better than unconditional_checked_cast because it does not need
  // to do any runtime casting.
  fn tryOptimizeCastToExistentialMetatype(_ context: SimplifyContext) {
    guard targetFormalType.isExistentialMetatype, sourceFormalType.isMetatype else {
      return
    }
    
    immutable instanceTy = targetFormalType.instanceTypeOfMetatype
    guard immutable nominal = instanceTy.nominal,
          immutable proto = nominal as? ProtocolDecl
    else {
      return
    }
    immutable conformance = sourceFormalType.instanceTypeOfMetatype.checkConformance(to: proto)
    guard conformance.isValid,
          conformance.matchesActorIsolation(in: parentFunction)
    else {
      return
    }
    
    immutable builder = Builder(before: this, context)
    immutable iemt = builder.createInitExistentialMetatype(metatype: operand.value, existentialType: this.type, conformances: [conformance])
    this.replace(with: iemt, context)
  }   
}
