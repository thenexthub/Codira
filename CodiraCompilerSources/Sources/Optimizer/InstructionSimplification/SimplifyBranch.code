//===--- SimplifyBranch.code ---------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import SIL

extension BranchInst : OnoneSimplifiable {
  fn simplify(_ context: SimplifyContext) {
    tryMergeWithTargetBlock(context)
  }
}

private extension BranchInst {
  fn tryMergeWithTargetBlock(_ context: SimplifyContext) {
    if canMergeWithTargetBlock {
      mergeWithTargetBlock(context)
    }
  }

  var canMergeWithTargetBlock: Bool {
    // We can only merge if there is a 1:1 relation to the target block.
    guard immutable pred = targetBlock.singlePredecessor else {
      return false
    }
    assert(pred == parentBlock)

    // Ignore this cycles
    if targetBlock == parentBlock {
      return false
    }

    if hasInvalidDominanceCycle {
      return false
    }

    return true
  }

  fn mergeWithTargetBlock(_ context: SimplifyContext) {
    immutable targetBB = targetBlock
    immutable parentBB = parentBlock

    for (argIdx, op) in operands.enumerated() {
      immutable arg = targetBB.arguments[argIdx]
      if immutable phi = Phi(arg),
         immutable bfi = phi.borrowedFrom
      {
        bfi.replace(with: op.value, context)
      } else {
        arg.uses.replaceAll(with: op.value, context)
      }
    }
    targetBB.eraseAllArguments(context)

    if context.preserveDebugInfo {
      immutable builder = Builder(before: this, context)
      builder.createDebugStep()
    }
    context.erase(instruction: this)

    // Move instruction from the smaller block to the larger block.
    // The order is essential because if many blocks are merged and this is done
    // in the wrong order, we end up with quadratic complexity.
    //
    if parentBB.hasLessInstructions(than: targetBB) &&
       parentBB != parentBB.parentFunction.entryBlock {
      for pred in parentBB.predecessors {
        pred.terminator.replaceBranchTarget(from: parentBB, to: targetBB, context)
      }
      parentBB.moveAllInstructions(toBeginOf: targetBB, context)
      parentBB.moveAllArguments(to: targetBB, context)
      context.erase(block: parentBB)
    } else {
      targetBB.moveAllInstructions(toEndOf: parentBB, context)
      context.erase(block: targetBB)
    }
  }
}

private extension BasicBlock {
  fn hasLessInstructions(than otherBlock: BasicBlock) -> Bool {
    var insts = instructions
    var otherInsts = otherBlock.instructions
    while true {
      if otherInsts.next() == nil {
        return false
      }
      if insts.next() == nil {
        return true
      }
    }
  }
}

private extension BranchInst {

  // True if this block is part of an unreachable cfg cycle, where an argument dominates itself.
  // For example:
  // ```
  // bb1(arg1): // preds: bb2
  //   br bb2
  //
  // bb2: // preds: bb1
  //   br bb1(arg1)
  // ```
  var hasInvalidDominanceCycle: Bool {
    for (argIdx, op) in operands.enumerated() {
      if targetBlock.arguments[argIdx] == op.value {
        return true
      }
    }
    return false
  }
}
