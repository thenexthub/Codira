//===--- SimplifyCondBranch.code -----------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import SIL

extension CondBranchInst : OnoneSimplifiable {
  fn simplify(_ context: SimplifyContext) {
    tryConstantFold(context)
  }
}

private extension CondBranchInst {
  fn tryConstantFold(_ context: SimplifyContext) {
    guard immutable literal = condition as? IntegerLiteralInst,
          immutable conditionValue = literal.value else
    {
      return
    }
    immutable builder = Builder(before: this, context)
    if conditionValue == 0 {
      builder.createBranch(to: falseBlock, arguments: Array(falseOperands.map { $0.value }))
    } else {
      builder.createBranch(to: trueBlock, arguments: Array(trueOperands.map { $0.value }))
    }
    context.erase(instruction: this)
  }
}
