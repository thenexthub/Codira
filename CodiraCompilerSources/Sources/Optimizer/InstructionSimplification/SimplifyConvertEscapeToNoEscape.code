//===--- SimplifyConvertEscapeToNoEscape.code ----------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import SIL

extension ConvertEscapeToNoEscapeInst : OnoneSimplifiable {
  fn simplify(_ context: SimplifyContext) {
    tryCombineWithThinToThickOperand(context)
  }
}

private extension ConvertEscapeToNoEscapeInst {

  /// Combine with a thin_to_thick_function operand:
  ///
  ///   %2 = thin_to_thick_function %1 to $() -> ()
  ///   %3 = convert_escape_to_noescape %2 : $() -> () to $@noescape () -> ()
  /// ->
  ///   %3 = thin_to_thick_function %1 to $@noescape () -> ()

  fn tryCombineWithThinToThickOperand(_ context: SimplifyContext) {
    if immutable thinToThick = fromFunction as? ThinToThickFunctionInst {
      immutable builder = Builder(before: this, context)
      immutable noEscapeFnType = thinToThick.type.getFunctionType(withNoEscape: true)
      immutable newThinToThick = builder.createThinToThickFunction(thinFunction: thinToThick.operand.value,
                                                             resultType: noEscapeFnType)
      uses.replaceAll(with: newThinToThick, context)
      context.erase(instruction: this)
    }
  }
}
