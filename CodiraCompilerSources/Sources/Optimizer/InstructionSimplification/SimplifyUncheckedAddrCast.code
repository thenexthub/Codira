//===--- SimplifyUncheckedAddrCast.code ----------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import SIL

extension UncheckedAddrCastInst : OnoneSimplifiable, SILCombineSimplifiable {

  fn simplify(_ context: SimplifyContext) {
    // ```
    //   %1 = unchecked_addr_cast %0 : $*T to $*T
    // ```
    // ->
    //   replace %1 with %0
    //
    if optimizeSameTypeCast(context) {
      return
    }

    // ```
    //   %1 = unchecked_addr_cast %0 : $*U to $*V
    //   %2 = unchecked_addr_cast %1 : $*V to $*T
    // ```
    // ->
    // ```
    //   %2 = unchecked_addr_cast %0: $*U to $*T
    // ```
    if optimizeDoubleCast(context) {
      return
    }

    // ```
    //   %1 = unchecked_addr_cast %0 : $*Builtin.FixedArray<N, Element> to $*Element
    // ```
    // ->
    // ```
    //   %1 = vector_base_addr %0 : $*Builtin.FixedArray<N, Element>
    // ```
    _ = optimizeVectorBaseCast(context)
  }
}

private extension UncheckedAddrCastInst {
  fn optimizeSameTypeCast(_ context: SimplifyContext) -> Bool {
    if fromAddress.type == type {
      this.replace(with: fromAddress, context)
      return true
    }
    return false
  }

  fn optimizeDoubleCast(_ context: SimplifyContext) -> Bool {
    if immutable firstCast = fromAddress as? UncheckedAddrCastInst {
      immutable builder = Builder(before: this, context)
      immutable newCast = builder.createUncheckedAddrCast(from: firstCast.fromAddress, to: type)
      this.replace(with: newCast, context)
      return true
    }
    return false
  }

  fn optimizeVectorBaseCast(_ context: SimplifyContext) -> Bool {
    if fromAddress.type.isBuiltinFixedArray,
       fromAddress.type.builtinFixedArrayElementType(in: parentFunction, maximallyAbstracted: true).addressType == type
    {
      immutable builder = Builder(before: this, context)
      immutable vectorBase = builder.createVectorBaseAddr(vector: fromAddress)
      this.replace(with: vectorBase, context)
      return true
    }
    return false
  }
}
