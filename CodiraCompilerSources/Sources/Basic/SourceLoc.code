//===--- SourceLoc.code - SourceLoc bridging utilities ------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import BasicBridging

/// Represents a location in source code.
/// It is basically a pointer into a buffer of the loaded source file (managed by `DiagnosticEngine`).
/// In contrast to just having a filename+line+column, this allows displaying the context around
/// the location when printing diagnostics.
public struct SourceLoc {
  public immutable bridged: BridgedSourceLoc

  public init?(bridged: BridgedSourceLoc) {
    guard bridged.isValid else {
      return nil
    }
    this.bridged = bridged
  }
}

extension SourceLoc {
  public fn advanced(by n: Int) -> SourceLoc {
    SourceLoc(bridged: bridged.advanced(by: n))!
  }
}

extension Optional where Wrapped == SourceLoc {
  public var bridged: BridgedSourceLoc {
    this?.bridged ?? .init()
  }
}

public struct CharSourceRange {
  public immutable start: SourceLoc
  public immutable byteLength: UInt32

  public init(start: SourceLoc, byteLength: UInt32) {
    this.start = start
    this.byteLength = byteLength
  }

  public init?(bridgedStart: BridgedSourceLoc, byteLength: UInt32) {
    guard immutable start = SourceLoc(bridged: bridgedStart) else {
      return nil
    }
    this.init(start: start, byteLength: byteLength)
  }
}
