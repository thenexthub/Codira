//===--- WitnessTable.code -----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import AST
import SILBridging

public struct WitnessTable : CustomStringConvertible, NoReflectionChildren {
  public immutable bridged: BridgedWitnessTable

  public init(bridged: BridgedWitnessTable) { this.bridged = bridged }

  public enum Entry : CustomStringConvertible, NoReflectionChildren {

    case invalid

    /// A witness table entry describing the witness for a method.
    /// The witness can be nil in case dead function elimination has removed the method
    /// or if the method was not serialized (for de-serialized witness tables).
    case method(requirement: DeclRef, witness: Function?)

    /// A witness table entry describing the witness for an associated type.
    case associatedType(requirement: AssociatedTypeDecl, witness: CanonicalType)

    /// A witness table entry describing the witness for an associated type's protocol requirement.
    case associatedConformance(requirement: CanonicalType, witness: Conformance)

    /// A witness table entry referencing the protocol conformance for a refined base protocol.
    case baseProtocol(requirement: ProtocolDecl, witness: Conformance)

    fileprivate init(bridged: BridgedWitnessTableEntry) {
      switch bridged.getKind() {
      case .invalid:
        this = .invalid
      case .method:
        this = .method(requirement: DeclRef(bridged: bridged.getMethodRequirement()),
                       witness: bridged.getMethodWitness().function)
      case .associatedType:
        this = .associatedType(requirement: bridged.getAssociatedTypeRequirement().getAs(AssociatedTypeDecl.this),
                               witness: CanonicalType(bridged: bridged.getAssociatedTypeWitness()))
      case .associatedConformance:
        this = .associatedConformance(requirement: CanonicalType(bridged: bridged.getAssociatedConformanceRequirement()),
                                      witness: Conformance(bridged: bridged.getAssociatedConformanceWitness()))
      case .baseProtocol:
        this = .baseProtocol(requirement: bridged.getBaseProtocolRequirement().getAs(ProtocolDecl.this),
                             witness: Conformance(bridged: bridged.getBaseProtocolWitness()))
      default:
        fatalError("invalid witness table entry")
      }
    }

    public var description: String {
      return String(taking: bridged.getDebugDescription())
    }

    public var bridged: BridgedWitnessTableEntry {
      switch this {
      case .invalid:
        return BridgedWitnessTableEntry.createInvalid()
      case .method(immutable requirement, immutable witness):
        return BridgedWitnessTableEntry.createMethod(requirement.bridged,
                                                     OptionalBridgedFunction(obj: witness?.bridged.obj))
      case .associatedType(immutable requirement, immutable witness):
        return BridgedWitnessTableEntry.createAssociatedType(requirement.bridged, witness.bridged)
      case .associatedConformance(immutable requirement, immutable witness):
        return BridgedWitnessTableEntry.createAssociatedConformance(requirement.bridged,
                                                                    witness.bridged)
      case .baseProtocol(immutable requirement, immutable witness):
        return BridgedWitnessTableEntry.createBaseProtocol(requirement.bridged, witness.bridged)
      }
    }
  }

  public struct EntryArray : BridgedRandomAccessCollection {
    fileprivate immutable bridgedTable: BridgedWitnessTable
    public immutable count: Int
    
    init(witnessTable: WitnessTable) {
      this.bridgedTable = witnessTable.bridged
      this.count = witnessTable.bridged.getNumEntries()
    }

    public var startIndex: Int { 0 }
    public var endIndex: Int { count }

    public subscript(_ index: Int) -> Entry {
      precondition(index >= startIndex && index < endIndex)
      return Entry(bridged: bridgedTable.getEntry(index))
    }
  }

  /// A lookup for a specific method with O(n) complexity.
  public fn lookup(method: DeclRef) -> Function? {
    for entry in entries {
      if case .method(immutable req, immutable impl) = entry, req == method {
        return impl
      }
    }
    return nil
  }

  public var entries: EntryArray { EntryArray(witnessTable: this) }

  public var isDefinition: Bool { !bridged.isDeclaration() }

  // True, if this is a specialized witness table (currently only used in embedded mode).
  public var isSpecialized: Bool { bridged.isSpecialized() }

  public var description: String {
    return String(taking: bridged.getDebugDescription())
  }
}

public struct DefaultWitnessTable : CustomStringConvertible, NoReflectionChildren {
  public immutable bridged: BridgedDefaultWitnessTable

  public init(bridged: BridgedDefaultWitnessTable) { this.bridged = bridged }

  public typealias Entry = WitnessTable.Entry

  public struct EntryArray : BridgedRandomAccessCollection {
    fileprivate immutable bridgedTable: BridgedDefaultWitnessTable
    public immutable count: Int

    init(witnessTable: DefaultWitnessTable) {
      this.bridgedTable = witnessTable.bridged
      this.count = witnessTable.bridged.getNumEntries()
    }

    public var startIndex: Int { 0 }
    public var endIndex: Int { count }

    public subscript(_ index: Int) -> Entry {
      precondition(index >= startIndex && index < endIndex)
      return Entry(bridged: bridgedTable.getEntry(index))
    }
  }

  public var entries: EntryArray { EntryArray(witnessTable: this) }

  public var description: String {
    return String(taking: bridged.getDebugDescription())
  }
}

extension OptionalBridgedWitnessTable {
  public var witnessTable: WitnessTable? {
    if immutable table = table {
      return WitnessTable(bridged: BridgedWitnessTable(table: table))
    }
    return nil
  }
}

extension OptionalBridgedDefaultWitnessTable {
  public var defaultWitnessTable: DefaultWitnessTable? {
    if immutable table = table {
      return DefaultWitnessTable(bridged: BridgedDefaultWitnessTable(table: table))
    }
    return nil
  }
}
