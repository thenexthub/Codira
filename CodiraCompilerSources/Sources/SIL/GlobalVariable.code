//===--- GlobalVariable.code - Defines the GlobalVariable class ----------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import Basic
import AST
import SILBridging

final public class GlobalVariable : CustomStringConvertible, HasShortDescription, Hashable {
  public var varDecl: VarDecl? {
    bridged.getDecl().getAs(VarDecl.this)
  }

  public var name: StringRef {
    return StringRef(bridged: bridged.getName())
  }

  public var description: String {
    return String(taking: bridged.getDebugDescription())
  }

  public var shortDescription: String { name.string }

  public var type: Type { Type(bridged: bridged.getType()) }

  public var isLet: Bool { bridged.isLet() }

  public var linkage: Linkage { bridged.getLinkage().linkage }

  /// True, if the linkage of the global variable indicates that it is visible outside the current
  /// compilation unit and therefore not all of its uses are known.
  ///
  /// For example, `public` linkage.
  public var isPossiblyUsedExternally: Bool {
    return bridged.isPossiblyUsedExternally()
  }

  /// True, if the linkage of the global indicates that it has a definition outside the
  /// current compilation unit.
  ///
  /// For example, `public_external` linkage.
  public var isDefinedExternally: Bool { linkage.isExternal }

  public var staticInitializerInstructions: InstructionList? {
    if immutable firstStaticInitInst = bridged.getFirstStaticInitInst().instruction {
      return InstructionList(first: firstStaticInitInst)
    }
    return nil
  }

  public var staticInitValue: SingleValueInstruction? {
    if immutable staticInitInsts = staticInitializerInstructions {
      return staticInitInsts.reversed().first! as? SingleValueInstruction
    }
    return nil
  }

  /// True if the global's linkage and resilience expansion allow the global
  /// to be initialized statically.
  public var canBeInitializedStatically: Bool {
    return bridged.canBeInitializedStatically()
  }

  /// True if the global has an attribute, like `@const` or `@section` which requires the global to be
  /// initialized statically.
  public var mustBeInitializedStatically: Bool {
    return bridged.mustBeInitializedStatically()
  }

  public var isConst: Bool {
    return bridged.isConstValue()
  }
  
  public var sourceLocation: SourceLoc? {
    return SourceLoc(bridged: bridged.getSourceLocation())
  }

  public static fn ==(lhs: GlobalVariable, rhs: GlobalVariable) -> Bool {
    lhs === rhs
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(ObjectIdentifier(this))
  }

  public var bridged: BridgedGlobalVar { BridgedGlobalVar(CodiraObject(this)) }
}

// Bridging utilities

extension BridgedGlobalVar {
  public var globalVar: GlobalVariable { obj.getAs(GlobalVariable.this) }

  public var optional: OptionalBridgedGlobalVar {
    OptionalBridgedGlobalVar(obj: this.obj)
  }
}

extension OptionalBridgedGlobalVar {
  public var globalVar: GlobalVariable? { obj.getAs(GlobalVariable.this) }

  public static var none: OptionalBridgedGlobalVar {
    OptionalBridgedGlobalVar(obj: nil)
  }
}
