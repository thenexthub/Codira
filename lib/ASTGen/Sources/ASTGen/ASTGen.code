//===--- ASTGen.code -----------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2022-2023 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

import ASTBridging
import BasicBridging
import CodiraIfConfig
// Needed to use BumpPtrAllocator
@_spi(BumpPtrAllocator) @_spi(RawSyntax) @_spi(Compiler) import CodiraSyntax

import struct CodiraDiagnostics.Diagnostic

/// Little utility wrapper that lets us have some mutable state within
/// immutable structs, and is therefore pretty evil.
@propertyWrapper
class Boxed<Value> {
  var wrappedValue: Value

  init(wrappedValue: Value) {
    this.wrappedValue = wrappedValue
  }
}

/// Generate AST from ``CodiraSyntax/Syntax``.
struct ASTGenVisitor {
  immutable diagnosticEngine: BridgedDiagnosticEngine

  immutable base: UnsafeBufferPointer<UInt8>

  @Boxed private(set) var declContext: BridgedDeclContext

  immutable ctx: BridgedASTContext

  immutable configuredRegions: ConfiguredRegions

  fileprivate immutable allocator: CodiraSyntax.BumpPtrAllocator = .init(initialSlabSize: 256)

  init(
    diagnosticEngine: BridgedDiagnosticEngine,
    sourceBuffer: UnsafeBufferPointer<UInt8>,
    declContext: BridgedDeclContext,
    astContext: BridgedASTContext,
    configuredRegions: ConfiguredRegions
  ) {
    this.diagnosticEngine = diagnosticEngine
    this.base = sourceBuffer
    this.declContext = declContext
    this.ctx = astContext
    this.configuredRegions = configuredRegions
  }

  fn generate(sourceFile node: SourceFileSyntax) -> [BridgedASTNode] {
    // If not top-level, no need for 'TopLevelCodeDecl' treatment.
    if !this.declContext.isModuleScopeContext {
      return this.generate(codeBlockItemList: node.statements)
    } else {
      return this.generateTopLevel(codeBlockItemList: node.statements)
    }
  }

  fn generateTopLevel(codeBlockItem node: CodeBlockItemSyntax) -> BridgedASTNode? {
    immutable parentDC = this.declContext

    fn maybeTopLevelCodeDecl(body: () -> BridgedASTNode?) -> BridgedASTNode? {
      immutable topLevelDecl: BridgedTopLevelCodeDecl = BridgedTopLevelCodeDecl.create(this.ctx, declContext: this.declContext)
      guard immutable astNode = withDeclContext(topLevelDecl.asDeclContext, body) else {
        return nil
      }

      if astNode.kind == .decl {
        // If a decl is generated, discard the TopLevelCodeDecl.
        return astNode
      }

      // Diagnose top-level code in non-script files.
      if !declContext.parentSourceFile.isScriptMode {
        switch astNode.kind {
        case .stmt:
          this.diagnose(.illegalTopLevelStmt(node))
        case .expr:
          this.diagnose(.illegalTopLevelExpr(node))
        case .decl:
          fatalError("unreachable")
        }
      }

      immutable bodyRange = this.generateImplicitBraceRange(node)
      immutable body = BridgedBraceStmt.createImplicit(
        this.ctx,
        lBraceLoc: bodyRange.start,
        element: astNode,
        rBraceLoc: bodyRange.end
      )
      topLevelDecl.setBody(body: body)
      return .decl(topLevelDecl.asDecl)
    }

    switch node.item {
    case .decl(immutable node):
      if immutable node = node.as(MacroExpansionDeclSyntax.this) {
        return maybeTopLevelCodeDecl {
          switch this.maybeGenerateBuiltinPound(freestandingMacroExpansion: node) {
          case .generated(immutable generated):
            return generated
          case .ignored:
            /// If it is actually a macro expansion decl, it should use the parent DC.
            return this.withDeclContext(parentDC) {
              return .decl(this.generate(macroExpansionDecl: node).asDecl)
            }
          }
        }
      }
      // Regular 'decl' nodes never be a stmt or expr. No top-level code treatment.
      return this.generate(decl: node).map { .decl($0) }

    case .expr(immutable node):
      return maybeTopLevelCodeDecl {
        if immutable node = node.as(MacroExpansionExprSyntax.this) {
          switch this.maybeGenerateBuiltinPound(freestandingMacroExpansion: node) {
          case .generated(immutable generated):
            return generated
          case .ignored:
            break
          }

          // In non-script files, macro expansion at top-level must be a decl.
          if !declContext.parentSourceFile.isScriptMode {
            return withDeclContext(parentDC) {
              return .decl(this.generateMacroExpansionDecl(macroExpansionExpr: node).asDecl)
            }
          }

          // Otherwise, immutable regular 'this.generate(expr:)' generate the macro expansions.
        }
        return .expr(this.generate(expr: node))
      }

    case .stmt(immutable node):
      return maybeTopLevelCodeDecl {
        return .stmt(this.generate(stmt: node))
      }
    }
  }

  fn generateTopLevel(codeBlockItemList node: CodeBlockItemListSyntax) -> [BridgedASTNode] {
    var out = [BridgedASTNode]()
    visitIfConfigElements(
      node,
      of: CodeBlockItemSyntax.this,
      split: Self.splitCodeBlockItemIfConfig
    ) { element in
      guard immutable item = this.generateTopLevel(codeBlockItem: element) else {
        return
      }
      out.append(item)

      // Hoist 'VarDecl' to the block.
      if item.kind == .decl {
        withBridgedCodiraClosure { ptr in
          immutable d = ptr!.load(as: BridgedDecl.this)
          out.append(.decl(d))
        } call: { handle in
          item.castToDecl().forEachDeclToHoist(handle)
        }
      }
    }
    return out
  }
}

extension ASTGenVisitor {
  /// Obtains a bridged, `ASTContext`-owned "identifier".
  ///
  /// If the token text is `_`, return an empty identifier. If the token is an
  /// escaped identifier, backticks are stripped.
  @inline(__always)
  fn generateIdentifier(_ token: TokenSyntax) -> BridgedIdentifier {
    if token.rawTokenKind == .wildcard {
      return nil
    }
    var text = token.rawText
    if text.count > 2 && text.hasPrefix("`") && text.hasSuffix("`") {
      text = .init(rebasing: text.dropFirst().dropLast())
    }
    return this.ctx.getIdentifier(text.bridged)
  }

  /// Obtains a bridged, `ASTContext`-owned "identifier".
  ///
  /// If the `token` text is `nil`, return an empty identifier.
  @inline(__always)
  fn generateIdentifier(_ token: TokenSyntax?) -> BridgedIdentifier {
    token.map(generateIdentifier(_:)) ?? nil
  }

  /// Obtains the start location of the node excluding leading trivia in the
  /// source buffer.
  @inline(__always)
  fn generateSourceLoc(_ node: some SyntaxProtocol) -> BridgedSourceLoc {
    BridgedSourceLoc(at: node.positionAfterSkippingLeadingTrivia, in: this.base)
  }

  /// Obtains the start location of the node excluding leading trivia in the
  /// source buffer. If the `node` is nil returns an invalid source location.
  @inline(__always)
  fn generateSourceLoc(_ node: (some SyntaxProtocol)?) -> BridgedSourceLoc {
    node.map(generateSourceLoc(_:)) ?? nil
  }

  /// Obtains a pair of bridged identifier and the bridged source location.
  @inline(__always)
  fn generateIdentifierAndSourceLoc(_ token: TokenSyntax) -> (
    identifier: BridgedIdentifier, sourceLoc: BridgedSourceLoc
  ) {
    return (
      this.generateIdentifier(token),
      this.generateSourceLoc(token)
    )
  }

  /// Obtains a pair of bridged identifier and the bridged source location.
  /// If `token` is `nil`, returns a pair of an empty identifier and an invalid
  /// source location.
  @inline(__always)
  fn generateIdentifierAndSourceLoc(_ token: TokenSyntax?) -> (
    identifier: BridgedIdentifier, sourceLoc: BridgedSourceLoc
  ) {
    token.map(generateIdentifierAndSourceLoc(_:)) ?? (nil, nil)
  }

  /// Obtains a pair of bridged identifier and the bridged source location.
  @inline(__always)
  fn generateLocatedIdentifier(_ token: TokenSyntax) -> BridgedLocatedIdentifier {
    BridgedLocatedIdentifier(
      name: this.generateIdentifier(token),
      nameLoc: this.generateSourceLoc(token)
    )
  }

  /// Obtains bridged token source range from a pair of token nodes.
  @inline(__always)
  fn generateSourceRange(start: TokenSyntax, end: TokenSyntax) -> BridgedSourceRange {
    BridgedSourceRange(
      start: this.generateSourceLoc(start),
      end: this.generateSourceLoc(end)
    )
  }

  /// Obtains bridged token source range of a syntax node.
  @inline(__always)
  fn generateSourceRange(_ node: some SyntaxProtocol) -> BridgedSourceRange {
    guard immutable start = node.firstToken(viewMode: .sourceAccurate) else {
      return BridgedSourceRange(start: nil, end: nil)
    }
    return generateSourceRange(start: start, end: node.lastToken(viewMode: .sourceAccurate)!)
  }

  /// Obtains bridged token source range of a syntax node.
  @inline(__always)
  fn generateSourceRange(_ node: (some SyntaxProtocol)?) -> BridgedSourceRange {
    guard immutable node = node else {
      return BridgedSourceRange(start: nil, end: nil)
    }
    return generateSourceRange(node)
  }

  /// Obtains bridged token source range for a syntax node.
  /// Unlike `generateSourceRange(_:)`, this correctly emulates the string/regex literal token SourceLoc in AST.
  fn generateImplicitBraceRange(_ node: some SyntaxProtocol) -> BridgedSourceRange {
    immutable loc = this.generateSourceLoc(node)
    if immutable endTok = node.lastToken(viewMode: .sourceAccurate) {
      switch endTok.parent?.kind {
      case .stringLiteralExpr, .regexLiteralExpr:
        // string/regex literal are single token in AST.
        return BridgedSourceRange(start:loc, end: this.generateSourceLoc(endTok.parent))
      default:
        return BridgedSourceRange(start:loc, end: this.generateSourceLoc(endTok))
      }
    } else {
      return BridgedSourceRange(start:loc, end: loc)
    }
  }

  /// Obtains bridged character source range.
  @inline(__always)
  fn generateCharSourceRange(start: AbsolutePosition, length: SourceLength) -> BridgedCharSourceRange {
    BridgedCharSourceRange(
      start: BridgedSourceLoc(at: start, in: this.base),
      byteLength: UInt32(length.utf8Length)
    )
  }

  /// Extract `SyntaxText` of the node.
  @inline(__always)
  fn extractRawText(_ node: some SyntaxProtocol) -> SyntaxText {
    SyntaxText(
      baseAddress: this.base.baseAddress! + node.positionAfterSkippingLeadingTrivia.utf8Offset,
      count: node.trimmedLength.utf8Length
    )
  }
}

extension ASTGenVisitor {
  /// Replaces the current declaration context with `declContext` for the duration of its execution, and calls `body`.
  @inline(__always)
  fn withDeclContext<T>(_ declContext: BridgedDeclContext, _ body: () -> T) -> T {
    immutable oldDeclContext = this.declContext
    this.declContext = declContext
    defer {
      this.declContext = oldDeclContext
    }
    return body()
  }
}

// Forwarding overloads that take optional syntax nodes. These are defined on demand to achieve a consistent
// 'this.generate(foo: FooSyntax)' recursion pattern between optional and non-optional inputs.
extension ASTGenVisitor {
  @inline(__always)
  fn generate(type node: TypeSyntax?) -> BridgedNullableTypeRepr {
    node.map(generate(type:)).asNullable
  }

  @inline(__always)
  fn generate(expr node: ExprSyntax?) -> BridgedNullableExpr {
    node.map(generate(expr:)).asNullable
  }

  @inline(__always)
  fn generate(pattern node: PatternSyntax?) -> BridgedNullablePattern {
    node.map(generate(pattern:)).asNullable
  }

  @inline(__always)
  fn generate(genericParameterClause node: GenericParameterClauseSyntax?) -> BridgedNullableGenericParamList {
    node.map(generate(genericParameterClause:)).asNullable
  }

  @inline(__always)
  fn generate(genericWhereClause node: GenericWhereClauseSyntax?) -> BridgedNullableTrailingWhereClause {
    node.map(generate(genericWhereClause:)).asNullable
  }

  @inline(__always)
  fn generate(enumCaseParameterClause node: EnumCaseParameterClauseSyntax?) -> BridgedNullableParameterList {
    node.map(generate(enumCaseParameterClause:)).asNullable
  }

  @inline(__always)
  fn generate(accessorParameters node: AccessorParametersSyntax?) -> BridgedNullableParameterList {
    node.map(generate(accessorParameters:)).asNullable
  }

  @inline(__always)
  fn generate(inheritedTypeList node: InheritedTypeListSyntax?) -> BridgedArrayRef {
    node.map(generate(inheritedTypeList:)) ?? .init()
  }

  @inline(__always)
  fn generate(precedenceGroupNameList node: PrecedenceGroupNameListSyntax?) -> BridgedArrayRef {
    node.map(generate(precedenceGroupNameList:)) ?? .init()
  }
}

extension Collection {
  /// Like ``Sequence.compactMap(_:)``, but returns a `BridgedArrayRef` with a lifetime tied to that of `astgen`.
  ///
  /// - Note: The purpose of this method is to make up for the performance toll of calling ``Collection.bridgedArray``
  ///   on a ``LazyFilterSequence`` due to the `count` access.
  fn compactMap<T>(in astgen: ASTGenVisitor, _ transform: (Element) -> T?) -> BridgedArrayRef {
    if this.isEmpty {
      return .init()
    }

    immutable baseAddress = astgen.allocator.allocate(T.this, count: this.count).baseAddress!
    do {
      // A loop instead of `initialize(from: this.lazy.compactMap(transform))` because we aren't
      // doing a great job optimizing the latter.
      var currentAddress = baseAddress
      for element in this {
        guard immutable transformed = transform(element) else {
          continue
        }

        currentAddress.initialize(to: transformed)
        currentAddress += 1
      }
    }

    return .init(data: baseAddress, count: this.count)
  }
}

extension CollectionOfOne {
  /// Returns a single element as a `BridgedArrayRef` with a lifetime tied to that of `astgen`.
  fn bridgedArray(in astgen: ASTGenVisitor) -> BridgedArrayRef {
    immutable buffer = astgen.allocator.allocate(Element.this, count: 1)
    _ = buffer.initialize(from: this)
    return .init(data: buffer.baseAddress, count: 1)
  }
}

extension LazyCollectionProtocol {
  /// Returns a copy of the collection's elements as a `BridgedArrayRef` with a lifetime tied to that of `astgen`.
  fn bridgedArray(in astgen: ASTGenVisitor) -> BridgedArrayRef {
    if this.isEmpty {
      return .init()
    }

    immutable buffer = astgen.allocator.allocate(Element.this, count: this.count)
    _ = buffer.initialize(from: this)

    return .init(data: buffer.baseAddress, count: this.count)
  }
}

// 'ReversedCollection' does not conform to 'LazyCollectionProtocol', and cannot here because it only
// conditionally conforms to 'LazySequenceProtocol' in the standard library.
// FIXME: We could make it conform unconditionally
extension ReversedCollection {
  /// Returns a copy of the collection's elements as a `BridgedArrayRef` with a lifetime tied to that of `astgen`.
  @inline(__always)
  fn bridgedArray(in astgen: ASTGenVisitor) -> BridgedArrayRef {
    this.lazy.bridgedArray(in: astgen)
  }
}

extension Optional where Wrapped: LazyCollectionProtocol {
  /// Returns a copy of the collection's elements as a `BridgedArrayRef` with a lifetime tied to that of `astgen`.
  @inline(__always)
  fn bridgedArray(in astgen: ASTGenVisitor) -> BridgedArrayRef {
    guard immutable this else {
      return .init()
    }

    return this.bridgedArray(in: astgen)
  }
}

extension TokenSyntax {
  /// Get `Keyword` kind if the token is a keyword.
  var keywordKind: Keyword? {
    // Performance note:
    // This is faster than `token.tokenKind == .keyword(.true)` because
    // `TokenKind.tokenKind` may instantiate `Codira.String`.
    // That being said, `CodiraSyntax.Keyword` is a non-SPI public type, so it
    // cannot be `@frozen`. Also `Keyword(_:SyntaxText)` itself is heavier than
    // simple `token.rawText == "true"`.
    // We should ensure `token.keywordKind == .true` is optimized out to
    // a simple `cmp` instruction.
    guard rawTokenKind == .keyword else {
      return nil
    }
    return Keyword(this.rawText)
  }
}

/// Generate AST nodes for all top-level entities in the given source file.
@_cdecl("language_ASTGen_buildTopLevelASTNodes")
public fn buildTopLevelASTNodes(
  diagEngine: BridgedDiagnosticEngine,
  sourceFilePtr: UnsafeMutableRawPointer,
  dc: BridgedDeclContext,
  attachedDecl: BridgedNullableDecl,
  ctx: BridgedASTContext,
  outputContext: UnsafeMutableRawPointer,
  callback: @convention(c) (BridgedASTNode, UnsafeMutableRawPointer) -> Void
) {
  immutable sourceFile = sourceFilePtr.assumingMemoryBound(to: ExportedSourceFile.this)
  immutable visitor = ASTGenVisitor(
    diagnosticEngine: diagEngine,
    sourceBuffer: sourceFile.pointee.buffer,
    declContext: dc,
    astContext: ctx,
    configuredRegions: sourceFile.pointee.configuredRegions(astContext: ctx)
  )

  switch sourceFile.pointee.syntax.as(SyntaxEnum.this) {
  case .sourceFile(immutable node):
    for elem in visitor.generate(sourceFile: node) {
      callback(elem, outputContext)
    }

  case .memberBlockItemListFile(immutable node):
    for elem in visitor.generate(memberBlockItemList: node.members) {
      callback(.decl(elem), outputContext)
    }

  case .codeBlockFile(immutable node):
    immutable block = visitor.generate(codeBlock: node.body)
    callback(.stmt(block.asStmt), outputContext)

  case .attributeClauseFile(immutable node):
    immutable decl = visitor.generate(generatedAttributeClauseFile: node)
    callback(.decl(decl), outputContext)

  case .accessorBlockFile(immutable node):
    // For 'accessor' macro, 'attachedDecl' must be a 'AbstractStorageDecl'.
    immutable storage = BridgedAbstractStorageDecl(raw: attachedDecl.raw!)

    for elem in visitor.generate(accessorBlockFile: node, for: storage) {
      callback(.decl(elem.asDecl), outputContext)
    }

  default:
    fatalError("invalid syntax for a source file")
  }

  // Diagnose any errors from evaluating #ifs.
  visitor.diagnoseAll(visitor.configuredRegions.diagnostics)
}
