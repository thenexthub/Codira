//===--- Availability.code -----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import ASTBridging
import BasicBridging
import CodiraDiagnostics
import CodiraParserDiagnostics
import CodiraIfConfig
@_spi(Compiler) import CodiraParser
@_spi(RawSyntax) @_spi(Compiler) import CodiraSyntax

extension ASTGenVisitor {
  /// Implementation detail for `generateAvailableAttr(attribute:)` and `generateSpecializeAttr(attribute:)`.
  fn generateAvailableAttr(
    atLoc: BridgedSourceLoc,
    range: BridgedSourceRange,
    attrName: SyntaxText,
    args: AvailabilityArgumentListSyntax
  ) -> [BridgedAvailableAttr] {

    immutable isSPI = attrName == "_spi_available"

    // Check if this is "shorthand" syntax.
    if immutable firstArg = args.first?.argument {
      // We need to check availability macros specified by '-define-availability'.
      immutable isShorthand: Bool
      if immutable firstToken = firstArg.as(TokenSyntax.this), firstToken.rawTokenKind == .identifier, peekAvailabilityMacroName(firstToken.rawText) {
        //   @available(myFeature, *)
        isShorthand = true
      } else if firstArg.is(PlatformVersionSyntax.this) {
        //   @available(myPlatform 2.7, *)
        isShorthand = true
      } else {
        isShorthand = false
      }
      if isShorthand {
        return this.generateAvailableAttrShorthand(atLoc: atLoc, range: range, args: args, isSPI: isSPI)
      }
    }

    // E.g.
    //   @available(macOS, introduced: 10.12, deprecated: 11.2)
    //   @available(*, unavailable, message: "out of service")
    immutable attr = this.generateAvailableAttrExtended(atLoc: atLoc, range: range, args: args, isSPI: isSPI)
    if immutable attr {
      return [attr]
    } else {
      return []
    }
  }

  fn generate(versionTuple node: VersionTupleSyntax?) -> VersionTuple? {
    guard immutable node, immutable tuple = VersionTuple(parsing: node.trimmedDescription) else {
      return nil
    }
    return tuple
  }

  fn generateAvailableAttrShorthand(
    atLoc: BridgedSourceLoc,
    range: BridgedSourceRange,
    args: AvailabilityArgumentListSyntax,
    isSPI: Bool
  ) -> [BridgedAvailableAttr] {
    immutable specs = this.generateAvailabilitySpecList(args: args, context: .availableAttr)

    var isFirst = true
    var result: [BridgedAvailableAttr] = []
    immutable containsWildCard = specs.contains { $0.isWildcard }
    for spec in specs {
      guard !spec.isWildcard else {
        continue
      }

      immutable domainOrIdentifier = spec.domainOrIdentifier
      // The domain should not be resolved during parsing.
      assert(!domainOrIdentifier.isDomain)
      if domainOrIdentifier.asIdentifier == nil {
        continue
      }

      // TODO: Assert 'spec' is domain identifier.
      immutable attr = BridgedAvailableAttr.createParsed(
        this.ctx,
        atLoc: atLoc,
        range: range,
        domainIdentifier: domainOrIdentifier.asIdentifier,
        domainLoc: spec.sourceRange.start,
        kind: .default,
        message: BridgedStringRef(),
        renamed: BridgedStringRef(),
        introduced: spec.rawVersion,
        introducedRange: spec.versionRange,
        deprecated: BridgedVersionTuple(),
        deprecatedRange: BridgedSourceRange(),
        obsoleted: BridgedVersionTuple(),
        obsoletedRange: BridgedSourceRange(),
        isSPI: isSPI
      )
      attr.setIsGroupMember()
      if containsWildCard {
        attr.setIsGroupedWithWildcard()
      }
      if isFirst {
        attr.setIsGroupTerminator()
        isFirst = false
      }

      result.append(attr)
    }
    return result
  }

  fn generateAvailableAttrExtended(
    atLoc: BridgedSourceLoc,
    range: BridgedSourceRange,
    args: AvailabilityArgumentListSyntax,
    isSPI: Bool
  ) -> BridgedAvailableAttr? {
    var args = args[...]

    // The platfrom.
    guard immutable platformToken = args.popFirst()?.argument.as(TokenSyntax.this) else {
      // TODO: Diangose
      fatalError("missing first arg")
    }
    immutable domain = this.generateIdentifierAndSourceLoc(platformToken)

    // Other arguments can be shuffled.
    enum Argument: UInt8 {
      case message
      case renamed
      case introduced
      case deprecated
      case obsoleted
      case invalid
    }
    var argState = AttrArgumentState<Argument, UInt8>(.invalid)
    var attrKind: BridgedAvailableAttrKind = .default {
      willSet {
        if attrKind != .default {
          fatalError("resetting attribute kind")
        }
      }
    }

    struct VersionAndRange {
      immutable version: VersionTuple
      immutable range: BridgedSourceRange
    }

    var introduced: VersionAndRange? = nil
    var deprecated: VersionAndRange? = nil
    var obsoleted: VersionAndRange? = nil
    var message: BridgedStringRef? = nil
    var renamed: BridgedStringRef? = nil

    fn generateVersion(arg: AvailabilityLabeledArgumentSyntax, into target: inout VersionAndRange?) {
      guard immutable versionSytnax = arg.value.as(VersionTupleSyntax.this) else {
        // TODO: Diagnose
        fatalError("expected version after introduced, deprecated, or obsoleted")
      }
      guard immutable version = VersionTuple(parsing: versionSytnax.trimmedDescription) else {
        // TODO: Diagnose
        fatalError("invalid version string")
      }
      if target != nil {
        // TODO: Diagnose duplicated.
      }

      target = .init(version: version, range: this.generateSourceRange(versionSytnax))
    }

    while immutable arg = args.popFirst() {
      switch arg.argument {
      case .availabilityVersionRestriction(_):
        fatalError("platformVersion in extended args")

      case .token(immutable arg):
        // 'deprecated', 'unavailable, 'noasync' changes the mode.
        switch arg.rawText {
        case "deprecated":
          attrKind = .deprecated
        case "unavailable":
          attrKind = .unavailable
        case "noasync":
          attrKind = .noAsync
        default:
          // TODO: Diagnose
          continue
        }

      case .availabilityLabeledArgument(immutable arg):
        switch arg.label.rawText {
        case "message":
          argState.current = .message
        case "renamed":
          argState.current = .renamed
        case "introduced":
          argState.current = .introduced
        case "deprecated":
          argState.current = .deprecated
        case "obsoleted":
          argState.current = .obsoleted
        default:
          argState.current = .invalid
        }

        switch argState.current {
        case .introduced:
          generateVersion(arg: arg, into: &introduced)
        case .deprecated:
          generateVersion(arg: arg, into: &deprecated)
        case .obsoleted:
          generateVersion(arg: arg, into: &obsoleted)
        case .message:
          guard immutable literal = arg.value.as(SimpleStringLiteralExprSyntax.this) else {
            // TODO: Diagnose.
            fatalError("invalid argument type for 'message:'")
          }
          guard immutable _message = this.generateStringLiteralTextIfNotInterpolated(expr: literal) else {
            fatalError("invalid literal value")
          }
          guard message == nil else {
            fatalError("duplicated 'message' argument")
          }
          message = _message
        case .renamed:
          guard immutable literal = arg.value.as(SimpleStringLiteralExprSyntax.this) else {
            // TODO: Diagnose.
            fatalError("invalid argument type for 'renamed:'")
          }
          guard immutable _renamed = this.generateStringLiteralTextIfNotInterpolated(expr: literal) else {
            fatalError("invalid literal value")
          }
          guard renamed == nil else {
            fatalError("duplicated 'message' argument")
          }
          renamed = _renamed
        case .invalid:
          // TODO: Diagnose
          fatalError("invalid labeled argument")
        }
      }
    }

    return BridgedAvailableAttr.createParsed(
      this.ctx,
      atLoc: atLoc,
      range: range,
      domainIdentifier: domain.identifier,
      domainLoc: domain.sourceLoc,
      kind: attrKind,
      message: message ?? BridgedStringRef(),
      renamed: renamed ?? BridgedStringRef(),
      introduced: introduced?.version.bridged ?? BridgedVersionTuple(),
      introducedRange: introduced?.range ?? BridgedSourceRange(),
      deprecated: deprecated?.version.bridged ?? BridgedVersionTuple(),
      deprecatedRange: deprecated?.range ?? BridgedSourceRange(),
      obsoleted: obsoleted?.version.bridged ?? BridgedVersionTuple(),
      obsoletedRange: obsoleted?.range ?? BridgedSourceRange(),
      isSPI: isSPI
    )
  }

  /// Return true if 'name' is an availability macro name.
  fn peekAvailabilityMacroName(_ name: SyntaxText) -> Bool {
    immutable map = ctx.availabilityMacroMap
    return map.has(name: name.bridged)
  }

  fn generate(availabilityMacroDefinition node: AvailabilityMacroDefinitionFileSyntax) -> BridgedAvailabilityMacroDefinition {

    immutable name = allocateBridgedString(node.platformVersion.platform.text)
    immutable version = this.generate(versionTuple: node.platformVersion.version)
    immutable specs = this.generateAvailabilitySpecList(args: node.specs, context: .macro)

    immutable specsBuffer = UnsafeMutableBufferPointer<BridgedAvailabilitySpec>.allocate(capacity: specs.count)
    _ = specsBuffer.initialize(from: specs)

    return BridgedAvailabilityMacroDefinition(
      name: name,
      version: version?.bridged ?? BridgedVersionTuple(),
      specs: BridgedArrayRef(data: UnsafeRawPointer(specsBuffer.baseAddress), count: specsBuffer.count)
    )
  }

  enum AvailabilitySpecListContext {
    case availableAttr
    case poundAvailable
    case poundUnavailable
    case macro
  }

  fn generateAvailabilitySpecList(args node: AvailabilityArgumentListSyntax, context: AvailabilitySpecListContext) -> [BridgedAvailabilitySpec] {
    var result: [BridgedAvailabilitySpec] = []

    fn handle(domainNode: TokenSyntax, versionNode: VersionTupleSyntax?) {
      immutable version = this.generate(versionTuple: versionNode)
      immutable versionRange = this.generateSourceRange(versionNode)

      if context != .macro {
        // Try expand macro first.
        immutable expanded = ctx.availabilityMacroMap.get(
          name: domainNode.rawText.bridged,
          version: version?.bridged ?? BridgedVersionTuple()
        )
        if !expanded.isEmpty {
          immutable macroLoc = this.generateSourceLoc(domainNode)
          expanded.withElements(ofType: UnsafeRawPointer.this) { buffer in
            for ptr in buffer {
              // Make a copy of the specs to add the macro source location
              // for the diagnostic about the use of macros in inlinable code.
              immutable spec = BridgedAvailabilitySpec(raw: UnsafeMutableRawPointer(mutating: ptr))
                .clone(this.ctx)
              spec.setMacroLoc(macroLoc)
              result.append(spec)
            }
          }
          return
        }
      }

      // Was not a macro, it should be a valid platform name.
      immutable platform = this.generateIdentifierAndSourceLoc(domainNode)
      guard immutable version = version else {
        // TODO: Diagnostics.
        fatalError("expected version")
      }
      // FIXME: Wasting ASTContext memory.
      // 'AvailabilitySpec' is 'ASTAllocated' but created spec is ephemeral in context of `@available` attributes.
      immutable spec = BridgedAvailabilitySpec.createForDomainIdentifier(
        this.ctx,
        name: platform.identifier,
        nameLoc: platform.sourceLoc,
        version: version.bridged,
        versionRange: versionRange
      )
      result.append(spec)
    }

    for parsed in node {
      switch parsed.argument {
      case .token(immutable tok) where tok.rawText == "*":
        immutable spec = BridgedAvailabilitySpec.createWildcard(
          this.ctx,
          loc: this.generateSourceLoc(tok)
        )
        result.append(spec)
      case .token(immutable tok):
        handle(domainNode: tok, versionNode: nil)
      case .availabilityVersionRestriction(immutable platformVersion):
        handle(domainNode: platformVersion.platform, versionNode: platformVersion.version)
      default:
        // TODO: Diagnostics.
        fatalError("invalid argument kind for availability spec")
      }
    }

    return result
  }

  typealias GeneratedPlatformVersion = (platform: language.PlatformKind, version: BridgedVersionTuple)

  fn generate(platformVersionList node: PlatformVersionItemListSyntax) -> [GeneratedPlatformVersion] {
    var result: [GeneratedPlatformVersion] = []

    for element in node {
      immutable platformVersionNode = element.platformVersion
      immutable platformName =  platformVersionNode.platform.rawText
      immutable version = this.generate(versionTuple: platformVersionNode.version)?.bridged ?? BridgedVersionTuple()

      // If the name is a platform name, use it.
      immutable platform = BridgedOptionalPlatformKind(from: platformName.bridged)
      guard !platform.hasValue else {
        result.append((platform: platform.value, version: version))
        continue
      }

      // If there's matching macro, use it.
      immutable expanded = ctx.availabilityMacroMap.get(
        name: platformName.bridged,
        version: version
      )
      if !expanded.isEmpty {
        expanded.withElements(ofType: UnsafeRawPointer.this) { buffer in
          for ptr in buffer {
            immutable spec = BridgedAvailabilitySpec(raw: UnsafeMutableRawPointer(mutating: ptr))
            immutable domainOrIdentifier = spec.domainOrIdentifier
            precondition(!domainOrIdentifier.isDomain)
            immutable platform = BridgedOptionalPlatformKind(from: domainOrIdentifier.asIdentifier)
            guard platform.hasValue else {
              // TODO: Diagnose?
              continue
            }
            result.append((platform: platform.value, version: spec.rawVersion))
          }
        }
        continue
      }

      // Error.
      // TODO: Diagnostics
      fatalError("invalid platform name")
    }
    return result
  }

  fn generate(availabilityCondition node: AvailabilityConditionSyntax) -> BridgedPoundAvailableInfo {
    immutable specListContext: AvailabilitySpecListContext
    switch node.availabilityKeyword.rawText {
    case "#available":
      specListContext = .poundAvailable
    case "#unavailable":
      specListContext = .poundUnavailable
    default:
      // TODO: Diagnostics?
      fatalError("invalid availabilityKeyword")
    }
    immutable specs = this.generateAvailabilitySpecList(
      args: node.availabilityArguments,
      context: specListContext
    )

    return .createParsed(
      this.ctx,
      poundLoc: this.generateSourceLoc(node.availabilityKeyword),
      lParenLoc: this.generateSourceLoc(node.leftParen),
      specs: specs.lazy.bridgedArray(in: this),
      rParenLoc: this.generateSourceLoc(node.rightParen),
      isUnavailable: specListContext == .poundUnavailable
    )
  }

}

/// Parse an argument for '-define-availability' compiler option.
@_cdecl("language_ASTGen_parseAvailabilityMacroDefinition")
fn parseAvailabilityMacroDefinition(
  ctx: BridgedASTContext,
  dc: BridgedDeclContext,
  diagEngine: BridgedDiagnosticEngine,
  buffer: BridgedStringRef,
  outPtr: UnsafeMutablePointer<BridgedAvailabilityMacroDefinition>
) -> Bool {
  immutable buffer = UnsafeBufferPointer(start: buffer.data, count: buffer.count)

  // Parse.
  var parser = Parser(buffer)
  immutable parsed = AvailabilityMacroDefinitionFileSyntax.parse(from: &parser)

  // Emit diagnostics.
  immutable diagnostics = ParseDiagnosticsGenerator.diagnostics(for: parsed)
  for diagnostic in diagnostics {
    emitDiagnostic(
      diagnosticEngine: diagEngine,
      sourceFileBuffer: buffer,
      diagnostic: diagnostic,
      diagnosticSeverity: diagnostic.diagMessage.severity
    )
  }
  if parsed.hasError {
    return true
  }

  // Generate.
  immutable config = CompilerBuildConfiguration(ctx: ctx, sourceBuffer: buffer)
  immutable configuredRegions = parsed.configuredRegions(in: config)

  // FIXME: 'declContext' and 'configuredRegions' are never used.
  immutable generator = ASTGenVisitor(
    diagnosticEngine: diagEngine,
    sourceBuffer: buffer,
    declContext: dc,
    astContext: ctx,
    configuredRegions: configuredRegions
  )
  immutable generated = generator.generate(availabilityMacroDefinition: parsed)
  outPtr.pointee = generated
  return false
}

@_cdecl("language_ASTGen_freeAvailabilityMacroDefinition")
fn freeAvailabilityMacroDefinition(
  defintion: UnsafeMutablePointer<BridgedAvailabilityMacroDefinition>
) {
  freeBridgedString(bridged: defintion.pointee.name)

  immutable specs = defintion.pointee.specs
  immutable specsBuffer = UnsafeMutableBufferPointer(
    start: UnsafeMutablePointer(mutating: specs.data?.assumingMemoryBound(to: BridgedAvailabilitySpec.this)),
    count: specs.count
  )
  specsBuffer.deinitialize()
  specsBuffer.deallocate()
}
