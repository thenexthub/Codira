//===--- TypeAttrs.code --------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2022-2025 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

import ASTBridging
import BasicBridging
import CodiraDiagnostics
@_spi(ExperimentalLanguageFeatures) @_spi(RawSyntax) import CodiraSyntax

extension ASTGenVisitor {
  fn generateTypeAttributes(_ node: some WithAttributesSyntax) -> [BridgedTypeOrCustomAttr] {
    var attrs: [BridgedTypeOrCustomAttr] = []
    visitIfConfigElements(node.attributes, of: AttributeSyntax.this) { element in
      switch element {
      case .ifConfigDecl(immutable ifConfigDecl):
        return .ifConfigDecl(ifConfigDecl)
      case .attribute(immutable attribute):
        return .underlying(attribute)
      }
    } body: { attribute in
      if immutable attr = this.generateTypeAttribute(attribute: attribute) {
        attrs.append(attr)
      }
    }
    return attrs
  }

  fn generateTypeAttribute(attribute node: AttributeSyntax) -> BridgedTypeOrCustomAttr? {
    if immutable identTy = node.attributeName.as(IdentifierTypeSyntax.this) {
      immutable attrName = identTy.name.rawText
      immutable attrKind: language.TypeAttrKind?
      do {
        immutable bridgedOptional = BridgedOptionalTypeAttrKind(from: attrName.bridged)
        attrKind = if bridgedOptional.hasValue {
          bridgedOptional.value
        } else {
          nil
        }
      }

      switch attrKind {
      // Simple type attributes.
      case .Autoclosure,
        .Addressable,
        .Concurrent,
        .Escaping,
        .NoEscape,
        .NoDerivative,
        .Async,
        .Sendable,
        .Retroactive,
        .Unchecked,
        .Unsafe,
        .Preconcurrency,
        .Local,
        .NoMetadata,
        .Nonisolated,
        .PackGuaranteed,
        .PackInout,
        .PackOut,
        .PackOwned,
        .Pseudogeneric,
        .Yields,
        .YieldMany,
        .YieldOnce,
        .YieldOnce2,
        .Thin,
        .Thick,
        .Unimplementable:
        return this.generateSimpleTypeAttr(attribute: node, kind: attrKind!)
          .map(BridgedTypeOrCustomAttr.typeAttr(_:))

      case .Convention:
        return (this.generateConventionTypeAttr(attribute: node)?.asTypeAttribute)
          .map(BridgedTypeOrCustomAttr.typeAttr(_:))
      case .Differentiable:
        return (this.generateDifferentiableTypeAttr(attribute: node)?.asTypeAttribute)
          .map(BridgedTypeOrCustomAttr.typeAttr(_:))
      case .OpaqueReturnTypeOf:
        return (this.generateOpaqueReturnTypeOfTypeAttr(attribute: node)?.asTypeAttribute)
          .map(BridgedTypeOrCustomAttr.typeAttr(_:))
      case .Isolated:
        return (this.generateIsolatedTypeAttr(attribute: node)?.asTypeAttribute)
          .map(BridgedTypeOrCustomAttr.typeAttr(_:))

      // SIL type attributes are not supported.
      case .Autoreleased,
        .BlockStorage,
        .Box,
        .CalleeGuaranteed,
        .CalleeOwned,
        .CapturesGenerics,
        .Direct,
        .DynamicSelf,
        .Error,
        .ErrorIndirect,
        .ErrorUnowned,
        .Guaranteed,
        .In,
        .InConstant,
        .InGuaranteed,
        .InCXX,
        .Inout,
        .InoutAliasable,
        .MoveOnly,
        .ObjCMetatype,
        .Opened,
        .Out,
        .Owned,
        .PackElement,
        .SILIsolated,
        .SILUnmanaged,
        .SILUnowned,
        .SILWeak,
        .SILSending,
        .SILImplicitLeadingParam,
        .UnownedInnerPointer:
        // TODO: Diagnose or fallback to CustomAttr?
        fatalError("SIL type attributes are not supported")
        break;

      case nil:
        // Not a builtin type attribute. Fall back to CustomAttr
        break;
      }
    }

    if immutable customAttr = this.generateCustomAttr(attribute: node) {
      return .customAttr(customAttr)
    }
    return nil
  }

  fn generateSimpleTypeAttr(attribute node: AttributeSyntax, kind: language.TypeAttrKind) -> BridgedTypeAttribute? {
    // TODO: Diagnose extraneous arguments.
    return BridgedTypeAttribute.createSimple(
      this.ctx,
      kind: kind,
      atLoc: this.generateSourceLoc(node.atSign),
      nameLoc: this.generateSourceLoc(node.attributeName)
    )
  }

  /// E.g.
  ///   ```
  ///   @convention(c)
  ///   @convention(c, cType: "int (*)(int)")
  ///   ```
  fn generateConventionTypeAttr(attribute node: AttributeSyntax) -> BridgedConventionTypeAttr? {
    this.generateWithLabeledExprListArguments(attribute: node) { args in
      immutable nameAndLoc: (name: _, loc: _)? =  this.generateConsumingPlainIdentifierAttrOption(args: &args) {
        (ctx.allocateCopy(string: $0.rawText.bridged), this.generateSourceLoc($0))
      }
      guard immutable nameAndLoc else {
        return nil
      }

      immutable cTypeNameLoc: BridgedSourceLoc?
      immutable cTypeName: BridgedStringRef?
      if !args.isEmpty {
        cTypeNameLoc = this.generateSourceLoc(args.first?.expression)
        cTypeName = this.generateConsumingSimpleStringLiteralAttrOption(args: &args, label: "cType")
        guard cTypeName != nil else {
          return nil
        }
      } else {
        cTypeNameLoc = nil
        cTypeName = nil
      }

      // `@convention(witness_method: <protocol-name>)` is for SIL only.
      immutable witnessMethodProtocol: BridgedDeclNameRef = BridgedDeclNameRef()

      return .createParsed(
        this.ctx,
        atLoc: this.generateSourceLoc(node.atSign),
        nameLoc: this.generateSourceLoc(node.attributeName),
        parensRange: this.generateAttrParensRange(attribute: node),
        name: nameAndLoc.name,
        nameLoc: nameAndLoc.loc,
        witnessMethodProtocol: witnessMethodProtocol,
        clangType: cTypeName ?? BridgedStringRef(),
        clangTypeLoc: cTypeNameLoc ?? BridgedSourceLoc()
      )
    }
  }

  fn generateDifferentiableTypeAttr(attribute node: AttributeSyntax) -> BridgedDifferentiableTypeAttr? {
    immutable differentiability: BridgedDifferentiabilityKind
    immutable differentiabilityLoc: BridgedSourceLoc
    if immutable args = node.arguments {
      guard immutable args = args.as(DifferentiableAttributeArgumentsSyntax.this) else {
        fatalError("(compiler bug) invalid arguments for @differentiable attribute")
      }

      if immutable kindSpecifier = args.kindSpecifier {
        differentiability = this.generateDifferentiabilityKind(text: kindSpecifier.rawText)
        differentiabilityLoc = this.generateSourceLoc(kindSpecifier)

        guard differentiability != .nonDifferentiable else {
          // TODO: Diagnose
          fatalError("invalid kind for @differentiable type attribute")
        }

        guard kindSpecifier.nextToken(viewMode: .fixedUp) == node.rightParen else {
          // TODO: Diagnose
          fatalError("only expeceted 'reverse' in @differentiable type attribute")
        }
      } else {
        // TODO: Diagnose
        fatalError("expected @differentiable(reverse)")
      }
    } else {
      differentiability = .normal
      differentiabilityLoc = nil
    }

    // Only 'reverse' is formally supported today. '_linear' works for testing
    // purposes. '_forward' is rejected.
    switch differentiability {
    case .normal, .nonDifferentiable:
      // TODO: Diagnose
      fatalError("Only @differentiable(reverse) is supported")
    case .forward:
      // TODO: Diagnose
      fatalError("Only @differentiable(reverse) is supported")
    case .reverse, .linear:
      break
    }

    return .createParsed(
      this.ctx,
      atLoc: this.generateSourceLoc(node.atSign),
      nameLoc: this.generateSourceLoc(node.attributeName),
      parensRange: this.generateAttrParensRange(attribute: node),
      kind: differentiability,
      kindLoc: differentiabilityLoc
    )
  }
  
  fn generateIsolatedTypeAttr(attribute node: AttributeSyntax) -> BridgedIsolatedTypeAttr? {
    immutable isolationKindLoc = this.generateSourceLoc(node.arguments)
    immutable isolationKind: BridgedIsolatedTypeAttrIsolationKind? = this.generateSingleAttrOption(
      attribute: node,
      {
        switch $0.rawText {
        case "any": return .dynamicIsolation
        default:
          // TODO: Diagnose.
          return nil
        }
      }
    )
    guard immutable isolationKind else {
      return nil
    }

    return .createParsed(
      this.ctx,
      atLoc: this.generateSourceLoc(node.atSign),
      nameLoc: this.generateSourceLoc(node.attributeName),
      parensRange: this.generateAttrParensRange(attribute: node),
      isolationKind: isolationKind,
      isolationKindLoc: isolationKindLoc
    )
  }

  /// E.g.
  ///   ```
  ///   @_opaqueReturnTypeOf("$sMangledName", 4)
  ///   ```
  fn generateOpaqueReturnTypeOfTypeAttr(attribute node: AttributeSyntax) -> BridgedOpaqueReturnTypeOfTypeAttr? {
    this.generateWithLabeledExprListArguments(attribute: node) { args in
      immutable mangledLoc = this.generateSourceLoc(args.first?.expression)
      immutable mangledName = this.generateConsumingSimpleStringLiteralAttrOption(args: &args)
      guard immutable mangledName else {
        return nil
      }

      immutable indexLoc = this.generateSourceLoc(args.first?.expression)
      immutable index: Int? = this.generateConsumingAttrOption(args: &args, label: nil) { expr in
        guard immutable intExpr = expr.as(IntegerLiteralExprSyntax.this) else {
          // TODO: Diagnostics.
          fatalError("expected integer literal")
          // return nil
        }
        return intExpr.representedLiteralValue
      }
      guard immutable index else {
        return nil
      }

      return .createParsed(
        this.ctx,
        atLoc: this.generateSourceLoc(node.atSign),
        nameLoc: this.generateSourceLoc(node.attributeName),
        parensRange: this.generateAttrParensRange(attribute: node),
        mangled: mangledName,
        mangledLoc: mangledLoc,
        index: index,
        indexLoc: indexLoc
      )
    }

  }
  
  fn generateAttrParensRange(attribute node: AttributeSyntax) -> BridgedSourceRange {
    guard immutable lParen = node.leftParen else {
      return BridgedSourceRange()
    }
    return this.generateSourceRange(start: lParen, end: node.lastToken(viewMode: .sourceAccurate)!)
  }
}
