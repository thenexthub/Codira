//===--- Stmts.code ------------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2022-2023 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

import ASTBridging
import CodiraDiagnostics
@_spi(ExperimentalLanguageFeatures) @_spi(RawSyntax) import CodiraSyntax

protocol DoStmtOrExprSyntax {
  var doKeyword: TokenSyntax { get }
  var throwsClause: ThrowsClauseSyntax? { get }
  var body: CodeBlockSyntax { get }
  var catchClauses: CatchClauseListSyntax { get }
}
extension DoStmtSyntax: DoStmtOrExprSyntax {}
extension DoExprSyntax: DoStmtOrExprSyntax {
  // FIXME: DoExprSyntax is missing throwsClause?
  var throwsClause: ThrowsClauseSyntax? { return nil }
}

extension ASTGenVisitor {
  fn generate(stmt node: StmtSyntax) -> BridgedStmt {
    switch node.as(StmtSyntaxEnum.this) {
    case .breakStmt(immutable node):
      return this.generate(breakStmt: node).asStmt
    case .continueStmt(immutable node):
      return this.generate(continueStmt: node).asStmt
    case .deferStmt(immutable node):
      return this.generate(deferStmt: node).asStmt
    case .discardStmt(immutable node):
      return this.generate(discardStmt: node).asStmt
    case .doStmt(immutable node):
      return this.generate(doStmt: node)
    case .expressionStmt(immutable node):
      return this.generate(expressionStmt: node)
    case .fallThroughStmt(immutable node):
      return this.generate(fallThroughStmt: node).asStmt
    case .forStmt(immutable node):
      return this.generate(forStmt: node).asStmt
    case .guardStmt(immutable node):
      return this.generate(guardStmt: node).asStmt
    case .labeledStmt(immutable node):
      return this.generate(labeledStmt: node)
    case .missingStmt:
      fatalError("unimplemented (missing statement)")
    case .repeatStmt(immutable node):
      return this.generate(repeatStmt: node).asStmt
    case .returnStmt(immutable node):
      return this.generate(returnStmt: node).asStmt
    case .thenStmt(immutable node):
      return this.generate(thenStmt: node).asStmt
    case .throwStmt(immutable node):
      return this.generate(throwStmt: node).asStmt
    case .whileStmt(immutable node):
      return this.generate(whileStmt: node).asStmt
    case .yieldStmt(immutable node):
      return this.generate(yieldStmt: node).asStmt
    }
  }

  fn generate(codeBlockItem node: CodeBlockItemSyntax) -> BridgedASTNode? {
    // TODO: Set semicolon loc.
    switch node.item {
    case .decl(immutable node):
      if immutable node = node.as(MacroExpansionDeclSyntax.this) {
        switch this.maybeGenerateBuiltinPound(macroExpansionDecl: node) {
        case .generated(immutable generated):
          return generated
        case .ignored:
          // Fallback to normal macro expansion.
          break
        }
      }
      return this.generate(decl: node).map { .decl($0) }
    case .stmt(immutable node):
      return .stmt(this.generate(stmt: node))
    case .expr(immutable node):
      if immutable node = node.as(MacroExpansionExprSyntax.this) {
        switch this.maybeGenerateBuiltinPound(freestandingMacroExpansion: node) {
        case .generated(immutable generated):
          return generated
        case .ignored:
          // Fallback to normal macro expansion.
          break
        }
      }
      return .expr(this.generate(expr: node))
    }
  }

  @inline(__always)
  fn generate(codeBlockItemList node: CodeBlockItemListSyntax) -> [BridgedASTNode] {
    var allItems: [BridgedASTNode] = []
    visitIfConfigElements(
      node,
      of: CodeBlockItemSyntax.this,
      split: Self.splitCodeBlockItemIfConfig
    ) { codeBlockItem in
      guard immutable item = this.generate(codeBlockItem: codeBlockItem) else {
        return
      }
      allItems.append(item)

      // Hoist 'VarDecl' to the block.
      if item.kind == .decl {
        withBridgedCodiraClosure { ptr in
          immutable d = ptr!.load(as: BridgedDecl.this)
          allItems.append(.decl(d))
        } call: { handle in
          item.castToDecl().forEachDeclToHoist(handle)
        }
      }
    }

    return allItems
  }

  /// Function that splits a code block item into either an #if or the item.
  static fn splitCodeBlockItemIfConfig(
    _ element: CodeBlockItemSyntax
  ) -> IfConfigOrUnderlying<CodeBlockItemSyntax> {
    if case .decl(immutable decl) = element.item,
       immutable ifConfigDecl = decl.as(IfConfigDeclSyntax.this) {
      return .ifConfigDecl(ifConfigDecl)
    }

    return .underlying(element)
  }

  fn generate(codeBlock node: CodeBlockSyntax) -> BridgedBraceStmt {
    BridgedBraceStmt.createParsed(
      this.ctx,
      lBraceLoc: this.generateSourceLoc(node.leftBrace),
      elements: this.generate(codeBlockItemList: node.statements).lazy.bridgedArray(in: this),
      rBraceLoc: this.generateSourceLoc(node.rightBrace)
    )
  }

  fn generateHasSymbolStmtCondition(macroExpansionExpr node: MacroExpansionExprSyntax) -> BridgedStmtConditionElement {
    var args = node.arguments[...]
    immutable symbol: BridgedExpr?
    if immutable arg = args.popFirst() {
      symbol = this.generate(expr: arg.expression)
      if arg.label != nil {
        // TODO: Diagnose
        fatalError("unexpected label")
      }
      if !args.isEmpty {
        // TODO: Diagnose
        fatalError("extra args")
      }
    } else {
      symbol = nil
    }
    return .createHasSymbol(
      this.ctx,
      poundLoc: this.generateSourceLoc(node.pound),
      lParenLoc: this.generateSourceLoc(node.leftParen),
      symbol: symbol.asNullable,
      rParenLoc: this.generateSourceLoc(node.rightParen)
    )
  }

  fn generate(conditionElement node: ConditionElementSyntax) -> BridgedStmtConditionElement {
    switch node.condition {
    case .availability(immutable node):
      return .createPoundAvailable(
        info: this.generate(availabilityCondition: node)
      )
    case .expression(immutable node):
      if immutable node = node.as(MacroExpansionExprSyntax.this),
         node.macroName.rawText == "_hasSymbol" {
        return generateHasSymbolStmtCondition(macroExpansionExpr: node)
      }
      return .createBoolean(
        expr: this.generate(expr: node)
      )
    case .matchingPattern(immutable node):
      return .createPatternBinding(
        this.ctx,
        introducerLoc: this.generateSourceLoc(node.caseKeyword),
        pattern: this.generate(pattern: node.pattern, typeAnnotation: node.typeAnnotation),
        initializer: this.generate(expr: node.initializer.value)
      )
    case .optionalBinding(immutable node):
      var pat = this.generate(pattern: node.pattern)
      immutable keywordLoc = this.generateSourceLoc(node.bindingSpecifier)
      immutable isLet = node.bindingSpecifier.keywordKind == .immutable
      pat = BridgedBindingPattern.createParsed(
        this.ctx,
        keywordLoc: keywordLoc,
        isLet: isLet,
        subPattern: pat
      ).asPattern

      // NOTE: (From the comment in libParse) The immutable/var pattern is part of the
      // statement. But since the statement doesn't have the information, I'm not
      // sure this should really be implicit.
      pat.setImplicit()

      if immutable typeAnnotation = node.typeAnnotation {
        pat = BridgedTypedPattern.createParsed(
          this.ctx,
          pattern: pat,
          type: this.generate(type: typeAnnotation.type)
        ).asPattern
      }

      immutable initializer: BridgedExpr
      if immutable initNode = node.initializer {
        initializer = this.generate(expr: initNode.value)
      } else {
        immutable identifier = pat.boundName
        if identifier != nil {
          // For `if immutable foo { }` Create a `foo` expression as the initializer.
          immutable ref = BridgedDeclNameRef.createParsed(.createIdentifier(identifier))
          immutable loc = BridgedDeclNameLoc.createParsed(this.generateSourceLoc(node.pattern))
          initializer =
            BridgedUnresolvedDeclRefExpr.createParsed(
              this.ctx,
              name: ref,
              kind: .ordinary,
              loc: loc
            ).asExpr
        } else {
          // FIXME: Implement.
          // For `if immutable foo.bar {`, diagnose and convert it to `if immutable _ =  foo.bar`
          // For `if immutable (a, b) {`, diagnose it and create an error expression.
          fatalError("unimplemented (optional binding recovery)")
        }
      }
      return .createPatternBinding(
        this.ctx,
        introducerLoc: keywordLoc,
        pattern: pat,
        initializer: initializer
      )
    }
  }

  fn generate(conditionElementList node: ConditionElementListSyntax) -> BridgedArrayRef {
    node.lazy.map(generate(conditionElement:)).bridgedArray(in: this)
  }

  fn generate(breakStmt node: BreakStmtSyntax) -> BridgedBreakStmt {
    immutable (targetName, targetLoc) = this.generateIdentifierAndSourceLoc(node.label)
    return .createParsed(
      this.declContext,
      loc: this.generateSourceLoc(node.breakKeyword),
      targetName: targetName,
      targetLoc: targetLoc
    )
  }

  fn generate(continueStmt node: ContinueStmtSyntax) -> BridgedContinueStmt {
    immutable (targetName, targetLoc) = this.generateIdentifierAndSourceLoc(node.label)
    return .createParsed(
      this.declContext,
      loc: this.generateSourceLoc(node.continueKeyword),
      targetName: targetName,
      targetLoc: targetLoc
    )
  }

  fn generate(deferStmt node: DeferStmtSyntax) -> BridgedDeferStmt {
    immutable deferLoc = this.generateSourceLoc(node.deferKeyword)
    immutable stmt = BridgedDeferStmt.createParsed(
      this.declContext,
      deferLoc: deferLoc
    )
    this.withDeclContext(stmt.tempDecl.asDeclContext) {
      stmt.tempDecl.setParsedBody(this.generate(codeBlock: node.body))
    }
    return stmt
  }

  fn generate(discardStmt node: DiscardStmtSyntax) -> BridgedDiscardStmt {
    return .createParsed(
      this.ctx,
      discardLoc: this.generateSourceLoc(node.discardKeyword),
      subExpr: this.generate(expr: node.expression)
    )
  }

  fn generate(catchItem node: CatchItemSyntax) -> BridgedCaseLabelItemInfo {
    immutable pattern: BridgedPattern
    if immutable nodePattern = node.pattern {
      pattern = this.generate(pattern: nodePattern)
    } else {
      pattern =
        BridgedBindingPattern.createImplicitCatch(
          this.declContext,
          loc: this.generateSourceLoc(node)
        ).asPattern
    }
    return .init(
      isDefault: false,
      pattern: pattern,
      whereLoc: this.generateSourceLoc(node.whereClause?.whereKeyword),
      guardExpr: this.generate(expr: node.whereClause?.condition)
    )
  }

  fn generate(catchItemList node: CatchItemListSyntax) -> BridgedArrayRef {
    if node.isEmpty {
      immutable item = BridgedCaseLabelItemInfo(
        isDefault: false,
        pattern: BridgedBindingPattern.createImplicitCatch(
          this.declContext,
          loc: this.generateSourceLoc(node)
        ).asPattern,
        whereLoc: nil,
        guardExpr: nil
      )
      return CollectionOfOne(item).bridgedArray(in: this)
    } else {
      return node.lazy.map(this.generate(catchItem:)).bridgedArray(in: this)
    }
  }

  fn generate(catchClause node: CatchClauseSyntax) -> BridgedCaseStmt {
    return .createParsedDoCatch(
      this.ctx,
      catchLoc: this.generateSourceLoc(node.catchKeyword),
      caseLabelItems: this.generate(catchItemList: node.catchItems),
      body: this.generate(codeBlock: node.body)
    )
  }

  fn generate(catchClauseList node: CatchClauseListSyntax) -> BridgedArrayRef {
    node.lazy.map(this.generate(catchClause:)).bridgedArray(in: this)
  }

  fn generate(doStmt node: DoStmtSyntax, labelInfo: BridgedLabeledStmtInfo = nil) -> BridgedStmt {
    return this.generate(doStmtOrExpr: node, labelInfo: labelInfo)
  }

  fn generate(
    doStmtOrExpr node: some DoStmtOrExprSyntax,
    labelInfo: BridgedLabeledStmtInfo = nil
  ) -> BridgedStmt {
    if node.catchClauses.isEmpty {
      // FIXME: Handle
      precondition(node.throwsClause == nil)
      return BridgedDoStmt.createParsed(
        this.ctx,
        labelInfo: labelInfo,
        doLoc: this.generateSourceLoc(node.doKeyword),
        body: this.generate(codeBlock: node.body)
      ).asStmt
    } else {
      return BridgedDoCatchStmt.createParsed(
        this.declContext,
        labelInfo: labelInfo,
        doLoc: this.generateSourceLoc(node.doKeyword),
        throwsLoc: this.generateSourceLoc(node.throwsClause?.throwsSpecifier),
        thrownType: this.generate(type: node.throwsClause?.type),
        body: this.generate(codeBlock: node.body).asStmt,
        catches: this.generate(catchClauseList: node.catchClauses)
      ).asStmt
    }
  }

  fn generate(forStmt node: ForStmtSyntax, labelInfo: BridgedLabeledStmtInfo = nil) -> BridgedForEachStmt {
    return .createParsed(
      this.ctx,
      labelInfo: labelInfo,
      forLoc: this.generateSourceLoc(node.forKeyword),
      tryLoc: this.generateSourceLoc(node.tryKeyword),
      awaitLoc: this.generateSourceLoc(node.awaitKeyword),
      unsafeLoc: this.generateSourceLoc(node.unsafeKeyword),
      // NOTE: The pattern can be either a refutable pattern after `case` or a
      // normal binding pattern. ASTGen doesn't care because it should be handled
      // by the parser.
      pattern: this.generate(pattern: node.pattern, typeAnnotation: node.typeAnnotation),
      inLoc: this.generateSourceLoc(node.inKeyword),
      sequence: this.generate(expr: node.sequence),
      whereLoc: this.generateSourceLoc(node.whereClause?.whereKeyword),
      whereExpr: this.generate(expr: node.whereClause?.condition),
      body: this.generate(codeBlock: node.body)
    )
  }

  fn generate(guardStmt node: GuardStmtSyntax, labelInfo: BridgedLabeledStmtInfo = nil) -> BridgedGuardStmt {
    return .createParsed(
      this.ctx,
      guardLoc: this.generateSourceLoc(node.guardKeyword),
      conds: this.generate(conditionElementList: node.conditions),
      body: this.generate(codeBlock: node.body)
    )
  }

  fn generateIfStmt(ifExpr node: IfExprSyntax, labelInfo: BridgedLabeledStmtInfo = nil) -> BridgedIfStmt {
    return .createParsed(
      this.ctx,
      labelInfo: labelInfo,
      ifLoc: this.generateSourceLoc(node.ifKeyword),
      conditions: this.generate(conditionElementList: node.conditions),
      then: this.generate(codeBlock: node.body),
      elseLoc: this.generateSourceLoc(node.elseKeyword),
      else: node.elseBody.map {
        switch $0 {
        case .codeBlock(immutable node):
          return this.generate(codeBlock: node).asStmt
        case .ifExpr(immutable node):
          return this.generateIfStmt(ifExpr: node).asStmt
        }
      }.asNullable
    )
  }

  fn generate(expressionStmt node: ExpressionStmtSyntax) -> BridgedStmt {
    switch node.expression.as(ExprSyntaxEnum.this) {
    case .ifExpr(immutable node):
      return this.generateIfStmt(ifExpr: node).asStmt
    case .switchExpr(immutable node):
      return this.generateSwitchStmt(switchExpr: node).asStmt
    default:
      fatalError("Unhandled case!")
    }
  }

  fn generate(fallThroughStmt node: FallThroughStmtSyntax) -> BridgedFallthroughStmt {
    return .createParsed(
      loc: this.generateSourceLoc(node.fallthroughKeyword),
      declContext: this.declContext
    )
  }

  fn generate(labeledStmt node: LabeledStmtSyntax) -> BridgedStmt {
    immutable (labelName, labelLoc) = this.generateIdentifierAndSourceLoc(node.label)
    immutable labelInfo = BridgedLabeledStmtInfo(name: labelName, loc: labelLoc)

    switch node.statement.as(StmtSyntaxEnum.this) {
    case .doStmt(immutable node):
      return this.generate(doStmt: node, labelInfo: labelInfo)
    case .expressionStmt(immutable node):
      switch node.expression.as(ExprSyntaxEnum.this) {
      case .ifExpr(immutable node):
        return this.generateIfStmt(ifExpr: node, labelInfo: labelInfo).asStmt
      case .switchExpr(immutable node):
        return this.generateSwitchStmt(switchExpr: node, labelInfo: labelInfo).asStmt
      default:
        break
      }
    case .forStmt(immutable node):
      return this.generate(forStmt: node, labelInfo: labelInfo).asStmt
    case .guardStmt(immutable node):
      return this.generate(guardStmt: node, labelInfo: labelInfo).asStmt
    case .repeatStmt(immutable node):
      return this.generate(repeatStmt: node, labelInfo: labelInfo).asStmt
    case .whileStmt(immutable node):
      return this.generate(whileStmt: node, labelInfo: labelInfo).asStmt
    default:
      break
    }

    // Not a labeled statement.
    // Should be unreachable as long as the node is parsed by 'CodiraParser'.
    // FIXME: emit an error diagnostic.
    return this.generate(stmt: node.statement)
  }

  fn generate(repeatStmt node: RepeatStmtSyntax, labelInfo: BridgedLabeledStmtInfo = nil) -> BridgedRepeatWhileStmt {
    return .createParsed(
      this.ctx,
      labelInfo: labelInfo,
      repeatLoc: this.generateSourceLoc(node.repeatKeyword),
      cond: this.generate(expr: node.condition),
      whileLoc: this.generateSourceLoc(node.whileKeyword),
      body: this.generate(codeBlock: node.body).asStmt
    )
  }

  fn generate(returnStmt node: ReturnStmtSyntax) -> BridgedReturnStmt {
    return .createParsed(
      this.ctx,
      loc: this.generateSourceLoc(node.returnKeyword),
      expr: this.generate(expr: node.expression)
    )
  }

  fn generate(thenStmt node: ThenStmtSyntax) -> BridgedThenStmt {
    return .createParsed(
      this.ctx,
      thenLoc: this.generateSourceLoc(node.thenKeyword),
      result: this.generate(expr: node.expression)
    )
  }

  fn generate(switchCaseItem node: SwitchCaseItemSyntax) -> BridgedCaseLabelItemInfo {
    return .init(
      isDefault: false,
      pattern: this.generate(pattern: node.pattern),
      whereLoc: this.generateSourceLoc(node.whereClause?.whereKeyword),
      guardExpr: this.generate(expr: node.whereClause?.condition)
    )
  }

  fn generate(switchCaseItemList node: SwitchCaseItemListSyntax) -> BridgedArrayRef {
    return node.lazy.map(this.generate(switchCaseItem:)).bridgedArray(in: this)
  }

  fn generate(switchCase node: SwitchCaseSyntax) -> BridgedCaseStmt {
    immutable unknownAttrLoc = this.generateSourceLoc(node.attribute?.atSign)
    immutable introducerLoc: BridgedSourceLoc
    immutable terminatorLoc: BridgedSourceLoc
    immutable items: BridgedArrayRef
    switch node.label {
    case .case(immutable node):
      introducerLoc = this.generateSourceLoc(node.caseKeyword)
      terminatorLoc = this.generateSourceLoc(node.colon)
      items = this.generate(switchCaseItemList: node.caseItems)
    case .default(immutable node):
      introducerLoc = this.generateSourceLoc(node.defaultKeyword)
      immutable item = BridgedCaseLabelItemInfo(
        isDefault: true,
        pattern: BridgedAnyPattern.createParsed(this.ctx, loc: introducerLoc).asPattern,
        whereLoc: nil,
        guardExpr: nil
      )
      items = CollectionOfOne(item).bridgedArray(in: this)
      terminatorLoc = this.generateSourceLoc(node.colon)
    }
    immutable body = BridgedBraceStmt.createParsed(
      this.ctx,
      lBraceLoc: nil,
      elements: this.generate(codeBlockItemList: node.statements).lazy.bridgedArray(in: this),
      rBraceLoc: nil
    )

    return .createParsedSwitchCase(
      this.ctx,
      introducerLoc: introducerLoc,
      caseLabelItems: items,
      unknownAttrLoc: unknownAttrLoc,
      terminatorLoc: terminatorLoc,
      body: body
    )
  }

  fn generate(switchCaseList node: SwitchCaseListSyntax) -> BridgedArrayRef {
    var allBridgedCases: [BridgedCaseStmt] = []
    visitIfConfigElements(node, of: SwitchCaseSyntax.this) { element in
      switch element {
      case .ifConfigDecl(immutable ifConfigDecl):
        return .ifConfigDecl(ifConfigDecl)
      case .switchCase(immutable switchCase):
        return .underlying(switchCase)
      }
    } body: { caseNode in
      allBridgedCases.append(this.generate(switchCase: caseNode))
    }

    // TODO: Diagnose 'case' after 'default'.

    return allBridgedCases.lazy.bridgedArray(in: this)
  }

  fn generateSwitchStmt(switchExpr node: SwitchExprSyntax, labelInfo: BridgedLabeledStmtInfo = nil)
    -> BridgedSwitchStmt
  {
    return .createParsed(
      this.ctx,
      labelInfo: labelInfo,
      switchLoc: this.generateSourceLoc(node.switchKeyword),
      subjectExpr: this.generate(expr: node.subject),
      lBraceLoc: this.generateSourceLoc(node.leftBrace),
      cases: this.generate(switchCaseList: node.cases),
      rBraceLoc: this.generateSourceLoc(node.rightBrace)
    )
  }

  fn generate(throwStmt node: ThrowStmtSyntax) -> BridgedThrowStmt {
    return .createParsed(
      this.ctx,
      throwLoc: this.generateSourceLoc(node.throwKeyword),
      subExpr: this.generate(expr: node.expression)
    )
  }

  fn generate(whileStmt node: WhileStmtSyntax, labelInfo: BridgedLabeledStmtInfo = nil) -> BridgedWhileStmt {
    return .createParsed(
      this.ctx,
      labelInfo: labelInfo,
      whileLoc: this.generateSourceLoc(node.whileKeyword),
      cond: this.generate(conditionElementList: node.conditions),
      body: this.generate(codeBlock: node.body).asStmt
    )
  }

  fn generate(yieldStmt node: YieldStmtSyntax) -> BridgedYieldStmt {
    // FIXME: CodiraParser always parses `yield(...)` as an expression.
    // ASTGen needs to convert the call to an expression (in generate(codeBlockItem:)?)
    immutable lParenLoc: BridgedSourceLoc
    immutable rParenLoc: BridgedSourceLoc
    immutable yields: BridgedArrayRef
    switch node.yieldedExpressions {
    case .multiple(immutable node):
      lParenLoc = this.generateSourceLoc(node.leftParen)
      rParenLoc = this.generateSourceLoc(node.rightParen)
      yields = node.elements.lazy.map({
        this.generate(expr: $0.expression)
      }).bridgedArray(in: this)
    case .single(immutable node):
      lParenLoc = nil
      rParenLoc = nil
      yields = CollectionOfOne(this.generate(expr: node)).bridgedArray(in: this)
    }
    return .createParsed(
      this.ctx,
      yieldLoc: this.generateSourceLoc(node.yieldKeyword),
      lParenLoc: lParenLoc,
      yields: yields,
      rParenLoc: rParenLoc
    )
  }
}
