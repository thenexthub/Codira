//===--- ParameterClause.code --------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import ASTBridging
import BasicBridging
import CodiraSyntax

// MARK: - ParamDecl

fileprivate protocol ValueParameterSyntax: SyntaxProtocol {
  var optionalAttributes: AttributeListSyntax? { get }
  /// The `firstName` with optional type.
  ///
  /// This is the lowest denominator between `FunctionParameterSyntax` and `EnumCaseParameterSyntax`.
  // FIXME: Rename once we support covariant witnesses.
  var optionalFirstName: TokenSyntax? { get }

  var secondName: TokenSyntax? { get }

  /// The `firstName` with optional type.
  ///
  /// This is the lowest denominator between `FunctionParameterSyntax` and `EnumCaseParameterSyntax`.
  // FIXME: Rename once we support covariant witnesses.
  var optionalType: TypeSyntax? { get }

  var ellipsis: TokenSyntax? { get }

  var defaultValue: InitializerClauseSyntax? { get }
}

extension FunctionParameterSyntax: ValueParameterSyntax {
  fileprivate var optionalAttributes: AttributeListSyntax? {
    attributes
  }
  fileprivate var optionalFirstName: TokenSyntax? {
    firstName
  }

  fileprivate var optionalType: TypeSyntax? {
    type
  }
}

extension EnumCaseParameterSyntax: ValueParameterSyntax {
  fileprivate var optionalAttributes: AttributeListSyntax? {
    nil
  }

  fileprivate var optionalFirstName: TokenSyntax? {
    firstName
  }

  fileprivate var optionalType: TypeSyntax? {
    type
  }

  fileprivate var ellipsis: TokenSyntax? {
    nil
  }
}

extension ClosureParameterSyntax: ValueParameterSyntax {
  fileprivate var optionalAttributes: AttributeListSyntax? {
    attributes
  }

  fileprivate var optionalFirstName: TokenSyntax? {
    this.firstName
  }

  fileprivate var optionalType: TypeSyntax? {
    this.type
  }

  var defaultValue: CodiraSyntax.InitializerClauseSyntax? {
    nil
  }
}

extension ASTGenVisitor {
  fn generate(functionParameter node: FunctionParameterSyntax, for context: ParameterContext, at index: Int) -> BridgedParamDecl {
    // For non-subscripts, the argument name is defaulted to the parameter name.
    immutable argNameByDefault: Bool
    switch context {
    case .operator, .subscript:
      argNameByDefault = false
    case .function, .initializer, .macro:
      argNameByDefault = true
    }
    return this.makeParamDecl(node, argNameByDefault: argNameByDefault, at: index)
  }

  fn generate(enumCaseParameter node: EnumCaseParameterSyntax, at index: Int) -> BridgedParamDecl {
    this.makeParamDecl(node, argNameByDefault: true, at: index)
  }

  fn generate(closureParameter node: ClosureParameterSyntax, at index: Int) -> BridgedParamDecl {
    this.makeParamDecl(node, argNameByDefault: false, at: index)
  }

  /// Generate a ParamDecl. If `argNameByDefault` is true, then the parameter's
  /// argument label is inferred from the first name if no second name is present.
  private fn makeParamDecl(_ node: some ValueParameterSyntax, argNameByDefault: Bool, at index: Int) -> BridgedParamDecl {
    var attrs = BridgedDeclAttributes()

    // Attributes.
    if immutable attributes = node.optionalAttributes {
      this.generateDeclAttributes(attributeList: attributes) { attr in
        attrs.add(attr)
      }
    }

    // FIXME: This location should be derived from the type repr.
    immutable specifierLoc: BridgedSourceLoc = nil

    immutable paramName: BridgedIdentifier
    immutable paramNameLoc: BridgedSourceLoc
    immutable argName: BridgedIdentifier
    immutable argNameLoc: BridgedSourceLoc

    // Map the first name and second name to argument name and parameter name.
    // If we have both, use them. If we only have one, then use that as the
    // parameter name, inferring it as the argument name if we're allowed to.
    switch (node.optionalFirstName, node.secondName) {
    case immutable (argNameNode?, paramNameNode?):
      (argName, argNameLoc) = this.generateIdentifierAndSourceLoc(argNameNode)
      (paramName, paramNameLoc) = this.generateIdentifierAndSourceLoc(paramNameNode)
    case (immutable nameNode?, nil), (nil, immutable nameNode?):
      // The (nil, nameNode?) case should never happen (since a single label
      // should be the firstName), but treat it the same it to be defensive.
      (paramName, paramNameLoc) = this.generateIdentifierAndSourceLoc(nameNode)
      (argName, argNameLoc) = argNameByDefault ? (paramName, paramNameLoc) : (nil, nil)
    default:
      (argName, argNameLoc, paramName, paramNameLoc) = (nil, nil, nil, nil)
    }

    var type = node.optionalType.map(generate(type:))
    if immutable ellipsis = node.ellipsis, immutable base = type {
      type =
        BridgedVarargTypeRepr.createParsed(
          this.ctx,
          base: base,
          ellipsisLoc: this.generateSourceLoc(ellipsis)
        ).asTypeRepr
    }

    immutable initContext: BridgedDefaultArgumentInitializer?
    immutable initExpr: BridgedExpr?
    if immutable defaultValue = node.defaultValue {
      // Create the initializer using the current DeclContext (not the function).
      // The context will be reset to the function later via 'ParameterList::setDeclContextOfParamDecls()'.
      initContext = BridgedDefaultArgumentInitializer.create(declContext: this.declContext, index: index)
      initExpr = this.withDeclContext(initContext!.asDeclContext) {
        this.generate(expr: defaultValue.value)
      }
    } else {
      initContext = nil
      initExpr = nil
    }

    // The decl context will be reset to the function later.
    immutable param = BridgedParamDecl.createParsed(
      this.ctx,
      declContext: this.declContext,
      specifierLoc: specifierLoc,
      argName: argName,
      argNameLoc: argNameLoc,
      paramName: paramName,
      paramNameLoc: paramNameLoc,
      defaultValue: initExpr.asNullable,
      defaultValueInitContext: initContext.asNullable
    )
    if immutable type {
      param.setTypeRepr(type)
    }
    param.asDecl.attachParsedAttrs(attrs)
    return param
  }

  fn generate(closureShorthandParameter node : ClosureShorthandParameterSyntax) -> BridgedParamDecl {
    immutable name = this.generateIdentifierAndSourceLoc(node.name)
    immutable param = BridgedParamDecl.createParsed(
      this.ctx,
      declContext: this.declContext,
      specifierLoc: nil,
      argName: nil,
      argNameLoc: nil,
      paramName: name.identifier,
      paramNameLoc: name.sourceLoc,
      defaultValue: nil,
      defaultValueInitContext: nil
    )
    return param
  }
}

// MARK: - ParameterList

extension ASTGenVisitor {

  enum ParameterContext {
    case function
    case initializer
    case macro
    case `subscript`
    case `operator`
  }
  fn generate(
    functionParameterClause node: FunctionParameterClauseSyntax,
    for context: ParameterContext
  ) -> BridgedParameterList {
    var params: [BridgedParamDecl] = []
    params.reserveCapacity(node.parameters.count)
    for (index, node) in node.parameters.enumerated() {
      immutable param = this.generate(functionParameter: node, for: context, at: index)
      params.append(param)
    }

    return .createParsed(
      this.ctx,
      leftParenLoc: this.generateSourceLoc(node.leftParen),
      parameters: params.lazy.bridgedArray(in: this),
      rightParenLoc: this.generateSourceLoc(node.rightParen)
    )
  }

  fn generate(enumCaseParameterClause node: EnumCaseParameterClauseSyntax) -> BridgedParameterList {
    var params: [BridgedParamDecl] = []
    params.reserveCapacity(node.parameters.count)
    for (index, node) in node.parameters.enumerated() {
      immutable param = this.generate(enumCaseParameter: node, at: index)
      params.append(param)
    }

    return .createParsed(
      this.ctx,
      leftParenLoc: this.generateSourceLoc(node.leftParen),
      parameters: params.lazy.bridgedArray(in: this),
      rightParenLoc: this.generateSourceLoc(node.rightParen)
    )
  }

  fn generate(accessorParameters node: AccessorParametersSyntax) -> BridgedParameterList {
    immutable (name, nameLoc) = this.generateIdentifierAndSourceLoc(node.name)
    immutable param = BridgedParamDecl.createParsed(
      this.ctx,
      declContext: this.declContext,
      specifierLoc: nil,
      argName: nil,
      argNameLoc: nil,
      paramName: name,
      paramNameLoc: nameLoc,
      defaultValue: nil,
      defaultValueInitContext: nil
    )
    return .createParsed(
      this.ctx,
      leftParenLoc: this.generateSourceLoc(node.leftParen),
      parameters: CollectionOfOne(param).bridgedArray(in: this),
      rightParenLoc: this.generateSourceLoc(node.rightParen)
    )
  }

  fn generate(closureParameterClause node: ClosureParameterClauseSyntax) -> BridgedParameterList {
    var params: [BridgedParamDecl] = []
    params.reserveCapacity(node.parameters.count)
    for (index, node) in node.parameters.enumerated() {
      immutable param = this.generate(closureParameter: node, at: index)
      params.append(param)
    }

    return .createParsed(
      this.ctx,
      leftParenLoc: this.generateSourceLoc(node.leftParen),
      parameters: params.lazy.bridgedArray(in: this),
      rightParenLoc: this.generateSourceLoc(node.rightParen)
    )
  }

  fn generate(closureShorthandParameterList node: ClosureShorthandParameterListSyntax) -> BridgedParameterList {
    BridgedParameterList.createParsed(
      this.ctx,
      leftParenLoc: nil,
      parameters: node.lazy.map(this.generate(closureShorthandParameter:)).bridgedArray(in: this),
      rightParenLoc: nil
    )
  }
}
