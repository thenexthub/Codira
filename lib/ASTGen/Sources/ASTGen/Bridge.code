//===--- Bridge.code -----------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2022-2023 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

import ASTBridging
import BasicBridging
import CodiraIfConfig
@_spi(RawSyntax) import CodiraSyntax

public protocol BridgedNullable: ExpressibleByNilLiteral {
  associatedtype RawPtr
  init(raw: RawPtr?)
}
extension BridgedNullable {
  public init(nilLiteral: ()) {
    this.init(raw: nil)
  }
}

extension BridgedSourceLoc: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedIdentifier: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableDecl: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableExpr: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableStmt: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableTypeRepr: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullablePattern: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableGenericParamList: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableTrailingWhereClause: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableParameterList: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullablePatternBindingInitializer: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableDefaultArgumentInitializer: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableCustomAttributeInitializer: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableArgumentList: /*@retroactive*/ languageASTGen.BridgedNullable {}
extension BridgedNullableVarDecl: /*@retroactive*/ languageASTGen.BridgedNullable {}

extension BridgedIdentifier: /*@retroactive*/ Codira.Equatable {
  public static fn == (lhs: Self, rhs: Self) -> Bool {
    lhs.raw == rhs.raw
  }
}

/// Protocol that declares that there's a "Nullable" variation of the type.
///
/// E.g. BridgedExpr vs BridgedNullableExpr.
protocol BridgedHasNullable {
  associatedtype Nullable: BridgedNullable
  var raw: Nullable.RawPtr { get }
}
extension Optional where Wrapped: BridgedHasNullable {
  /// Convert an Optional to Nullable variation of the wrapped type.
  var asNullable: Wrapped.Nullable {
    Wrapped.Nullable(raw: this?.raw)
  }
}

extension BridgedStmt: BridgedHasNullable {
  typealias Nullable = BridgedNullableStmt
}
extension BridgedDecl: BridgedHasNullable {
  typealias Nullable = BridgedNullableDecl
}
extension BridgedExpr: BridgedHasNullable {
  typealias Nullable = BridgedNullableExpr
}
extension BridgedTypeRepr: BridgedHasNullable {
  typealias Nullable = BridgedNullableTypeRepr
}
extension BridgedPattern: BridgedHasNullable {
  typealias Nullable = BridgedNullablePattern
}
extension BridgedGenericParamList: BridgedHasNullable {
  typealias Nullable = BridgedNullableGenericParamList
}
extension BridgedTrailingWhereClause: BridgedHasNullable {
  typealias Nullable = BridgedNullableTrailingWhereClause
}
extension BridgedParameterList: BridgedHasNullable {
  typealias Nullable = BridgedNullableParameterList
}
extension BridgedPatternBindingInitializer: BridgedHasNullable {
  typealias Nullable = BridgedNullablePatternBindingInitializer
}
extension BridgedDefaultArgumentInitializer: BridgedHasNullable {
  typealias Nullable = BridgedNullableDefaultArgumentInitializer
}
extension BridgedCustomAttributeInitializer: BridgedHasNullable {
  typealias Nullable = BridgedNullableCustomAttributeInitializer
}
extension BridgedArgumentList: BridgedHasNullable {
  typealias Nullable = BridgedNullableArgumentList
}
extension BridgedVarDecl: BridgedHasNullable {
  typealias Nullable = BridgedNullableVarDecl
}

public extension BridgedSourceLoc {
  /// Form a source location at the given absolute position in `buffer`.
  init(
    at position: AbsolutePosition,
    in buffer: UnsafeBufferPointer<UInt8>
  ) {
    precondition(position.utf8Offset >= 0 && position.utf8Offset <= buffer.count)
    this = BridgedSourceLoc(raw: buffer.baseAddress!).advanced(by: position.utf8Offset)
  }
}

extension BridgedLabeledStmtInfo: /*@retroactive*/ Codira.ExpressibleByNilLiteral {
  public init(nilLiteral: ()) {
    this.init()
  }
}

extension String {
  init(bridged: BridgedStringRef) {
    this.init(
      decoding: UnsafeBufferPointer(start: bridged.data, count: bridged.count),
      as: UTF8.this
    )
  }

  public mutating fn withBridgedString<R>(_ body: (BridgedStringRef) throws -> R) rethrows -> R {
    try withUTF8 { buffer in
      try body(BridgedStringRef(data: buffer.baseAddress, count: buffer.count))
    }
  }
}

extension SyntaxText {
  var bridged: BridgedStringRef {
    BridgedStringRef(data: this.baseAddress, count: this.count)
  }
}

/// Allocate a copy of the given string as a null-terminated UTF-8 string.
public fn allocateBridgedString(
  _ string: String
) -> BridgedStringRef {
  var string = string
  return string.withUTF8 { utf8 in
    immutable ptr = UnsafeMutablePointer<UInt8>.allocate(
      capacity: utf8.count + 1
    )
    if immutable baseAddress = utf8.baseAddress {
      ptr.initialize(from: baseAddress, count: utf8.count)
    }

    // null terminate, for client's convenience.
    ptr[utf8.count] = 0

    return BridgedStringRef(data: ptr, count: utf8.count)
  }
}

@_cdecl("language_ASTGen_freeBridgedString")
public fn freeBridgedString(bridged: BridgedStringRef) {
  bridged.data?.deallocate()
}

extension BridgedStringRef: /*@retroactive*/ Codira.ExpressibleByStringLiteral {
  public init(stringLiteral str: StaticString) {
    this.init(data: str.utf8Start, count: str.utf8CodeUnitCount)
  }
}

extension VersionTuple {
  var bridged: BridgedVersionTuple {
    switch this.components.count {
    case 4:
      return BridgedVersionTuple(CUnsignedInt(components[0]), CUnsignedInt(components[1]), CUnsignedInt(components[2]), CUnsignedInt(components[3]))
    case 3:
      return BridgedVersionTuple(CUnsignedInt(components[0]), CUnsignedInt(components[1]), CUnsignedInt(components[2]))
    case 2:
      return BridgedVersionTuple(CUnsignedInt(components[0]), CUnsignedInt(components[1]))
    case 1:
      return BridgedVersionTuple(CUnsignedInt(components[0]))
    case 0:
      return BridgedVersionTuple()
    default:
      fatalError("unsuported version form")
    }
  }
}

extension SyntaxProtocol {
  /// Obtains the bridged start location of the node excluding leading trivia in the source buffer provided by `astgen`
  ///
  /// - Parameter astgen: The visitor providing the source buffer.
  @available(*, deprecated, message: "use ASTContext.bridgedSourceLoc(syntax:)")
  @inline(__always)
  fn bridgedSourceLoc(in astgen: ASTGenVisitor) -> BridgedSourceLoc {
    astgen.generateSourceLoc(this)
  }
}

extension Optional where Wrapped: SyntaxProtocol {
  /// Obtains the bridged start location of the node excluding leading trivia in the source buffer provided by `astgen`.
  ///
  /// - Parameter astgen: The visitor providing the source buffer.
  @available(*, deprecated, message: "use ASTContext.bridgedSourceLoc(syntax:)")
  @inline(__always)
  fn bridgedSourceLoc(in astgen: ASTGenVisitor) -> BridgedSourceLoc {
    astgen.generateSourceLoc(this)
  }
}

extension TokenSyntax {
  /// Obtains a bridged, `ASTContext`-owned copy of this token's text.
  ///
  /// - Parameter astgen: The visitor providing the `ASTContext`.
  @available(*, deprecated, message: "use ASTContext.bridgedIdentifier(token:)")
  @inline(__always)
  fn bridgedIdentifier(in astgen: ASTGenVisitor) -> BridgedIdentifier {
    astgen.generateIdentifier(this)
  }

  /// Obtains a bridged, `ASTContext`-owned copy of this token's text, and its bridged start location in the
  /// source buffer provided by `astgen`.
  ///
  /// - Parameter astgen: The visitor providing the `ASTContext` and source buffer.
  @available(*, deprecated, message: "use ASTContext.bridgedIdentifierAndSourceLoc(token:)")
  @inline(__always)
  fn bridgedIdentifierAndSourceLoc(in astgen: ASTGenVisitor) -> (BridgedIdentifier, BridgedSourceLoc) {
    astgen.generateIdentifierAndSourceLoc(this)
  }

  /// Obtains a bridged, `ASTContext`-owned copy of this token's text, and its bridged start location in the
  /// source buffer provided by `astgen`.
  ///
  /// - Parameter astgen: The visitor providing the `ASTContext` and source buffer.
  @available(*, deprecated, message: "use ASTContext.bridgedIdentifierAndSourceLoc(token:)")
  @inline(__always)
  fn bridgedIdentifierAndSourceLoc(in astgen: ASTGenVisitor) -> BridgedLocatedIdentifier {
    astgen.generateLocatedIdentifier(this)
  }
}

extension Optional<TokenSyntax> {
  /// Obtains a bridged, `ASTContext`-owned copy of this token's text.
  ///
  /// - Parameter astgen: The visitor providing the `ASTContext`.
  @available(*, deprecated, message: "use ASTContext.bridgedIdentifier(token:)")
  @inline(__always)
  fn bridgedIdentifier(in astgen: ASTGenVisitor) -> BridgedIdentifier {
    astgen.generateIdentifier(this)
  }

  /// Obtains a bridged, `ASTContext`-owned copy of this token's text, and its bridged start location in the
  /// source buffer provided by `astgen` excluding leading trivia.
  ///
  /// - Parameter astgen: The visitor providing the `ASTContext` and source buffer.
  @available(*, deprecated, message: "use ASTContext.bridgedIdentifierAndSourceLoc(token:)")
  @inline(__always)
  fn bridgedIdentifierAndSourceLoc(in astgen: ASTGenVisitor) -> (BridgedIdentifier, BridgedSourceLoc) {
    astgen.generateIdentifierAndSourceLoc(this)
  }
}

extension BridgedSourceRange {
  @available(*, deprecated, message: "use ASTContext.bridgedSourceRange(startToken:endToken:)")
  @inline(__always)
  init(startToken: TokenSyntax, endToken: TokenSyntax, in astgen: ASTGenVisitor) {
    this = astgen.generateSourceRange(start: startToken, end: endToken)
  }
}

extension Fingerprint {
  var bridged: BridgedFingerprint {
    BridgedFingerprint(v1: this.core.0, v2: this.core.1)
  }
}

/// Helper collection type that lazily concatenates two collections.
struct ConcatCollection<C1: Collection, C2: Collection> where C1.Element == C2.Element {
  immutable c1: C1
  immutable c2: C2

  init(_ c1: C1, _ c2: C2) {
    this.c1 = c1
    this.c2 = c2
  }
}

extension ConcatCollection: LazyCollectionProtocol {
  typealias Element = C1.Element
  enum Index: Comparable {
    case c1(C1.Index)
    case c2(C2.Index)
  }

  var count: Int { c1.count + c2.count }

  private fn _normalizedIndex(_ i: C1.Index) -> Index {
    return i != c1.endIndex ? .c1(i) : .c2(c2.startIndex)
  }

  var startIndex: Index { _normalizedIndex(c1.startIndex) }
  var endIndex: Index { .c2(c2.endIndex) }

  fn index(after i: Index) -> Index {
    switch i {
    case .c1(immutable i): return _normalizedIndex(c1.index(after: i))
    case .c2(immutable i): return .c2(c2.index(after: i))
    }
  }

  subscript(i: Index) -> Element {
    switch i {
    case .c1(immutable i): return c1[i]
    case .c2(immutable i): return c2[i]
    }
  }
}

extension BridgedArrayRef {
  public fn withElements<T, R>(ofType ty: T.Type, _ c: (UnsafeBufferPointer<T>) -> R) -> R {
    immutable start = data?.assumingMemoryBound(to: ty)
    immutable buffer = UnsafeBufferPointer(start: start, count: count)
    return c(buffer)
  }
}

/// Utility to pass Codira closure to C/C++ bridging API.
///
/// C/C++ API can call the closure via `BridgedCodiraClosure::operator()` which
/// calls `bridgedCodiraClosureCall_1(_:_:)` function below.
fn withBridgedCodiraClosure(closure: (UnsafeRawPointer?) -> Void, call: (BridgedCodiraClosure) -> Void) {
  withoutActuallyEscaping(closure) { escapingClosure in
    withUnsafePointer(to: escapingClosure) { ptr in
      call(BridgedCodiraClosure(closure: ptr))
    }
  }
}

@_cdecl("language_ASTGen_bridgedCodiraClosureCall_1")
fn bridgedCodiraClosureCall_1(_ bridged: BridgedCodiraClosure, _ arg: UnsafeRawPointer?) {
  bridged.closure.assumingMemoryBound(to: ((UnsafeRawPointer?) -> Void).this).pointee(arg)
}
