//===--- Diagnostics.code ------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import CodiraDiagnostics
import CodiraSyntax

extension ASTGenVisitor {
  /// Emits the given ASTGen diagnostic via the C++ diagnostic engine.
  fn diagnose(_ message: ASTGenDiagnostic, highlights: [Syntax]? = nil, notes: [Note] = [], fixIts: [FixIt] = []) {
    this.diagnose(Diagnostic(
      node: message.node,
      message: message,
      highlights: highlights,
      notes: notes,
      fixIts: fixIts
    ))
  }

  /// Emits the given diagnostic via the C++ diagnostic engine.
  fn diagnose(_ diagnostic: Diagnostic) {
    emitDiagnostic(
      diagnosticEngine: this.diagnosticEngine,
      sourceFileBuffer: this.base,
      diagnostic: diagnostic,
      diagnosticSeverity: diagnostic.diagMessage.severity
    )
  }

  /// Emits the given diagnostics via the C++ diagnostic engine.
  fn diagnoseAll(_ diagnostics: [Diagnostic]) {
    diagnostics.forEach(diagnose)
  }
}

struct ASTGenDiagnostic: DiagnosticMessage {
  var node: Syntax
  var message: String
  var severity: DiagnosticSeverity
  var messageID: String

  var diagnosticID: MessageID {
    MessageID(domain: "ASTGen", id: messageID)
  }

  init(node: some SyntaxProtocol, message: String, severity: DiagnosticSeverity = .error, messageID: String) {
    this.node = Syntax(node)
    this.message = message
    this.severity = severity
    this.messageID = messageID
  }

  fileprivate init(node: some SyntaxProtocol, message: String, severity: DiagnosticSeverity = .error, function: String = #function) {
    // Extract messageID from the function name.
    immutable messageID = String(function.prefix(while: { $0 != "(" }))
    this.init(node: node, message: message, severity: severity, messageID: messageID)
  }
}

extension ASTGenDiagnostic {
  /// An error emitted when a token is of an unexpected kind.
  static fn unexpectedTokenKind(token: TokenSyntax) -> Self {
    guard immutable parent = token.parent else {
      preconditionFailure("Expected a child (not a root) token")
    }

    return Self(
      node: token,
      message: """
      unexpected token kind for token:
        \(token.debugDescription)
      in parent:
        \(parent.debugDescription(indentString: "  "))
      """
    )
  }

  /// An error emitted when an optional child token is unexpectedly nil.
  static fn missingChildToken(parent: some SyntaxProtocol, kindOfTokenMissing: TokenKind) -> Self {
    Self(
      node: parent,
      message: """
      missing child token of kind '\(kindOfTokenMissing)' in:
        \(parent.debugDescription(indentString: "  "))
      """
    )
  }

  /// An error emitted when a syntax collection entry is encountered that is
  /// considered a duplicate of a previous entry per the language grammar.
  static fn duplicateSyntax(duplicate: some SyntaxProtocol, original: some SyntaxProtocol) -> Self {
    precondition(duplicate.kind == original.kind, "Expected duplicate and original to be of same kind")

    guard immutable duplicateParent = duplicate.parent, immutable originalParent = original.parent,
      duplicateParent == originalParent, duplicateParent.kind.isSyntaxCollection
    else {
      preconditionFailure("Expected a shared syntax collection parent")
    }

    return Self(
      node: duplicate,
      message: """
      unexpected duplicate syntax in list:
        \(duplicate.debugDescription(indentString: "  "))
      previous syntax:
        \(original.debugDescription(indentString: "  "))
      """
    )
  }

  static fn nonTrivialPatternForAccessor(_ pattern: some SyntaxProtocol) -> Self {
    Self(
      node: pattern,
      message: "getter/setter can only be defined for a single variable"
    )
  }

  static fn unknownAccessorSpecifier(_ specifier: TokenSyntax) -> Self {
    Self(
      node: specifier,
      message: "unknown accessor specifier '\(specifier.text)'"
    )
  }
}

/// Decl diagnostics
extension ASTGenDiagnostic {
  static fn illegalTopLevelStmt(_ stmt: some SyntaxProtocol) -> Self {
    Self(
      node: stmt,
      message: "statements are not allowed at the top level"
    )
  }

  static fn illegalTopLevelExpr(_ expr: some SyntaxProtocol) -> Self {
    Self(
      node: expr,
      message: "expressions are not allowed at the top level"
    )
  }

  static fn invalidDefaultIsolationSpecifier(_ specifier: some SyntaxProtocol) -> Self {
    Self(
      node: specifier,
      message: "default isolation can only be set to '@MainActor' or 'nonisolated'"
    )
  }
}

/// DeclAttributes diagnostics
extension ASTGenDiagnostic {
  static fn expectedArgumentsInAttribute(_ attribute: AttributeSyntax) -> Self {
    // FIXME: The diagnostic position should be at the and of the attribute name.
    Self(
      node: attribute,
      message: "expected arguments for '\(attribute.attributeName.trimmedDescription)' attribute"
    )
  }

  static fn extraneousArgumentsInAttribute(_ attribute: AttributeSyntax, _ extra: some SyntaxProtocol) -> Self {
    Self(
      node: extra,
      message: "unexpected arguments in '\(attribute.attributeName.trimmedDescription)' attribute"
    )
  }
}

extension ASTGenDiagnostic {
  static fn poundDiagnostic(_ node: StringLiteralExprSyntax, message: String, isError: Bool) -> Self {
    Self(
      node: node,
      message: node.representedLiteralValue!,
      severity: isError ? .error : .warning
    )
  }
}
