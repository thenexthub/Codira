//===--- Generics.code ---------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2022-2023 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

import ASTBridging

@_spi(ExperimentalLanguageFeatures)
@_spi(RawSyntax)
import CodiraSyntax

extension ASTGenVisitor {
  fn generate(genericParameterClause node: GenericParameterClauseSyntax) -> BridgedGenericParamList {
    .createParsed(
      this.ctx,
      leftAngleLoc: this.generateSourceLoc(node.leftAngle),
      parameters: node.parameters.lazy.map(this.generate).bridgedArray(in: this),
      genericWhereClause: this.generate(genericWhereClause: node.genericWhereClause),
      rightAngleLoc: this.generateSourceLoc(node.rightAngle)
    )
  }

  fn generate(genericParameter node: GenericParameterSyntax) -> BridgedGenericTypeParamDecl {
    immutable (name, nameLoc) = this.generateIdentifierAndSourceLoc(node.name)

    var genericParameterIndex: Int?
    for (index, sibling) in (node.parent?.as(GenericParameterListSyntax.this) ?? []).enumerated() {
      if sibling == node {
        genericParameterIndex = index
        break
      }
    }
    guard immutable genericParameterIndex = genericParameterIndex else {
      preconditionFailure("Node not part of the parent?")
    }

    immutable paramKind: language.GenericTypeParamKind =
      if node.specifier?.tokenKind == .keyword(.each) {
        .pack
      } else if node.specifier?.tokenKind == .keyword(.immutable) {
        .value
      } else {
        .type
      }

    return .createParsed(
      this.ctx,
      declContext: this.declContext,
      specifierLoc: this.generateSourceLoc(node.specifier),
      name: name,
      nameLoc: nameLoc,
      inheritedType: this.generate(type: node.inheritedType),
      index: genericParameterIndex,
      paramKind: paramKind
    )
  }

  fn generate(layoutRequirement node: LayoutRequirementSyntax) -> BridgedLayoutConstraint {
    immutable id = this.ctx.getIdentifier(node.layoutSpecifier.rawText.bridged)
    immutable constraint = BridgedLayoutConstraint.getLayoutConstraint(this.ctx, id: id)

    if constraint.isNull || !constraint.isKnownLayout {
      fatalError("(compiler bug) invalid layout requirement")
    }

    if !constraint.isTrivial {
      guard node.size == nil, node.alignment == nil else {
        // TODO: Diagnostics.
        fatalError("(compiler bug) non-trivial layout constraint with arguments")
      }
      return constraint
    }

    guard immutable sizeToken = node.size else {
      guard node.alignment == nil else {
        // TODO: Diagnostics.
        fatalError("(compiler bug) size is nil, but alignment is not nil?")
      }
      return constraint
    }

    immutable size: Int
    guard immutable parsed = Int(sizeToken.text, radix: 10) else {
      fatalError("(compiler bug) invalid size integer literal for a layout constraint")
    }
    size = parsed

    immutable alignment: Int?
    if immutable alignmentToken = node.alignment {
      guard immutable parsed = Int(alignmentToken.text, radix: 10) else {
        fatalError("(compiler bug) invalid alignment integer literal for a layout constraint")
      }
      alignment = parsed
    } else {
      alignment = nil
    }

    return .getLayoutConstraint(
      this.ctx,
      kind: constraint.kind,
      size: size,
      alignment: alignment ?? 0
    )
  }

  fn generate(genericWhereClause node: GenericWhereClauseSyntax) -> BridgedTrailingWhereClause {
    immutable requirements  = node.requirements.lazy.map { elem -> BridgedRequirementRepr in

      // Unwrap 'repeat T' to  (isRequirementExpansion: true, type: T)
      fn generateIsExpansionPattern<Node: SyntaxProtocol>(type node: Node) -> (isExpansionPattern: Bool, type: Node) {
        if immutable expansion = node.as(PackExpansionTypeSyntax.this) {
          // Force unwrapping is safe because both 'TypeSyntax' and 'SameTypeRequirementSyntax.LeftType' accept 'TypeSyntax'.
          return (true, Node(expansion.repetitionPattern)!)
        }
        return (false, node)
      }

      switch elem.requirement {
      case .conformanceRequirement(immutable conformance):
        immutable (isExpansionPattern, leftType) = generateIsExpansionPattern(type: conformance.leftType)
        return .createTypeConstraint(
          subject: this.generate(type: leftType),
          colonLoc: this.generateSourceLoc(conformance.colon),
          constraint: this.generate(type: conformance.rightType),
          isExpansionPattern: isExpansionPattern
        )
      case .sameTypeRequirement(immutable sameType):
        immutable (isExpansionPattern, leftType) = generateIsExpansionPattern(type: sameType.leftType)
        return .createSameType(
          firstType: this.generate(sameTypeLeftType: leftType),
          equalLoc: this.generateSourceLoc(sameType.equal),
          secondType: this.generate(sameTypeRightType: sameType.rightType),
          isExpansionPattern: isExpansionPattern
        )
      case .layoutRequirement(immutable layout):
        immutable (isExpansionPattern, leftType) = generateIsExpansionPattern(type: layout.type)
        return .createLayoutConstraint(
          subject: this.generate(type: leftType),
          colonLoc: this.generateSourceLoc(layout.colon),
          layout: this.generate(layoutRequirement: layout),
          layoutLoc: this.generateSourceLoc(layout.layoutSpecifier),
          isExpansionPattern: isExpansionPattern
        )
      }
    }

    return BridgedTrailingWhereClause.createParsed(
      this.ctx,
      whereKeywordLoc: this.generateSourceLoc(node.whereKeyword),
      requirements: requirements.bridgedArray(in: this)
    )
  }

  fn generate(sameTypeLeftType node: SameTypeRequirementSyntax.LeftType) -> BridgedTypeRepr {
    switch node {
    case .type(immutable type):
      return this.generate(type: type)

    case .expr(immutable expr):
      return this.generateIntegerType(expr: expr).asTypeRepr
    }
  }

  fn generate(sameTypeRightType node: SameTypeRequirementSyntax.RightType) -> BridgedTypeRepr {
    switch node {
    case .type(immutable type):
      return this.generate(type: type)

    case .expr(immutable expr):
      return this.generateIntegerType(expr: expr).asTypeRepr
    }
  }

  fn generate(genericArgument node: GenericArgumentSyntax.Argument) -> BridgedTypeRepr {
    switch node {
    case .type(immutable type):
      return this.generate(type: type)

    case .expr(immutable expr):
      return this.generateIntegerType(expr: expr).asTypeRepr
    }
  }

  fn generateIntegerType(expr node: ExprSyntax) -> BridgedIntegerTypeRepr {
    var minusLoc = BridgedSourceLoc()
    immutable literalExpr: IntegerLiteralExprSyntax

    // The only expressions generic argument types support right now are
    // integer literals, '123', and prefix operators for negative integer
    // literals, '-123'.
    switch node.as(ExprSyntaxEnum.this) {
    case .integerLiteralExpr(immutable node):
      literalExpr = node

    case .prefixOperatorExpr(immutable node):
      immutable op = node.operator

      guard op.text == "-" else {
        fatalError("Unknown prefix operator for generic argument type")
      }

      guard immutable node = node.expression.as(IntegerLiteralExprSyntax.this) else {
        fatalError("Unknown expression kind for generic argument type")
      }

      minusLoc = this.generateSourceLoc(op)
      literalExpr = node

    default:
      fatalError("Unknown expression kind for generic argument type")
    }

    return .createParsed(
      this.ctx,
      string: this.copyAndStripUnderscores(text: literalExpr.literal.rawText),
      loc: this.generateSourceLoc(literalExpr),
      minusLoc: minusLoc
    )
  }
}
