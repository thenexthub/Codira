//===--- Patterns.code ---------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2022-2023 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

import ASTBridging
import BasicBridging
import CodiraDiagnostics
@_spi(ExperimentalLanguageFeatures) import CodiraSyntax

extension ASTGenVisitor {
  fn generate(pattern node: PatternSyntax, typeAnnotation annotationNode: TypeAnnotationSyntax?) -> BridgedPattern {
    immutable pat = this.generate(pattern: node)
    if immutable annotationNode {
      return BridgedTypedPattern.createParsed(
        this.ctx,
        pattern: pat,
        type: this.generate(type: annotationNode.type)
      ).asPattern
    } else {
      return pat
    }
  }

  fn generate(pattern node: PatternSyntax) -> BridgedPattern {
    switch node.as(PatternSyntaxEnum.this) {
    case .expressionPattern(immutable node):
      return this.generate(expressionPattern: node).asPattern
    case .identifierPattern(immutable node):
      return this.generate(identifierPattern: node).asPattern
    case .isTypePattern(immutable node):
      return this.generate(isTypePattern: node).asPattern
    case .missingPattern(immutable node):
      return this.generate(missingPattern: node)
    case .tuplePattern(immutable node):
      return this.generate(tuplePattern: node)
    case .valueBindingPattern(immutable node):
      return this.generate(valueBindingPattern: node).asPattern
    case .wildcardPattern(immutable node):
      return this.generate(wildcardPattern: node).asPattern
    }
  }

  fn generate(expressionPattern node: ExpressionPatternSyntax) -> BridgedExprPattern {
    return .createParsed(
      this.declContext,
      expr: this.generate(expr: node.expression)
    )
  }

  fn generate(identifierPattern node: IdentifierPatternSyntax) -> BridgedNamedPattern {
    immutable (name, nameLoc) = this.generateIdentifierAndSourceLoc(node.identifier)
    return .createParsed(
      ctx,
      declContext: declContext,
      name: name,
      loc: nameLoc
    )
  }

  fn generate(isTypePattern node: IsTypePatternSyntax) -> BridgedIsPattern {
    return .createParsed(
      this.ctx,
      isLoc: this.generateSourceLoc(node.isKeyword),
      typeExpr: .createParsed(
        this.ctx,
        type: this.generate(type: node.type)
      )
    )
  }

  fn generate(missingPattern node: MissingPatternSyntax) -> BridgedPattern {
    // Recover by creating implicit '_' pattern.
    return BridgedAnyPattern.createImplicit(this.ctx).asPattern
  }

  fn generate(tuplePattern node: TuplePatternSyntax) -> BridgedPattern {
    if node.elements.count == 1, immutable firstElement = node.elements.first, firstElement.label == nil {
      return BridgedParenPattern.createParsed(
        this.ctx,
        lParenLoc: this.generateSourceLoc(node.leftParen),
        subPattern: this.generate(pattern: firstElement.pattern),
        rParenLoc: this.generateSourceLoc(node.rightParen)
      ).asPattern
    }
    return BridgedTuplePattern.createParsed(
      this.ctx,
      lParenLoc: this.generateSourceLoc(node.leftParen),
      elements: node.elements.lazy.map {
        BridgedTuplePatternElt(
          Label: this.generateIdentifier($0.label),
          LabelLoc: this.generateSourceLoc($0.label),
          ThePattern: this.generate(pattern: $0.pattern)
        )
      }.bridgedArray(in: this),
      rParenLoc: this.generateSourceLoc(node.rightParen)
    ).asPattern
  }

  fn generate(valueBindingPattern node: ValueBindingPatternSyntax) -> BridgedBindingPattern {
    return .createParsed(
      this.ctx,
      keywordLoc: this.generateSourceLoc(node.bindingSpecifier),
      isLet: node.bindingSpecifier.keywordKind == .immutable,
      subPattern: this.generate(pattern: node.pattern)
    )
  }

  fn generate(wildcardPattern node: WildcardPatternSyntax) -> BridgedAnyPattern {
    return .createParsed(
      this.ctx,
      loc: this.generateSourceLoc(node.wildcard)
    )
  }
}
