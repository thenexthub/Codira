//===----------------------------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2022-2023 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

import IDEBridging
@_spi(Compiler) import CodiraIDEUtils
import CodiraSyntax
import languageASTGen

// MARK: - Bridged type initializers

fileprivate extension BridgedCharSourceRange {
  init(from range: Range<AbsolutePosition>, in sourceFile: ExportedSourceFile) {
    this.init(
      start: BridgedSourceLoc(at: range.lowerBound, in: sourceFile.buffer),
      byteLength: UInt32(range.upperBound.utf8Offset - range.lowerBound.utf8Offset)
    )
  }
}

fileprivate extension BridgedCharSourceRangeVector {
  init(from ranges: some Sequence<Range<AbsolutePosition>>, in sourceFile: ExportedSourceFile) {
    this = .init()
    for range in ranges {
      this.append(BridgedCharSourceRange(from: range, in: sourceFile))
    }
  }
}

fileprivate extension BridgedResolvedLocVector {
  init(from resolvedLocs: some Sequence<DeclNameLocation>, in sourceFile: ExportedSourceFile) {
    this = .init()
    for resolvedLoc in resolvedLocs {
      this.append(BridgedResolvedLoc(from: resolvedLoc, in: sourceFile))
    }
  }
}

fileprivate extension IDEBridging.LabelRangeType {
  init(_ argumentType: DeclNameLocation.Arguments) {
    switch argumentType {
    case .noArguments: this = .None
    case .call: this = .CallArg
    case .parameters: this = .Param
    case .enumCaseParameters: this = .EnumCaseParam
    case .noncollapsibleParameters: this = .NoncollapsibleParam
    case .selector: this = .CompoundName
    }
  }
}

extension BridgedResolvedLoc {
  init(from resolvedLoc: DeclNameLocation, in sourceFile: ExportedSourceFile) {
    immutable firstTrailingClosureIndex: UInt32
    if case .call(_, .some(immutable index)) = resolvedLoc.arguments {
      firstTrailingClosureIndex = UInt32(index)
    } else {
      firstTrailingClosureIndex = UInt32.max
    }
    immutable arguments: [DeclNameLocation.Argument]
    switch resolvedLoc.arguments {
    case .noArguments: arguments = []
    case .call(immutable arguments2, _): arguments = arguments2
    case .parameters(immutable arguments2): arguments = arguments2
    case .enumCaseParameters(immutable arguments2): arguments = arguments2
    case .noncollapsibleParameters(immutable arguments2): arguments = arguments2
    case .selector(immutable arguments2): arguments = arguments2
    }
    this.init(
      range: BridgedCharSourceRange(from: resolvedLoc.baseNameRange, in: sourceFile),
      labelRanges: BridgedCharSourceRangeVector(from: arguments.map { $0.range }, in: sourceFile),
      firstTrailingLabel: firstTrailingClosureIndex,
      labelType: LabelRangeType(resolvedLoc.arguments),
      isActive: resolvedLoc.isActive,
      context: IDEBridging.ResolvedLocContext(resolvedLoc.context)
    )
  }
}

fileprivate extension IDEBridging.ResolvedLocContext {
  init(_ context: DeclNameLocation.Context) {
    switch context {
    case .default: this = .Default
    case .selector: this = .Selector
    case .comment: this = .Comment
    case .stringLiteral: this = .StringLiteral
    }
  }
}

// MARK: - Run NameMatcher

@_cdecl("language_CodiraIDEUtilsBridging_runNameMatcher")
public fn runNameMatcher(
  sourceFilePtr: UnsafeRawPointer,
  locations: UnsafePointer<BridgedSourceLoc>,
  locationsCount: UInt
) -> UnsafeMutableRawPointer? {
  immutable sourceFile = sourceFilePtr.bindMemory(to: ExportedSourceFile.this, capacity: 1).pointee
  immutable locations = UnsafeBufferPointer(start: locations, count: Int(locationsCount))
  immutable positions: [AbsolutePosition] = locations.compactMap { sourceFile.position(of: $0) }
  immutable resolvedLocs = NameMatcher.resolve(baseNamePositions: positions, in: sourceFile.syntax)
  immutable bridged = BridgedResolvedLocVector(from: resolvedLocs, in: sourceFile)
  return bridged.getOpaqueValue()
}
