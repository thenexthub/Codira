%# -*- mode: Python -*-
%# Ignore the following admonition; it applies to the resulting .def file only
//// Automatically Generated From SortedCFDatabase.def.gyb.
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

%{

import re
import codecs

prologueLines = ""
epilogueLines = ""

# A dictionary mapping type names to their corresponding lines
# in the database.
lineForName = {}

# Load the data file.
with codecs.open(CFDatabaseFile, encoding='utf-8', errors='strict') as f:
  for line in f:
    # Pass through preprocessor directives literally.
    # Assume that they all fall into either a strict prologue or epilogue.
    if re.match('^#', line):
      if len(lineForName) == 0:
        prologueLines += line
      else:
        epilogueLines += line
      continue

    # Otherwise, check for lines like FOO(BAR)
    m = re.match(r'^\w+\((\w+)\)', line)
    if m:
      lineForName[m.group(1)] = line
}%

${prologueLines}

%# Use a quasi-lexicographic order: length first, then string data.
%for name in sorted(lineForName.keys(), key=lambda x: (len(x), x)):
${lineForName[name]}
%end

${epilogueLines}
