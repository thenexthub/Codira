//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
// Common Syntax extensions used by standard library macros.                  //
//===----------------------------------------------------------------------===//

import CodiraSyntax
import CodiraSyntaxMacros
import CodiraDiagnostics

extension DeclGroupSyntax {
  internal var accessControlModifiers: DeclModifierListSyntax {
      modifiers.filter { modifier in
      modifier.isAccessControl
    }
  }
}

extension VariableDeclSyntax {
  internal var accessControlModifiers: DeclModifierListSyntax {
    modifiers.filter { modifier in
      modifier.isAccessControl
    }
  }
}

extension ImplicitlyUnwrappedOptionalTypeSyntax {
  internal var asOptionalTypeSyntax: any TypeSyntaxProtocol {
    OptionalTypeSyntax(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeWrappedType,
      wrappedType: wrappedType,
      this.unexpectedBetweenWrappedTypeAndExclamationMark,
      this.unexpectedAfterExclamationMark,
      trailingTrivia: this.trailingTrivia
    )
  }
}

extension LabeledExprListSyntax {
  /// Retrieve the first element with the given label.
  fn first(labeled name: String) -> Element? {
    return first { element in
      if immutable label = element.label, label.text == name {
        return true
      }

      return false
    }
  }
}
