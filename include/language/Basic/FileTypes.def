//===--- Types.def - Driver Type info ---------------------------*- C++ -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
// This file defines the driver type information. Users of this file
// must define the TYPE macro to make use of this information.
//
//===----------------------------------------------------------------------===//

#ifndef TYPE
#error "Define TYPE prior to including this file!"
#endif

// TYPE(NAME, ID, SUFFIX, FLAGS)

// The first value is the type name as a string; this should be something which
// could be displayed to the user, or something which the user could provide.

// The second value is the type id, which will result in a
// language::driver::file_types::TY_XX enum constant.

// The third value is the extension to use when creating temporary files
// of this type. It is also used when inferring a type from an extension.
// If multiple types specify the same extension, the first one is chosen when
// performing type inference.

// The fourth value is a string containing option flags. For now, this is
// unused, and should always be the empty string.

// Input types
TYPE("language",               Codira,                     "language",           "")
TYPE("sil",                 SIL,                       "sil",             "")
TYPE("sib",                 SIB,                       "sib",             "")

// Output types
TYPE("ast-dump",            ASTDump,                   "ast",             "")
TYPE("image",               Image,                     "out",             "")
TYPE("object",              Object,                    "o",               "")
TYPE("dSYM",                dSYM,                      "dSYM",            "")
TYPE("dependencies",        Dependencies,              "d",               "")
TYPE("autolink",            AutolinkFile,              "autolink",        "")
TYPE("languagemodule",         CodiraModuleFile,           "languagemodule",     "")
TYPE("languagedoc",            CodiraModuleDocFile,        "languagedoc",        "")
TYPE("languageinterface",      CodiraModuleInterfaceFile,  "languageinterface",  "")
TYPE("private-languageinterface", PrivateCodiraModuleInterfaceFile,  "private.codeinterface",  "")
TYPE("package-languageinterface", PackageCodiraModuleInterfaceFile,  "package.codeinterface",  "")
TYPE("languagemodulesummary",  CodiraModuleSummaryFile,    "languagemodulesummary", "")
TYPE("languagesourceinfo",     CodiraSourceInfoFile,       "languagesourceinfo", "")
TYPE("assembly",            Assembly,                  "s",               "")
TYPE("raw-sil",             RawSIL,                    "sil",             "")
TYPE("lowered-sil",         LoweredSIL,                "sil",             "")
TYPE("raw-sib",             RawSIB,                    "sib",             "")
TYPE("toolchain-ir",             TOOLCHAIN_IR,                   "ll",              "")
TYPE("raw-toolchain-ir",         RawTOOLCHAIN_IR,                "ll",              "")
TYPE("toolchain-bc",             TOOLCHAIN_BC,                   "bc",              "")
TYPE("diagnostics",         SerializedDiagnostics,     "dia",             "")
TYPE("clang-header",        ClangHeader,               "h",               "")
TYPE("language-dependencies",  CodiraDeps,                 "languagedeps",       "")
TYPE("external-language-dependencies", ExternalCodiraDeps,  "languagedeps.external",  "")
TYPE("remap",               Remapping,                 "remap",           "")
TYPE("imported-modules",    ImportedModules,           "importedmodules", "")
TYPE("tbd",                 TBD,                       "tbd",             "")

// Module traces are used by Apple's internal build infrastructure. Apple
// engineers can see more details on the "Codira module traces" page in the
// Codira section of the internal wiki.
TYPE("module-trace",        ModuleTrace,               "trace.json",      "")
TYPE("fine-module-trace",   FineModuleTrace,           "",                "")

// Complete dependency information for the given Codira files as JSON.
TYPE("json-dependencies",   JSONDependencies,          "dependencies.json",      "")

// Complete supported argument information for the given Codira compiler.
TYPE("json-arguments",      JSONArguments,            "arguments.json",   "")

// Gathered compile-time-known value information for the given Codira input file as JSON.
TYPE("const-values",       ConstValues,              "languageconstvalues",   "")

TYPE("index-data",          IndexData,                 "",                "")
TYPE("index-unit-output-path", IndexUnitOutputPath,    "",                "")
TYPE("yaml-opt-record",     YAMLOptRecord,             "opt.yaml",        "")
TYPE("bitstream-opt-record",BitstreamOptRecord,        "opt.bitstream",   "")

// Overlay files declare wrapper modules, called "separately-imported overlays",
// that should be automatically imported when a particular module is imported.
// Cross-import directories conditionalize overlay files so they only take
// effect when certain other modules are also loaded.
TYPE("languagecrossimport",    CodiraCrossImportDir,       "languagecrossimport","")
TYPE("languageoverlay",        CodiraOverlayFile,          "languageoverlay",    "")

// Misc types
TYPE("pcm",                 ClangModuleFile,           "pcm",             "")
TYPE("symbol-graph",        SymbolGraphFile,           "symbols.json",    "")
TYPE("pch",                 PCH,                       "pch",             "")
TYPE("none",                Nothing,                   "",                "")

TYPE("abi-baseline-json",   CodiraABIDescriptor,        "abi.json",        "")
TYPE("api-descriptor-json", CodiraAPIDescriptor,        "",                "")
TYPE("fixit",               CodiraFixIt,                "",                "")
TYPE("module-semantic-info", ModuleSemanticInfo,       "",                "")
TYPE("cached-diagnostics",  CachedDiagnostics,         "",                "")

#undef TYPE
