//===--- ClangImporterTypeIDZone.def ----------------------------*- C++ -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
//  This definition file describes the types in the clang importer
//  TypeID zone, for use with the TypeID template.
//
//===----------------------------------------------------------------------===//

LANGUAGE_REQUEST(ClangImporter, ClangDirectLookupRequest,
              (SmallVector<SingleEntry, 4>(ClangDirectLookupDescriptor)), Uncached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, CXXNamespaceMemberLookup,
              Decl *(CXXNamespaceMemberLookupDescriptor), Uncached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, ClangRecordMemberLookup,
              Decl *(ClangRecordMemberLookupDescriptor), Uncached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, ClangCategoryLookupRequest,
              toolchain::TinyPtrVector<Decl *>(ClangCategoryLookupDescriptor), Uncached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, ObjCInterfaceAndImplementationRequest,
              ObjCInterfaceAndImplementation(Decl *), SeparatelyCached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, CxxRecordSemantics,
              CxxRecordSemanticsKind(const clang::CXXRecordDecl *), Cached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, CxxRecordAsCodiraType,
              ValueDecl *(CxxRecordSemanticsDescriptor), Cached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, IsSafeUseOfCxxDecl,
              bool(SafeUseOfCxxRecordDescriptor), Cached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, CustomRefCountingOperation,
              CustomRefCountingOperationResult(CustomRefCountingOperationDescriptor), Cached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, ClangTypeEscapability,
              CxxEscapability(EscapabilityLookupDescriptor), Cached,
              NoLocationInfo)
LANGUAGE_REQUEST(ClangImporter, ClangDeclExplicitSafety,
              ExplicitSafety(CxxDeclExplicitSafetyDescriptor), Cached,
              NoLocationInfo)
