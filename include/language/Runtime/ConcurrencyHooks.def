//===--- Concurrency.h - Runtime interface for concurrency ------*- C++ -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
// Hooks for concurrency
//
//===----------------------------------------------------------------------===//

// To use this file, define the following macros:
//
//   LANGUAGE_CONCURRENCY_HOOK(returnType, name, ...)
//   LANGUAGE_CONCURRENCY_HOOK0(returnType, name)
//   LANGUAGE_CONCURRENCY_HOOK_OVERRIDE0(returnType, name)
//
// Then include the file somewhere.

#ifndef LANGUAGE_CONCURRENCY_HOOK
#define LANGUAGE_CONCURRENCY_HOOK(returnType, name, ...)
#endif

#ifndef LANGUAGE_CONCURRENCY_HOOK0
#define LANGUAGE_CONCURRENCY_HOOK0(returnType, name)
#endif

// .............................................................................

LANGUAGE_CONCURRENCY_HOOK(void, language_task_enqueueGlobal, Job *job);

LANGUAGE_CONCURRENCY_HOOK(void, language_task_enqueueGlobalWithDelay,
                 unsigned long long delay, Job *job);

LANGUAGE_CONCURRENCY_HOOK(void, language_task_enqueueGlobalWithDeadline,
    long long sec,
    long long nsec,
    long long tsec,
    long long tnsec,
    int clock, Job *job);

LANGUAGE_CONCURRENCY_HOOK(void, language_task_checkIsolated,
    SerialExecutorRef executor);

LANGUAGE_CONCURRENCY_HOOK(int8_t, language_task_isIsolatingCurrentContext,
    SerialExecutorRef executor);

LANGUAGE_CONCURRENCY_HOOK(bool, language_task_isOnExecutor,
    HeapObject *executor,
    const Metadata *selfType,
    const SerialExecutorWitnessTable *wtable);

LANGUAGE_CONCURRENCY_HOOK(void, language_task_enqueueMainExecutor, Job *job);

LANGUAGE_CONCURRENCY_HOOK0(SerialExecutorRef, language_task_getMainExecutor);

LANGUAGE_CONCURRENCY_HOOK(bool, language_task_isMainExecutor, SerialExecutorRef);

LANGUAGE_CONCURRENCY_HOOK(void, language_task_donateThreadToGlobalExecutorUntil,
                       bool (*condition)(void *), void *context);

// .............................................................................

#undef LANGUAGE_CONCURRENCY_HOOK
#undef LANGUAGE_CONCURRENCY_HOOK0
#undef LANGUAGE_CONCURRENCY_HOOK_OVERRIDE0
