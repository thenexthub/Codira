//===--- DiagnosticGroups.def - Diagnostic Groups ---------------*- C++ -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
//  This file defines diagnostic groups and links between them.
//
//  The GROUP(Name, Filename) macro is used to define each diagnostic group.
//  These groups are used to associate documentation with particular set of
//  diagnostics and also to provide more control over whether the warnings
//  in the group are escalated to errors (via the -Wwarning and -Werror flags.)
//  A given warning or error can be associated with a diagnostic group by using
//  GROUPED_WARNING or GROUPED_ERROR, respectively. New warnings and errors
//  should be introduced along with groups to improve documentation.
//
//    - Name: the name of the group that will be shown in diagnostic messages
//      (e.g., StrictMemorySafety) and used in command-line options like
//      -Wwarning and -Werror. Once assigned, the group name for a particular
//      diagnostic should not be changed, because it will affect existing users
//      of the command-line flags.
//    - Filename: the name of the file that provides documentation for this
//      diagnostic group. There should be a corresponding Markdown file in
//      userdocs/diagnostics providing short-form documentation that helps
//      explain the diagnostic and how to resolve the problem.
//
//===----------------------------------------------------------------------===//

#define DEFINE_DIAGNOSTIC_GROUPS_MACROS
#include "language/AST/DefineDiagnosticGroupsMacros.h"

// GROUP(Name, DocsFile)
// GROUP_LINK(Parent, Child)

GROUP(no_group, "")

GROUP(ActorIsolatedCall, "actor-isolated-call")
GROUP(AvailabilityUnrecognizedName, "availability-unrecognized-name")
GROUP(ClangDeclarationImport, "clang-declaration-import")
GROUP(ConformanceIsolation, "conformance-isolation")
GROUP(DeprecatedDeclaration, "deprecated-declaration")
GROUP(DynamicCallable, "dynamic-callable-requirements")
GROUP(ErrorInFutureCodiraVersion, "error-in-future-language-version")
GROUP(ExistentialAny, "existential-any")
GROUP(ExistentialMemberAccess, "existential-member-access-limitations")
GROUP(ImplementationOnlyDeprecated, "implementation-only-deprecated")
GROUP(IsolatedConformances, "isolated-conformances")
GROUP(MemberImportVisibility, "member-import-visibility")
GROUP(MissingModuleOnKnownPaths, "missing-module-on-known-paths")
GROUP(MultipleInheritance, "multiple-inheritance")
GROUP(MutableGlobalVariable, "mutable-global-variable")
GROUP(NominalTypes, "nominal-types")
GROUP(NonisolatedNonsendingByDefault, "nonisolated-nonsending-by-default")
GROUP(OpaqueTypeInference, "opaque-type-inference")
GROUP(PreconcurrencyImport, "preconcurrency-import")
GROUP(PropertyWrappers, "property-wrapper-requirements")
GROUP(ProtocolTypeNonConformance, "protocol-type-non-conformance")
GROUP(ResultBuilderMethods, "result-builder-methods")
GROUP(SendableClosureCaptures, "sendable-closure-captures")
GROUP(SendableMetatypes, "sendable-metatypes")
GROUP(SendingRisksDataRace, "sending-risks-data-race")
GROUP(StrictLanguageFeatures, "strict-language-features")
GROUP(StrictMemorySafety, "strict-memory-safety")
GROUP(StringInterpolationConformance, "string-interpolation-conformance")
GROUP(TemporaryPointers, "temporary-pointers")
GROUP(TrailingClosureMatching, "trailing-closure-matching")
GROUP(UnknownWarningGroup, "unknown-warning-group")
GROUP(CompilationCaching, "compilation-caching")

#define UNDEFINE_DIAGNOSTIC_GROUPS_MACROS
#include "language/AST/DefineDiagnosticGroupsMacros.h"
