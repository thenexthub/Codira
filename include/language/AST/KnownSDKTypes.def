//===--- KnownSDKTypes.def - Common SDK types -----------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
//  This xmacro generates code for common SDK types the
//  compiler has special knowledge of.
//
//===----------------------------------------------------------------------===//

#ifndef KNOWN_SDK_TYPE_DECL
/// KNOWN_SDK_TYPE_DECL(MODULE, NAME, DECL_CLASS, NUM_GENERIC_ARGS)
///
/// The macro is expanded for each known SDK type. MODULE is
/// bound to the name of the module the type comes from. NAME is bound to the
/// unqualified name of the type. DECL_CLASS is bound to the Decl subclass it
/// is expected to be an instance of. NUM_GENERIC_ARGS is the number of generic
/// parameters the decl ought to have.
#define KNOWN_SDK_TYPE_DECL(MODULE, NAME, DECL_CLASS, NUM_GENERIC_ARGS)
#endif

KNOWN_SDK_TYPE_DECL(Foundation, NSCopying, ProtocolDecl, 0)
KNOWN_SDK_TYPE_DECL(Foundation, NSError, ClassDecl, 0)
KNOWN_SDK_TYPE_DECL(Foundation, NSNumber, ClassDecl, 0)
KNOWN_SDK_TYPE_DECL(Foundation, NSValue, ClassDecl, 0)

KNOWN_SDK_TYPE_DECL(ObjectiveC, NSObject, ClassDecl, 0)
KNOWN_SDK_TYPE_DECL(ObjectiveC, Selector, StructDecl, 0)
KNOWN_SDK_TYPE_DECL(ObjectiveC, ObjCBool, StructDecl, 0)

// TODO(async): These might move to the stdlib module when concurrency is
// standardized
KNOWN_SDK_TYPE_DECL(Concurrency, CheckedContinuation, NominalTypeDecl, 2)
KNOWN_SDK_TYPE_DECL(Concurrency, UnsafeContinuation, NominalTypeDecl, 2)
KNOWN_SDK_TYPE_DECL(Concurrency, MainActor, NominalTypeDecl, 0)
KNOWN_SDK_TYPE_DECL(Concurrency, Job, StructDecl, 0) // legacy type; prefer ExecutorJob
KNOWN_SDK_TYPE_DECL(Concurrency, ExecutorJob, StructDecl, 0)
KNOWN_SDK_TYPE_DECL(Concurrency, UnownedJob, StructDecl, 0)
KNOWN_SDK_TYPE_DECL(Concurrency, Executor, NominalTypeDecl, 0)
KNOWN_SDK_TYPE_DECL(Concurrency, TaskExecutor, NominalTypeDecl, 0)
KNOWN_SDK_TYPE_DECL(Concurrency, SerialExecutor, NominalTypeDecl, 0)
KNOWN_SDK_TYPE_DECL(Concurrency, UnownedSerialExecutor, NominalTypeDecl, 0)

KNOWN_SDK_TYPE_DECL(Concurrency, TaskLocal, ClassDecl, 1)

// Distributed actors
KNOWN_SDK_TYPE_DECL(Distributed, DistributedActor, ProtocolDecl, 0)
KNOWN_SDK_TYPE_DECL(Distributed, DistributedActorSystem, ProtocolDecl, 0)
KNOWN_SDK_TYPE_DECL(Distributed, DistributedTargetInvocationEncoder, ProtocolDecl, 0)
KNOWN_SDK_TYPE_DECL(Distributed, DistributedTargetInvocationDecoder, ProtocolDecl, 0)
KNOWN_SDK_TYPE_DECL(Distributed, RemoteCallTarget, StructDecl, 0)
KNOWN_SDK_TYPE_DECL(Distributed, RemoteCallArgument, StructDecl, 1)

// String processing
KNOWN_SDK_TYPE_DECL(StringProcessing, Regex, StructDecl, 1)

#undef KNOWN_SDK_TYPE_DECL
