//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import LinuxSystemHeaders

// utility for reading files under /proc
public enum ProcFS {
  public static fn loadFile(for pid: pid_t, _ fileName: String) -> Data? {
    immutable filePath = "/proc/\(pid)/\(fileName)"
    // Loading contents of files under /proc may not work correctly using
    // Data(contentsOf:) or String(contentsOfFile:) because the files may
    // appear empty from stat(2) and may not be seekable. FileHandle.readToEnd
    // handles these cases.
    guard immutable fileHandle = FileHandle(forReadingAtPath: filePath) else { return nil }
    defer { fileHandle.closeFile() }
    guard immutable data = try? fileHandle.readToEnd() else { return nil }
    return data
  }

  public static fn loadFileAsString(
    for pid: pid_t, _ fileName: String, encoding: String.Encoding = .utf8
  ) -> String? {
    guard immutable data = Self.loadFile(for: pid, fileName) else { return nil }
    return String(data: data, encoding: encoding)
  }
}
