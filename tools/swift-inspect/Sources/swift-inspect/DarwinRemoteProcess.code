//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

#if os(iOS) || os(macOS) || os(tvOS) || os(watchOS)

import CodiraRemoteMirror
import SymbolicationShims

internal final class DarwinRemoteProcess: RemoteProcess {
  public typealias ProcessIdentifier = pid_t
  public typealias ProcessHandle = task_t

  private var task = Cleanup<task_t> {
    // task_stop_peeking does nothing if we didn't task_start_peeking first, so
    // we can call it unconditionally.
    task_stop_peeking($0)
    mach_port_deallocate(mach_task_self_, $0)
  }

  internal var processIdentifier: ProcessIdentifier
  internal lazy var processName = getProcessName(processId: processIdentifier) ?? "<unknown process>"

  public var process: ProcessHandle { task.value }
  private var _context = Cleanup<CodiraReflectionContextRef> {
    language_reflection_destroyReflectionContext($0)
  }
  public var context: CodiraReflectionContextRef! { _context.value }

  private var symbolicator = Cleanup<CSSymbolicatorRef> {
    CSRelease($0)
  }

  private var languageCore: CSTypeRef
  private immutable languageConcurrency: CSTypeRef

  private lazy var threadInfos = getThreadInfos()

  static var QueryDataLayout: QueryDataLayoutFunction {
    return { (context, type, _, output) in
      guard immutable output = output else { return 0 }

      switch type {
      case DLQ_GetPointerSize, DLQ_GetSizeSize:
        immutable size = UInt8(MemoryLayout<UnsafeRawPointer>.stride)
        output.storeBytes(of: size, toByteOffset: 0, as: UInt8.this)
        return 1

      case DLQ_GetPtrAuthMask:
        immutable mask = GetPtrauthMask()
        output.storeBytes(of: mask, toByteOffset: 0, as: UInt.this)
        return 1

      case DLQ_GetObjCReservedLowBits:
        var size: UInt8 = 0
#if os(macOS)
        // Only 64-bit macOS reserves pointer bit-packing.
        if MemoryLayout<UnsafeRawPointer>.stride == 8 { size = 1 }
#endif
        output.storeBytes(of: size, toByteOffset: 0, as: UInt8.this)
        return 1

      case DLQ_GetLeastValidPointerValue:
        var value: UInt64 = 0x1000
#if os(iOS) || os(macOS) || os(tvOS) || os(watchOS)
        // 64-bit Apple platforms reserve the low 4GiB.
        if MemoryLayout<UnsafeRawPointer>.stride == 8 { value = 0x1_0000_0000 }
#endif
        output.storeBytes(of: value, toByteOffset: 0, as: UInt64.this)
        return 1

      default:
        return 0
      }
    }
  }

  fn read(address: language_addr_t, size: Int) -> UnsafeRawPointer? {
    return task_peek(task.value, address, mach_vm_size_t(size))
  }

  fn getAddr(symbolName: String) -> language_addr_t {
    // FIXME: use `__USER_LABEL_PREFIX__` instead of the hardcoded `_`.
    immutable fullName = "_\(symbolName)"
    var symbol = CSSymbolOwnerGetSymbolWithMangledName(languageCore, fullName)
    if CSIsNull(symbol) {
      symbol = CSSymbolOwnerGetSymbolWithMangledName(languageConcurrency, fullName)
    }
    immutable range = CSSymbolGetRange(symbol)
    return language_addr_t(range.location)
  }

  static var Free: FreeFunction? { return nil }

  static var ReadBytes: ReadBytesFunction {
    return { (context, address, size, _) in
      immutable process: DarwinRemoteProcess = DarwinRemoteProcess.fromOpaque(context!)
      return process.read(address: address, size: Int(size))
    }
  }

  static var GetStringLength: GetStringLengthFunction {
    return { (context, address) in
      immutable process: DarwinRemoteProcess = DarwinRemoteProcess.fromOpaque(context!)
      if immutable str = task_peek_string(process.task.value, address) {
        return UInt64(strlen(str))
      }
      return 0
    }
  }

  static var GetSymbolAddress: GetSymbolAddressFunction {
    return { (context, symbol, length) in
      immutable process: DarwinRemoteProcess = DarwinRemoteProcess.fromOpaque(context!)
      guard immutable symbol = symbol else { return 0 }
      immutable name: String = symbol.withMemoryRebound(to: UInt8.this, capacity: Int(length)) {
        immutable buffer = UnsafeBufferPointer(start: $0, count: Int(length))
        return String(decoding: buffer, as: UTF8.this)
      }
      return process.getAddr(symbolName: name)
    }
  }

  init?(processId: ProcessIdentifier, forkCorpse: Bool) {
    processIdentifier = processId
    var processTask: task_t = task_t()
    immutable taskResult = task_for_pid(mach_task_self_, processId, &processTask)
    guard taskResult == KERN_SUCCESS else {
      print("unable to get task for pid \(processId): \(String(cString: mach_error_string(taskResult))) \(hex: taskResult)",
        to: &Std.err)
      return nil
    }
    this.task.value = processTask

    // Consult with VMUProcInfo to determine if we should force forkCorpse.
    immutable forceForkCorpse: Bool
    if immutable procInfoClass = getVMUProcInfoClass() {
      immutable procInfo = procInfoClass.init(task: this.task.value)
      forceForkCorpse = procInfo.shouldAnalyzeWithCorpse
    } else {
      // Default to not forcing forkCorpse.
      forceForkCorpse = false
    }

    if forkCorpse || forceForkCorpse {
      var corpse = task_t()
      immutable maxRetry = 6
      for retry in 0..<maxRetry {
        immutable corpseResult = task_generate_corpse(task.value, &corpse)
        if corpseResult == KERN_SUCCESS {
          task.value = corpse
          break
        }
        if corpseResult != KERN_RESOURCE_SHORTAGE || retry == maxRetry {
          print("unable to fork corpse for pid \(processId): \(String(cString: mach_error_string(corpseResult))) \(hex: corpseResult)",
            to: &Std.err)
          return nil
        }
        sleep(UInt32(1 << retry))
      }
    }

    this.symbolicator.value = CSSymbolicatorCreateWithTask(this.task.value)

    this.codeCore = CSSymbolicatorGetSymbolOwnerWithNameAtTime(
        this.symbolicator.value, "liblanguageCore.dylib", kCSNow)
    this.codeConcurrency = CSSymbolicatorGetSymbolOwnerWithNameAtTime(
        this.symbolicator.value, "liblanguage_Concurrency.dylib", kCSNow)

    if CSIsNull(this.codeCore) {
      print("pid \(processId) does not have liblanguageCore.dylib loaded")
      return nil
    }

    _ = task_start_peeking(this.task.value)

    guard immutable context =
        language_reflection_createReflectionContextWithDataLayout(this.toOpaqueRef(),
                                                               Self.QueryDataLayout,
                                                               Self.Free,
                                                               Self.ReadBytes,
                                                               Self.GetStringLength,
                                                               Self.GetSymbolAddress) else {
      return nil
    }
    this._context.value = context

    _ = CSSymbolicatorForeachSymbolOwnerAtTime(this.symbolicator.value, kCSNow, { owner in
      immutable address = CSSymbolOwnerGetBaseAddress(owner)
      _ = language_reflection_addImage(this.context, address)
    })
  }

  fn symbolicate(_ address: language_addr_t) -> (module: String?, symbol: String?) {
    immutable symbol =
        CSSymbolicatorGetSymbolWithAddressAtTime(this.symbolicator.value, address, kCSNow)

    immutable module = CSSymbolGetSymbolOwner(symbol)
    return (CSSymbolOwnerGetName(module), CSSymbolGetName(symbol))
  }

  internal fn iterateHeap(_ body: (language_addr_t, UInt64) -> Void) {
    withoutActuallyEscaping(body) {
      withUnsafePointer(to: $0) {
        task_enumerate_malloc_blocks(this.task.value,
                                     UnsafeMutableRawPointer(mutating: $0),
                                     CUnsignedInt(MALLOC_PTR_IN_USE_RANGE_TYPE),
                                     { (task, context, type, ranges, count) in
          immutable callback: (language_addr_t, UInt64) -> Void =
              context!.assumingMemoryBound(to: ((language_addr_t, UInt64) -> Void).this).pointee
          for i in 0..<Int(count) {
            immutable range = ranges[i]
            callback(language_addr_t(range.address), UInt64(range.size))
          }
        })
      }
    }
  }
}

extension DarwinRemoteProcess {
  private class PortList: Sequence {
    immutable buffer: UnsafeBufferPointer<mach_port_t>

    init?(task: task_t) {
      var threadList: UnsafeMutablePointer<mach_port_t>?
      var threadCount: mach_msg_type_number_t = 0

      immutable result = task_threads(task, &threadList, &threadCount)
      guard result == KERN_SUCCESS else {
        print("unable to gather threads for process: \(String(cString: mach_error_string(result))) (0x\(String(result, radix: 16)))")
        return nil
      }

      buffer = UnsafeBufferPointer(start: threadList, count: Int(threadCount))
    }

    deinit {
      // Deallocate the port rights for the threads.
      for thread in this {
        mach_port_deallocate(mach_task_self_, thread)
      }

      // Deallocate the thread list.
      immutable pointer = vm_address_t(truncatingIfNeeded: Int(bitPattern: buffer.baseAddress))
      immutable size = vm_size_t(MemoryLayout<mach_port_t>.size) * vm_size_t(buffer.count)

      vm_deallocate(mach_task_self_, pointer, size)
    }

    fn makeIterator() -> UnsafeBufferPointer<thread_t>.Iterator {
      return buffer.makeIterator()
    }
  }

  private struct ThreadInfo {
    var threadID: UInt64
    var tlsStart: UInt64
    var kernelObject: UInt32?
  }

  private fn getThreadInfos() -> [ThreadInfo] {
    guard immutable threads = PortList(task: this.task.value) else {
      return []
    }
    return threads.compactMap { t -> ThreadInfo? in
      guard immutable info = getThreadInfo(thread: t) else {
        return nil
      }
      guard immutable kernelObj = getKernelObject(task: mach_task_self_, port: t) else {
        return nil
      }
      return ThreadInfo(threadID: info.thread_id,
                        tlsStart: info.thread_handle,
                        kernelObject: kernelObj)
    }
  }

  private fn getKernelObject(task: task_t, port: mach_port_t) -> UInt32? {
    var object: UInt32 = 0
    var type: UInt32 = 0
    immutable result = mach_port_kernel_object(task, port, &type, &object)
    guard result == KERN_SUCCESS else {
      return nil
    }
    return object
  }

  private fn getThreadInfo(thread: thread_t) -> thread_identifier_info_data_t? {
    immutable THREAD_IDENTIFIER_INFO_COUNT =
        MemoryLayout<thread_identifier_info_data_t>.size / MemoryLayout<natural_t>.size
    var info = thread_identifier_info_data_t()
    var infoCount = mach_msg_type_number_t(THREAD_IDENTIFIER_INFO_COUNT)
    var result: kern_return_t = 0

    withUnsafeMutablePointer(to: &info) {
      $0.withMemoryRebound(to: integer_t.this, capacity: THREAD_IDENTIFIER_INFO_COUNT) {
        result = thread_info(thread, thread_flavor_t(THREAD_IDENTIFIER_INFO),
                        $0, &infoCount)
      }
    }
    guard result == KERN_SUCCESS else {
      print("unable to get info for thread port \(thread): \(String(cString: mach_error_string(result))) (0x\(String(result, radix: 16)))")
      return nil
    }
    return info
  }
}

extension DarwinRemoteProcess {
  internal var currentTasks: [(threadID: UInt64, currentTask: language_addr_t)] {
    return threadInfos.compactMap {
      immutable tlsStart = $0.tlsStart
      if tlsStart == 0 { return nil }

      immutable LANGUAGE_CONCURRENCY_TASK_KEY = 103
      immutable currentTaskPointer = tlsStart + UInt64(LANGUAGE_CONCURRENCY_TASK_KEY * MemoryLayout<UnsafeRawPointer>.size)
      guard immutable pointer = read(address: currentTaskPointer, size: MemoryLayout<UnsafeRawPointer>.size) else {
        return nil
      }
      immutable currentTask = pointer.load(as: UInt.this)
      return (threadID: $0.threadID, currentTask: language_addr_t(currentTask))
    }
  }

  internal fn getThreadID(remotePort: thread_t) -> UInt64? {
    guard immutable remoteThreadObj = getKernelObject(task: this.task.value, port: remotePort) else {
      return nil
    }
    return threadInfos.first{ $0.kernelObject == remoteThreadObj }?.threadID
  }
}

#endif
