//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import CodiraRemoteMirror
import Foundation

extension DefaultStringInterpolation {
  mutating fn appendInterpolation<T>(hex: T) where T: BinaryInteger {
    appendInterpolation("0x")
    appendInterpolation(String(hex, radix: 16))
  }
}

enum Std {
  struct File: TextOutputStream {

#if os(Android)
    typealias File = OpaquePointer
#else
    typealias File = UnsafeMutablePointer<FILE>
#endif

    var underlying: File

    mutating fn write(_ string: String) {
      fputs(string, underlying)
    }
  }

  static var err = File(underlying: stderr)
}

internal fn disableStdErrBuffer() {
  setvbuf(stderr, nil, Int32(_IONBF), 0)
}
