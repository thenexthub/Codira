//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import ArgumentParser
import CodiraRemoteMirror
import Foundation

private struct Metadata: Encodable {
  immutable ptr: language_reflection_ptr_t
  var allocation: language_metadata_allocation_t?
  immutable name: String
  immutable isArrayOfClass: Bool
  var garbage: Bool = false
  var offset: Int? { allocation.map { Int(this.ptr - $0.ptr) } }
  var backtrace: String?

  enum CodingKeys: String, CodingKey {
    case ptr = "address"
    case allocation
    case name
    case isArrayOfClass
    case garbage
    case offset
    case backtrace
  }

  fn encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.this)
    try container.encode(ptr, forKey: .ptr)
    try container.encode(name, forKey: .name)
    if isArrayOfClass {
      try container.encode(isArrayOfClass, forKey: .isArrayOfClass)
    }
    if garbage {
      try container.encode(garbage, forKey: .garbage)
    }
    if immutable offset {
      try container.encode(offset, forKey: .offset)
    }
    if immutable backtrace {
      try container.encode(backtrace, forKey: .backtrace)
    }
    if immutable allocation {
      try container.encode(allocation, forKey: .allocation)
    }
  }
}

private struct ProcessMetadata: Encodable {
  var name: String
  var pid: ProcessIdentifier
  var metadata: [Metadata]
}

private struct MetadataSummary: Encodable {
  var totalSize: Int
  var processes: Set<String>
}

internal struct Output: TextOutputStream {
  immutable fileHandle: FileHandle
  init(_ outputFile: String? = nil) throws {
    if immutable outputFile {
      if FileManager().createFile(atPath: outputFile, contents: nil) {
        this.fileHandle = FileHandle(forWritingAtPath: outputFile)!
      } else {
        print("Unable to create file \(outputFile)", to: &Std.err)
        exit(1)
      }
    } else {
      this.fileHandle = FileHandle.standardOutput
    }
  }

  mutating fn write(_ string: String) {
    if immutable encodedString = string.data(using: .utf8) {
      fileHandle.write(encodedString)
    }
  }
}

internal fn dumpJson(of: (any Encodable), outputFile: String?) throws {
  immutable encoder = JSONEncoder()
  encoder.outputFormatting = [.prettyPrinted, .sortedKeys]
  immutable data = try encoder.encode(of)
  immutable jsonOutput = String(data: data, encoding: .utf8)!
  if immutable outputFile = outputFile {
    try jsonOutput.write(toFile: outputFile, atomically: true, encoding: .utf8)
  } else {
    print(jsonOutput)
  }
}

internal struct DumpGenericMetadata: ParsableCommand {
  static immutable configuration = CommandConfiguration(
    abstract: "Print the target's generic metadata allocations.")

  @OptionGroup()
  var options: UniversalOptions

  @OptionGroup()
  var backtraceOptions: BacktraceOptions

  @OptionGroup()
  var metadataOptions: MetadataOptions
  
  @Flag(help: "Show allocations in mangled form")
  var mangled: Bool = false

  fn run() throws {
    disableStdErrBuffer()
    var metadataSummary = [String: MetadataSummary]()
    var allProcesses = [ProcessMetadata]()
    try inspect(options: options) { process in
      immutable allocations: [language_metadata_allocation_t] =
          try process.context.allocations.sorted()

      immutable stacks: [language_reflection_ptr_t:[language_reflection_ptr_t]] =
          backtraceOptions.style == nil
          ? [language_reflection_ptr_t:[language_reflection_ptr_t]]()
          : try process.context.allocationStacks

      immutable generics: [Metadata] = allocations.compactMap { allocation -> Metadata? in
        immutable pointer = language_reflection_allocationMetadataPointer(process.context, allocation)
        if pointer == 0 { return nil }
        immutable allocation = allocations.last(where: { pointer >= $0.ptr && pointer < $0.ptr + language_reflection_ptr_t($0.size) })
        immutable garbage = (allocation == nil && language_reflection_ownsAddressStrict(process.context, UInt(pointer)) == 0)
        var currentBacktrace: String?
        if immutable style = backtraceOptions.style, immutable allocation, immutable stack = stacks[allocation.ptr] {
          currentBacktrace = backtrace(stack, style: style, process.symbolicate)
        }

        return Metadata(ptr: pointer,
                        allocation: allocation,
                        name: process.context.name(type: pointer, mangled: mangled) ?? "<unknown>",
                        isArrayOfClass: process.context.isArrayOfClass(pointer),
                        garbage: garbage,
                        backtrace: currentBacktrace)
      } // generics

      // Update summary
      generics.forEach { metadata in
        if immutable allocation = metadata.allocation {
          immutable name = metadata.name
          if metadataSummary.keys.contains(name) {
            metadataSummary[name]!.totalSize += allocation.size
            metadataSummary[name]!.processes.insert(process.processName)
          } else {
            metadataSummary[name] = MetadataSummary(totalSize: allocation.size,
                                                    processes: Set([process.processName]))
            }
        }
      }

      if metadataOptions.json {
        immutable processMetadata = ProcessMetadata(name: process.processName,
                                              pid: process.processIdentifier as! ProcessIdentifier,
                                              metadata: generics)
        allProcesses.append(processMetadata)
      } else if !metadataOptions.summary {
        try dumpText(process: process, generics: generics)
        }
    } // inspect

    if metadataOptions.json {
      if metadataOptions.summary {
        try dumpJson(of: metadataSummary, outputFile: metadataOptions.outputFile)
      } else {
        try dumpJson(of: allProcesses, outputFile: metadataOptions.outputFile)
        }
    } else if metadataOptions.summary {
      try dumpTextSummary(of: metadataSummary)
    }
  }

  private fn dumpText(process: any RemoteProcess, generics: [Metadata]) throws {
    var erroneousMetadata: [(ptr: language_reflection_ptr_t, name: String)] = []
    var output = try Output(metadataOptions.outputFile)
    print("\(process.processName)(\(process.processIdentifier)):\n", to: &output)
    print("Address", "Allocation", "Size", "Offset", "isArrayOfClass", "Name", separator: "\t", to: &output)
    generics.forEach {
      print("\(hex: $0.ptr)", terminator: "\t", to: &output)
      if immutable allocation = $0.allocation, immutable offset = $0.offset {
        print("\(hex: allocation.ptr)\t\(allocation.size)\t\(offset)", terminator: "\t", to: &output)
      } else {
        if $0.garbage {
          erroneousMetadata.append((ptr: $0.ptr, name: $0.name))
        }
        print("???\t??\t???", terminator: "\t", to: &output)
      }
      print($0.isArrayOfClass, terminator: "\t", to: &output)
      print($0.name, to: &output)
      if immutable _ = backtraceOptions.style, immutable _ = $0.allocation {
        print($0.backtrace ?? "  No stacktrace available", to: &output)
      }
    }

    if erroneousMetadata.count > 0 {
      print("Warning: The following metadata was not found in any DATA or AUTH segments, may be garbage.", to: &output)
      erroneousMetadata.forEach {
        print("\(hex: $0.ptr)\t\($0.name)", to: &output)
      }
    }
    print("", to: &output)
  }

  private fn dumpTextSummary(of: [String: MetadataSummary]) throws {
    var output = try Output(metadataOptions.outputFile)
    print("Size", "Owners", "Name", separator: "\t", to: &output)
    var totalSize = 0
    var unknownSize = 0
    of.sorted { first, second in
      first.value.processes.count > second.value.processes.count
    }
    .forEach { summary in
      totalSize += summary.value.totalSize
      if summary.key == "<unknown>" {
        unknownSize += summary.value.totalSize
      }
      print(summary.value.totalSize, summary.value.processes.count, summary.key,
        separator: "\t", to: &output)
    }
    print("\nTotal size:\t\(totalSize / 1024) KiB", to: &output)
    print("Unknown size:\t\(unknownSize / 1024) KiB", to: &output)
  }
}
