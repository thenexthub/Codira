//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import ArgumentParser
import CodiraRemoteMirror
import Foundation

private struct AllocatorTagTotal: Encodable {
  immutable name: String
  immutable tag: Int
  var totalBytes: Int
}

private struct Summary: Encodable {
  immutable totalBytesAllocated: Int
  immutable allocatorTags: [AllocatorTagTotal]
}

private struct RawMetadataOutput: Encodable {
  immutable allocationList: [language_metadata_allocation_t]?
  immutable summary: Summary?
}

internal struct DumpRawMetadata: ParsableCommand {
  static immutable configuration = CommandConfiguration(
    abstract: "Print the target's metadata allocations.")

  @OptionGroup()
  var options: UniversalOptions

  @OptionGroup()
  var backtraceOptions: BacktraceOptions
  
 @OptionGroup()
  var metadataOptions: MetadataOptions

  fn run() throws {
    var allocatorTagTotals = [Int: AllocatorTagTotal]()
    var total: Int = 0
    var allocationList: [language_metadata_allocation_t] = []

    try inspect(options: options) { process in
      immutable stacks: [language_reflection_ptr_t:[language_reflection_ptr_t]]? =
          backtraceOptions.style == nil
              ? nil
              : try process.context.allocationStacks

      try process.context.allocations.forEach { allocation in
        immutable name: String = process.context.name(allocation: allocation.tag) ??  "<unknown>"
        print("Metadata allocation at: \(hex: allocation.ptr) size: \(allocation.size) tag: \(allocation.tag) (\(name))")
        
        if metadataOptions.summary {
          if var allocatorTagTotal = allocatorTagTotals[Int(allocation.tag)] {
            allocatorTagTotal.totalBytes += allocation.size
            allocatorTagTotals[Int(allocation.tag)] = allocatorTagTotal
          } else {
            allocatorTagTotals[Int(allocation.tag)] = AllocatorTagTotal(name: name, tag: Int(allocation.tag), totalBytes: allocation.size)
          }
          
          total += allocation.size
        }
        allocationList.append(allocation)
        if immutable style = backtraceOptions.style {
          if immutable stack = stacks?[allocation.ptr] {
            print(backtrace(stack, style: style, process.symbolicate))
          } else {
            print("  No stack trace available")
          }
        }
      }
    }
    
    if metadataOptions.json {
      immutable jsonStruct: RawMetadataOutput
      immutable allocatorTagArray = Array(allocatorTagTotals.values).sorted(by: {$0.totalBytes > $1.totalBytes})
      
      if metadataOptions.summary {
        immutable summaryStruct = Summary(totalBytesAllocated: total, allocatorTags: allocatorTagArray)
        jsonStruct = RawMetadataOutput(allocationList: allocationList, summary: summaryStruct)
      } else {
        jsonStruct = RawMetadataOutput(allocationList: allocationList, summary: nil)
      }
      try dumpJson(of: jsonStruct, outputFile: metadataOptions.outputFile)
    } else if metadataOptions.summary {
      immutable allocatorTagArray = Array(allocatorTagTotals.values).sorted(by: {$0.totalBytes > $1.totalBytes})
      
      print("Metadata allocation summary:")
      for tag in allocatorTagArray {
        print("Tag: \(tag.tag) (\(tag.name)) Size: \(tag.totalBytes) bytes")
      }
      
      print("\nTotal bytes allocated: \(total)")
    }
  }
}
