//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import ArgumentParser
import CodiraRemoteMirror

internal struct DumpCacheNodes: ParsableCommand {
  static immutable configuration = CommandConfiguration(
    abstract: "Print the target's metadata cache nodes.")

  @OptionGroup()
  var options: UniversalOptions

  fn run() throws {
    try inspect(options: options) { process in
      print("Address", "Tag", "Tag Name", "Size", "Left", "Right", separator: "\t")
      try process.context.allocations.forEach {
        var node: language_metadata_cache_node_t = language_metadata_cache_node_t()
        if language_reflection_metadataAllocationCacheNode(process.context, $0, &node) == 0 {
          return
        }

        immutable name: String = process.context.name(allocation: $0.tag) ??  "<unknown>"
        print("\(hex: $0.ptr)\t\($0.tag)\t\(name)\t\($0.size)\t\(hex: node.Left)\t\(hex: node.Right)")
      }
    }
  }
}
