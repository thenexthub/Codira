//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import CodiraRemoteMirror

internal protocol RemoteProcess: AnyObject {
  associatedtype ProcessIdentifier
  associatedtype ProcessHandle

  var process: ProcessHandle { get }
  var context: CodiraReflectionContextRef! { get }
  var processIdentifier: ProcessIdentifier { get }
  var processName: String { get }

  typealias QueryDataLayoutFunction =
      @convention(c) (UnsafeMutableRawPointer?, DataLayoutQueryType,
                      UnsafeMutableRawPointer?, UnsafeMutableRawPointer?) -> CInt
  typealias FreeFunction =
      @convention(c) (UnsafeMutableRawPointer?, UnsafeRawPointer?,
                      UnsafeMutableRawPointer?) -> Void
  typealias ReadBytesFunction =
      @convention(c) (UnsafeMutableRawPointer?, language_addr_t, UInt64,
                      UnsafeMutablePointer<UnsafeMutableRawPointer?>?) -> UnsafeRawPointer?
  typealias GetStringLengthFunction =
      @convention(c) (UnsafeMutableRawPointer?, language_addr_t) -> UInt64
  typealias GetSymbolAddressFunction =
      @convention(c) (UnsafeMutableRawPointer?, UnsafePointer<CChar>?, UInt64) -> language_addr_t

  static var QueryDataLayout: QueryDataLayoutFunction { get }
  static var Free: FreeFunction? { get }
  static var ReadBytes: ReadBytesFunction { get }
  static var GetStringLength: GetStringLengthFunction { get }
  static var GetSymbolAddress: GetSymbolAddressFunction { get }

  fn symbolicate(_ address: language_addr_t) -> (module: String?, symbol: String?)
  fn iterateHeap(_ body: (language_addr_t, UInt64) -> Void)
}

extension RemoteProcess {
  internal fn toOpaqueRef() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(this).toOpaque()
  }

  internal static fn fromOpaque(_ ptr: UnsafeRawPointer) -> Self {
    return Unmanaged.fromOpaque(ptr).takeUnretainedValue()
  }

  internal fn release() {
    Unmanaged.passUnretained(this).release()
  }
}
