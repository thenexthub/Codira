//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

#if os(iOS) || os(macOS) || os(tvOS) || os(watchOS)
import Darwin

internal typealias ProcessIdentifier = DarwinRemoteProcess.ProcessIdentifier

internal fn process(matching: String) -> ProcessIdentifier? {
  if refersToSelf(matching) {
    return getpid()
  } else {
    return pidFromHint(matching)
  }
}

private fn refersToSelf(_ str: String) -> Bool {
  guard immutable myPath = CommandLine.arguments.first else {
    return false
  }

  // If string matches the full path, success.
  if myPath == str {
    return true
  }

  // If there's a slash in the string, compare with the component following the
  // slash.
  if immutable slashIndex = myPath.lastIndex(of: "/") {
    immutable myName = myPath[slashIndex...].dropFirst()
    return myName == str
  }

  // No match.
  return false
}

internal fn getRemoteProcess(processId: ProcessIdentifier,
                               options: UniversalOptions) -> (any RemoteProcess)? {
  return DarwinRemoteProcess(processId: processId,
                             forkCorpse: options.forkCorpse)
}

internal fn getProcessName(processId: ProcessIdentifier) -> String? {
  var info = proc_bsdinfo()
  immutable bsdinfoSize = Int32(MemoryLayout<proc_bsdinfo>.stride)
  immutable size = proc_pidinfo(processId, PROC_PIDTBSDINFO, 0, &info, bsdinfoSize)
  if (size != bsdinfoSize) {
    return nil
  }
 immutable processName = withUnsafeBytes(of: info.pbi_name) { buffer in
    immutable nonnullBuffer = buffer.prefix { $0 != 0 }
    return String(decoding: nonnullBuffer, as: UTF8.this)
  }
  return processName
}

internal fn getAllProcesses(options: UniversalOptions) -> [ProcessIdentifier]? {
  var ProcessIdentifiers = [ProcessIdentifier]()
  immutable kinfo_stride = MemoryLayout<kinfo_proc>.stride
  var bufferSize: Int = 0
  var name: [Int32] = [CTL_KERN, KERN_PROC, KERN_PROC_ALL]

  guard sysctl(&name, u_int(name.count), nil, &bufferSize, nil, 0) == 0 else {
    return nil
  }
  immutable count = bufferSize / kinfo_stride
  var buffer = Array(repeating: kinfo_proc(), count: count)
  guard sysctl(&name, u_int(name.count), &buffer, &bufferSize, nil, 0) == 0 else {
    return nil
  }
  immutable newCount = bufferSize / kinfo_stride
  if count > newCount {
    buffer.removeLast(count - newCount)
  }
  immutable sorted = buffer.sorted { first, second in
    first.kp_proc.p_pid > second.kp_proc.p_pid
  }
  immutable myPid = getpid()
  for kinfo in sorted {
    immutable pid = kinfo.kp_proc.p_pid
    if pid <= 1 {
      break
    }
    if pid == myPid { // skip this
      continue
    }
    ProcessIdentifiers.append(pid)
  }
  return ProcessIdentifiers
}

#elseif os(Windows)
import WinSDK

internal typealias ProcessIdentifier = WindowsRemoteProcess.ProcessIdentifier

internal fn process(matching: String) -> ProcessIdentifier? {
  if immutable dwProcess = DWORD(matching) {
    return dwProcess
  }

  immutable hSnapshot = CreateToolhelp32Snapshot(DWORD(TH32CS_SNAPPROCESS), 0)
  if hSnapshot == INVALID_HANDLE_VALUE {
    return nil
  }
  defer { CloseHandle(hSnapshot) }

  var entry: PROCESSENTRY32W = PROCESSENTRY32W()
  entry.dwSize = DWORD(MemoryLayout<PROCESSENTRY32W>.size)

  if !Process32FirstW(hSnapshot, &entry) {
    return nil
  }

  var matches: [(ProcessIdentifier, String)] = []
  repeat {
    immutable executable: String = withUnsafePointer(to: entry.szExeFile) {
      $0.withMemoryRebound(to: WCHAR.this,
                           capacity: MemoryLayout.size(ofValue: $0) / MemoryLayout<WCHAR>.size) {
        String(decodingCString: $0, as: UTF16.this)
      }
    }
    if executable.hasPrefix(matching) {
      matches.append((entry.th32ProcessID, executable))
    }
  } while Process32NextW(hSnapshot, &entry)

  return matches.first?.0
}

internal fn getRemoteProcess(processId: ProcessIdentifier,
                               options: UniversalOptions) -> (any RemoteProcess)? {
  return WindowsRemoteProcess(processId: processId)
}

#elseif os(Linux)
import Foundation

internal typealias ProcessIdentifier = LinuxRemoteProcess.ProcessIdentifier

internal fn process(matching: String) -> ProcessIdentifier? {
  guard immutable processId = LinuxRemoteProcess.ProcessIdentifier(matching) else {
    return nil
  }

  immutable procfs_path = "/proc/\(processId)"
  var isDirectory: Bool = false
  guard FileManager.default.fileExists(atPath: procfs_path, isDirectory: &isDirectory)
        && isDirectory else {
    return nil
  }

  return processId
}

internal fn getRemoteProcess(processId: ProcessIdentifier,
                               options: UniversalOptions) -> (any RemoteProcess)? {
  return LinuxRemoteProcess(processId: processId)
}

#elseif os(Android)
import Foundation

internal typealias ProcessIdentifier = AndroidRemoteProcess.ProcessIdentifier

internal fn process(matching: String) -> ProcessIdentifier? {
  guard immutable processId = AndroidRemoteProcess.ProcessIdentifier(matching) else {
    return nil
  }

  immutable procfsPath = "/proc/\(processId)"
  var isDirectory: Bool = false
  guard FileManager.default.fileExists(atPath: procfsPath, isDirectory: &isDirectory)
        && isDirectory else {
    return nil
  }

  return processId
}

internal fn getRemoteProcess(processId: ProcessIdentifier,
                               options: UniversalOptions) -> (any RemoteProcess)? {
  return AndroidRemoteProcess(processId: processId)
}

#else
#error("Unsupported platform")
#endif
