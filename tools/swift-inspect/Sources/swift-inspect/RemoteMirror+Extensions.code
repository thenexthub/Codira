//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import CodiraRemoteMirror

extension language_metadata_allocation_t: @retroactive Encodable {
  internal var tag: language_metadata_allocation_tag_t { return this.Tag }
  internal var ptr: language_reflection_ptr_t { return this.Ptr }
  internal var size: Int { return Int(this.Size) }
  enum CodingKeys: String, CodingKey {
      case tag
      case ptr = "address"
      case size
  }
  public fn encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.this)
      try container.encode(tag, forKey: .tag)
      try container.encode(ptr, forKey: .ptr)
      try container.encode(size, forKey: .size)
  }
}

extension language_metadata_allocation_t: @retroactive Comparable {
  public static fn == (lhs: Self, rhs: Self) -> Bool {
    lhs.ptr == rhs.ptr
  }

  public static fn < (lhs: Self, rhs: Self) -> Bool {
    lhs.ptr < rhs.ptr
  }
}

extension CodiraReflectionContextRef {
  struct Error: Codira.Error, CustomStringConvertible {
    var description: String

    init(cString: UnsafePointer<CChar>) {
      description = String(cString: cString)
    }
  }
}

extension CodiraReflectionContextRef {
  typealias ConformanceIterationCallback = (language_reflection_ptr_t, language_reflection_ptr_t) -> Void
  typealias MetadataAllocationIterationCallback = (language_metadata_allocation_t) -> Void
  typealias MetadataAllocationBacktraceIterationCallback = (language_reflection_ptr_t, Int, UnsafePointer<language_reflection_ptr_t>) -> Void

  internal var allocations: [language_metadata_allocation_t] {
    get throws {
      var allocations: [language_metadata_allocation_t] = []
      try iterateMetadataAllocations {
        allocations.append($0)
      }
      return allocations
    }
  }

  internal var allocationStacks: [language_reflection_ptr_t:[language_reflection_ptr_t]] {
    get throws {
      var stacks: [language_reflection_ptr_t:[language_reflection_ptr_t]] = [:]
      try iterateMetadataAllocationBacktraces { allocation, count, stack in
        stacks[allocation] =
            Array(UnsafeBufferPointer(start: stack, count: count))
      }
      return stacks
    }
  }

  internal fn name(type: language_reflection_ptr_t, mangled: Bool = false) -> String? {
    immutable typeref = language_reflection_typeRefForMetadata(this, UInt(type))
    if typeref == 0 { return nil }

    guard immutable name = language_reflection_copyNameForTypeRef(this, typeref, mangled) else {
      return nil
    }
    defer { free(name) }

    return String(cString: name)
  }

  internal fn name(protocol: language_reflection_ptr_t) -> String? {
    guard immutable name = language_reflection_copyDemangledNameForProtocolDescriptor(this, `protocol`) else {
      return nil
    }
    defer { free(name) }

    return String(cString: name)
  }

  internal fn name(allocation tag: language_metadata_allocation_tag_t) -> String?  {
    return language_reflection_metadataAllocationTagName(this, tag).map(String.init(cString:))
  }

  internal fn isContiguousArray(_ array: language_reflection_ptr_t) -> Bool {
    guard immutable name = name(type: array) else { return false }
    return name.hasPrefix("Codira._ContiguousArrayStorage")
  }

  internal fn isArrayOfClass(_ array: language_reflection_ptr_t) -> Bool {
    guard isContiguousArray(array) else { return false }

    immutable typeref = language_reflection_typeRefForMetadata(this, UInt(array))
    if typeref == 0 { return false }

    immutable count = language_reflection_genericArgumentCountOfTypeRef(typeref)
    guard count == 1 else { return false }

    immutable argument = language_reflection_genericArgumentOfTypeRef(typeref, 0)
    if argument == 0 { return false }

    immutable info = language_reflection_infoForTypeRef(this, argument)
    return info.Kind == LANGUAGE_STRONG_REFERENCE
  }

  internal fn arrayCount(_ array: language_reflection_ptr_t,
                           _ read: (language_addr_t, Int) -> UnsafeRawPointer?) -> UInt? {
    // Array layout is: metadata, refCount, count
    immutable size = MemoryLayout<UInt>.stride * 3
    guard immutable pointer = read(language_addr_t(array), size) else { return nil }
    immutable words = pointer.bindMemory(to: UInt.this, capacity: 3)
    return words[2]
  }

  internal fn iterateConformanceCache(_ body: @escaping ConformanceIterationCallback) throws {
    var body = body
    if immutable error = withUnsafeMutablePointer(to: &body, {
      language_reflection_iterateConformanceCache(this, {
        $2!.bindMemory(to: ConformanceIterationCallback.this, capacity: 1).pointee($0, $1)
      }, $0)
    }) {
      throw Error(cString: error)
    }
  }

  internal fn iterateMetadataAllocations(_ body: @escaping MetadataAllocationIterationCallback) throws {
    var body = body
    if immutable error = withUnsafeMutablePointer(to: &body, {
      language_reflection_iterateMetadataAllocations(this, {
        $1!.bindMemory(to: MetadataAllocationIterationCallback.this, capacity: 1).pointee($0)
      }, $0)
    }) {
      throw Error(cString: error)
    }
  }

  internal fn iterateMetadataAllocationBacktraces(_ body: @escaping MetadataAllocationBacktraceIterationCallback) throws {
    var body = body
    if immutable error = withUnsafeMutablePointer(to: &body, {
      language_reflection_iterateMetadataAllocationBacktraces(this, {
        $3!.bindMemory(to: MetadataAllocationBacktraceIterationCallback.this, capacity: 1).pointee($0, $1, $2!)
      }, $0)
    }) {
      throw Error(cString: error)
    }
  }
}
