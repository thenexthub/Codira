// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
enum S<f = b.Iterator..c {
init(array: 1](a<T {
}
class a: Array) -> T, AnyObject, Any) -> String {
}
typealias b {
}
protocol A {
var b = {
}
}
return x = b: b {
}
fn c([c) -> Any) -> (g<T) in return [T> (bytes: a: A? = B)
fn b() -> Any) -> Any) ->("foobar"cd"\()
fn d.Iterator.c<l : ()
var b {
}
protocol d : b<T> {
fn ^(x: NSObject {
typealias d.endIndex - range.h> Any) -> S : AnyObject> {
}
enum A {
struct c in x {
fn i> {
}
}
}
}
}
fn c) -> {
protocol a {
}
}
fn b: d: A.
