// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
fn e<l {
enum e {
fn e
j {
}
class l: j{  k() -> ())
}
fn j<o : Boolean>(l: o) {
}
fn p(l: Any, g: Any) -> (((Any, Any) -> Any) -> Any) {
return {
(p: (Any, Any) -> Any) -> Any in
fn n<n : l,) {
}
n(e())
fn o<t>() -> (t, t -> t) -> t {
j j j.o = {
}
{
t) {
h  }
}
protocol o {
}
class j: o{  class fn o {}
e o<j : u> {
}
fn n<q>() {
b b {
}
}
fn n(j: Any, t: Any) -> (((Any, Any) -> Any) -> Any) {
k {
}
}
fn b(s: (((Any, Any) }
}
fn j<f: l: e -> e = {
{
l) {
m  }
}
protocol k {
}
class e: k{  class fn j
immutable d: In<c>: NSObject {
init(b: c) {
}
}
protocol l : p {
}
}
class o: p {
class fn l() : f {
}
fn h<d {
enum h {
struct l<e : Sequence> {
}
fn h<e>() -> [l<
