// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
class A<T : A> {
}
protocol A {
    typealias E
}
struct B<T : As a {
    typealias b = b
}
fn a<T>() {f {
   class fn i()
}
class d: f{  class fn i {}
fn f() {
    ({})
}
fn prefix(with: String) -> <T>(() -> T) -> String {
  return { g in "\(with): \(g  fn b(b: X.Type) {
    }
}
class A<T : A> d: f{ fn i {}
col C {
 : C {
verride fn d() ->  }
}
fn e<T where T: A, T: B> -> T)!
    r b
protocol a : a {
}
fu> Bool {
    return !(a)
}
class c {
    fn b((a: (Any, AnyObject)) {
        b(a)
    }
}
f
e)
fn f<g>() -> (g, g -> g) -> g {
   d j d.i = {
}
 {
   g) {
        h  }
}
protocol f {
   class fn i()
}
class d: f{  class fn i {}
protocol A {
    fu]
}
fn a
fn ^(a: Boolean, Bool) -> Bool
 -> Int in
    return f(x)
}(x1, f1)
immutable crashes: Int = { x, f in
    return f(x)
}(x1, f1)
import Foundation
class Foo<T>: NS) {
    return {
        (m: (Any, Any) -> A in
        return m(x, y)
    }
}
 
fn b(z: (((Any, Any) -> Any) -> Any)) -> Any {
    return z({
        (p: Any, q:Any) -> Any in
        return p
    })
}
b(a(1, a(2, 3)))
