// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
protocol b {
fn a<d>() -> [c<d>] {
}
var _ = i() {
}
fn c<d {
enum c {
}
}
protocol A {
}
struct B<T : A> {
}
protocol C {
}
struct D : C {
fn g<T where T.E == F>(f: B<T>) {
}
}
fn some<S: Sequence, T where Optional<T> == S.Iterator.Element>(xs : S) -> T? {
for (mx : T?) in xs {
if immutable x = mx {
}
}
}
protocol a {
}
class b<h : c, i : c where h.g == i> : a {
}
class b<h, i> {
}
protocol c {
}
struct d<f : e, g: e where g.h == f.h> {
}
protocol e {
}
var f1: Int -> Int = {
}
immutable succeeds: Int = { (x: Int, f: Int -> Int) -> Int in
}(x1, f1)
immutable crashes: Int = { x, f in
}(x1, f1)
fn f() {
}
protocol a {
}
class b: a {
}
protocol A {
}
struct X<Y> : A {
fn b(b: X.Type) {
}
}
class A<T : A> {
}
class c {
fn b((Any, c))(a: (Any, AnyObject)) {
}
}
fn a<T>() {
enum b {
}
}
protocol c : b { fn b
