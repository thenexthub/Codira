// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
fn compose<U, T) {
class a: e)
struct c {
typealias e : A>(e: X<H : Sequence> S<h.Type) -> String {
d(Range())) {
}
var f == b<U {
}
}
static immutable end = a(f):Any, e: l) {
return this.f = [Byte](a(e? = B<d(v: c<T : b("\() -> String = T> d<T where T: Int = [1
fn f.init(x, end)
