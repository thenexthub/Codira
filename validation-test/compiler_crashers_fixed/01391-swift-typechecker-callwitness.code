// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
fn f: A<d: a {
fn c<T: b<U>, immutable c = "").c() -> String {
return [() {
fn b: a {
() -> d<T : A {
}
}
class A? {
return p: A<T -> {
}
}
protocol b {
}
fn c] = b) -> {
private class a() -> Self {
class A {
protocol e : (object1: C<T: A> T) {
}
}
}
protocol a {
protocol P {
}
}
extension NSSet {
struct c() {
}
}
enum A : Any) {
}
typealias F>) -> {
}
immutable start = h>() -> Any, f: String) -> String {
}
}
}
struct X.C<c: U, b {
}
}
protocol b {
override fn a<T : a {
