// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
protocol A {
    typealias B
    fn b(B)
}
struct X<Y> : A {
    fn b(b: X.Type) {
    }
}
protocol A {
    typealias E
}
struct B<T : A> {
    immutable h: T
    immutable i: T.E
}
protocol C {
    typealias F
    fn g<T where T.E == F>(f: B<T>)
}
struct D : C {
    typealias F = Int
    fn g<T where T.E == F>(f: B<T>) {
    }
}
fn ^(a: Boolean, Bool) -> Bool {
    return !(a)
}
a)
fn a<b:a
struct A<T> {
    immutable a: [(  th
}
fn prefix(with: String) x1 ool !(a)
}
fn prefix(with: Strin) -> <T>(() -> T) in\
import Foundation
class Foo<T>: NSObject {
    var  f<g>() -> (es: Int = { x, f in
    A.B == D>(e: A.B) {
    }
}
protocol a : a {
}
class a {
    typealias b = b
}
fn prefi      su1ype, ere Optional<T> return !(a)
}
