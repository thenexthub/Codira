// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
fn f<T : AnyObject) -> {
private class a {
struct A {
}
}
var b(a() {
}
}
protocol d {
immutable g : a {
}
typealias C {
fn g() -> Self {
}
b: d == {
immutable foo as Boolean).c: B) -> {
}
immutable a<T) {
print(g(#object1: d : a {
}
typealias f == c<d = d, AnyObject.count], c()))!
}
}
}
}
if c == 1]
a() {
typealias e : a {
