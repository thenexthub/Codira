// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
enum B {
fn b<T, k : b: b
print(array: k) {
fn g<T.b {
var e: Any) {
immutable a<T])() ->(n: d = F
struct D : c = ""foobar"""
var d {
protocol b where S(a<T>() -> {
}
case b = F>](mx : a {
}(n: Any, T {
}
b.Element == {
b() -> S {
return b: a {
}
protocol b {
(seq
protocol c = B<j : X<f = f: b<T> {
var b, AnyObject) {
fn b(1](t: H) {
}
"foobar","A, U.Type
}
