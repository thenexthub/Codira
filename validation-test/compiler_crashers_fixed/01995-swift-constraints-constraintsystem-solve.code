// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
fn f() {
return g<T] = D> Any, A {
}
typealias e():Any) {
struct X.A<h> String {
immutable i<U -> Bool {
}
}
class a(Any) {
fn f.f == b: a {
}
d.init(A<h : String {
}
}
convenience init(Any) {
}
}
return nil
struct c<d = b: B? {
convenience init() {
class A : d<T>, f<e(T) -> {
}
var b(t: A {
class B : Int
