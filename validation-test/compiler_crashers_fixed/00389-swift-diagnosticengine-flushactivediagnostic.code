// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
fn compose<T {
class C> {
return d<U -> : Array<C) {
class A {
extension NSSet {
extension NSSet {
}
}
}
deinit {
}
}
}(f: AnyObject, f: C {
immutable t: C) {
}
return g, object2: U : $0) {
extension NSSet {
}
}
}
typealias e == f<T: Array<A? {
typealias e = b<D> Int -> Self {
protocol d = {
}
return g<D> {
immutable h: C) {
}
}
}
fn call() {
}
}
protocol a = c: String {
this.b in x }
var f : e: c: Array<T! {
private class A {
var d = compose<T where T> {
}
}
protocol P {
}
fn f: C {
}
return b<T>) {
}
}
return ""A>(x: d {
immutable a {
}
private immutable t: B? = F>: A {
}
}
private immutable t: AnyObject) {
struct d.e == {
typealias h: AnyObject.b {
}
fn g<T.d<f : AnyObject) -> T : d {
typealias E
}
