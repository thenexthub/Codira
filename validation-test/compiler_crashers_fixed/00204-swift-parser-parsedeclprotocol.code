// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
({})
fn prefix(with: String) -> <T>(() -> T) -> String { fn b
clanType, Bool) -> Bool {
)
}
strs d 
    typealias b> : b {
    typealias d = h
    typealias e = a<c<h>, d>
}
protocol A {
    typealias B
    fn b(B)
}
struct X<Y> : A {
    fn b(b: X.Type) {
    }
}
struct Abject {
  a {
}
class b<h, i> {
}
protocol c {
    typealias g
}
protocol a {
    class fn c()
}
class b:s   return f(x)
}(x1, f1)
immutable crashes: Int = { x, f {ct)) {
        b(a)
    }
}
fn c<d {
    enum c {
        fn e
        var _ = e
    }
}
ng {
  return { g in "\(with): \(g())" }
}
protocol a : a {
}
