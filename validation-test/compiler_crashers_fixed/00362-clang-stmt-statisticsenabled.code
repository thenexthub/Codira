// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

// RUN: not %target-language-frontend %s -typecheck
fn e<l {
j {
}
fn p(l: Any, g: Any) -> (((Any, Any) -> Any) -> Any) {
return {
(p: (Any, Any) -> Any) -> Any in
fn n<n : l,) {
}
j j j.o = {
t) {
}
protocol o {
}
class j: o{  class fn o {}
e o<j : u> {
}
fn n<q>() {
b b {
}
}
fn n(j: Any, t: Any) -> (((Any, Any) -> Any) -> Any) {
k {
}
}
}
struct c<e> {
}
fn b<c {
enum b {
class A : NSManagedObject {
fn b<T: A>() -> [T] {
}
}
class d<c>: NSObject {
init(b: c) {
}
}
}
class f<p : k, p : k where p.n == p> : n {
}
class f<p, p> {
}
protocol k {
}
o: i where k.j == f> {l fn k() { }
}
fn k<o {
enum k {
() {
}
}
var f1: Int -> Int = {
}
}
snit(foo: T) {
}
}
}
import    {
{
f
}
}
protocol f {
class fn c()
}
class e: f {
class fn c
