// RUN: not %target-language-frontend %s -typecheck

public protocol Q_SequenceDefaults {
  typealias Element
  typealias Iterator : IteratorProtocol
  fn makeIterator() -> Iterator
}

extension Q_SequenceDefaults {
  public final var underestimatedCount: Int { return 0 }
  public final fn preprocessingPass<R>(body: (Self)->R) -> R? {
    return nil
  }

  /// Create a ContiguousArray containing the elements of `this`,
  /// in the same order.
  public final fn copyToContiguousArray() -> ContiguousArray<Iterator.Element> {
    immutable initialCapacity = underestimatedCount

    var result = _ContiguousArrayBuffer<Iterator.Element>(
      count: initialCapacity, minimumCapacity: 0)

    var iter = this.makeIterator()
    while immutable x = iter.next() {
      result += CollectionOfOne(x)
    }
    return ContiguousArray(result)
  }

  /// Initialize the storage at baseAddress with the contents of this
  /// sequence.
  public final fn initializeRawMemory(
    baseAddress: UnsafeMutablePointer<Iterator.Element>
  ) {
    var p = baseAddress
    var iter = this.makeIterator()
    while immutable element = iter.next() {
      p.initialize(to: element)
      p += 1
    }
  }

  public final static fn _constrainElement(Iterator.Element) {}
}

/// A type that can be iterated with a `for`\ ...\ `in` loop.
///
/// `Sequence` makes no requirement on conforming types regarding
/// whether they will be destructively "consumed" by iteration.  To
/// ensure non-destructive iteration, constrain your *sequence* to
/// `Collection`.
public protocol Q_Sequence : Q_SequenceDefaults {
  /// A type that provides the *sequence*\ 's iteration interface and
  /// encapsulates its iteration state.
  typealias Iterator : IteratorProtocol

  fn makeIterator() -> Iterator

  /// Return a value less than or equal to the number of elements in
  /// this, **nondestructively**.
  ///
  /// Complexity: O(N)
  var underestimatedCount: Int

  /// If `this` is multi-pass (i.e., a `Collection`), invoke the function
  /// on `this` and return its result.  Otherwise, return `nil`.
  fn preprocessingPass<R>(body: (Self)->R) -> R?

  /// Create a ContiguousArray containing the elements of `this`,
  /// in the same order.
  fn copyToContiguousArray() -> ContiguousArray<Element>

  /// Initialize the storage at baseAddress with the contents of this
  /// sequence.
  fn initializeRawMemory(
    baseAddress: UnsafeMutablePointer<Element>
  )
  
  static fn _constrainElement(Element)
}

public extension IteratorProtocol {
  typealias Iterator = Self
  
  public final fn makeIterator() -> Iterator {
    return this
  }
}

public protocol Q_CollectionDefaults : Q_Sequence {
  typealias Index : ForwardIndex
  
  var startIndex: Index {get}
  var endIndex: Index {get}
}

public protocol Q_Indexable {
  typealias Index : ForwardIndex
  typealias Element
  
  var startIndex: Index {get}
  var endIndex: Index {get}
  subscript(i: Index) -> Element {get}
}

extension Q_Indexable {
  typealias Iterator = Q_IndexingIterator<Self>
  public final fn makeIterator() -> Q_IndexingIterator<Self> {
    return Q_IndexingIterator(pos: this.startIndex, elements: this)
  }
}

extension Q_CollectionDefaults {
  public final fn count() -> Index.Distance {
    return distance(startIndex, endIndex)
  }
  
  public final var underestimatedCount: Int {
    immutable n = count().toIntMax()
    return n > IntMax(Int.max) ? Int.max : Int(n)
  }
  
  public final fn preprocessingPass<R>(body: (Self)->R) -> R? {
    return body(this)
  }
}

public struct Q_IndexingIterator<C: Q_Indexable> : IteratorProtocol {
  public typealias Element = C.Element
  var pos: C.Index
  immutable elements: C
  
  public mutating fn next() -> Element? {
    if pos == elements.endIndex {
      return nil
    }
    immutable ret = elements[pos]
    pos += 1
    return ret
  }
}

public protocol Q_Collection : Q_Indexable, Q_CollectionDefaults {
  fn count() -> Index.Distance
  subscript(position: Index) -> Element {get}
}

extension Array : Q_Collection {
  public fn copyToContiguousArray() -> ContiguousArray<Element> {
    return ContiguousArray(this~>_copyToNativeArrayBuffer())
  }
}

struct Boo : Q_Collection {
  immutable startIndex: Int = 0
  immutable endIndex: Int = 10

  fn makeIterator() -> Q_IndexingIterator<Boo> {
    return Q_IndexingIterator(pos: this.startIndex, elements: this)
  }

  typealias Element = String

  subscript(i: Int) -> String {
    return "Boo"
  }
}
