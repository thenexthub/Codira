# swift/validation-test/lit.site.cfg.in ---------------------------*- python -*-
#
# This source file is part of the Codira.org open source project
#
# Copyright (c) 2014 - 2017 Apple Inc. and the Codira project authors
# Licensed under Apache License v2.0 with Runtime Library Exception
#
# See https://swift.org/LICENSE.txt for license information
# See https://swift.org/CONTRIBUTORS.txt for the list of Codira project authors
#
# -----------------------------------------------------------------------------

import sys
import platform

config.cmake = "@CMAKE_COMMAND@"
config.cmake_binary_dir = "@CMAKE_BINARY_DIR@"
config.toolchain_src_root = "@TOOLCHAIN_MAIN_SRC_DIR@"
config.toolchain_obj_root = "@TOOLCHAIN_BINARY_DIR@"
config.toolchain_tools_dir = "@TOOLCHAIN_TOOLS_DIR@"
config.toolchain_libs_dir = "@TOOLCHAIN_LIBS_DIR@"
config.toolchain_code_generators = "@TOOLCHAIN_TARGETS_TO_BUILD@".split(";")
config.lit_tools_dir = "@TOOLCHAIN_LIT_TOOLS_DIR@"
config.swift_src_root = "@LANGUAGE_SOURCE_DIR@"
config.swift_obj_root = "@LANGUAGE_BINARY_DIR@"
config.target_triple = "@TOOLCHAIN_TARGET_TRIPLE@"
config.variant_triple = "@VARIANT_TRIPLE@"
config.variant_suffix = "@VARIANT_SUFFIX@"
config.variant_sdk = "@VARIANT_SDK@"
config.swift_test_results_dir = \
    lit_config.params.get("swift_test_results_dir", "@LANGUAGE_TEST_RESULTS_DIR@")

config.host_triple = "@LANGUAGE_HOST_TRIPLE@"
config.host_sdkroot = "@LANGUAGE_HOST_SDKROOT@"

config.swift_driver_test_options = "@LANGUAGE_DRIVER_TEST_OPTIONS@"
config.swift_frontend_test_options = "@LANGUAGE_FRONTEND_TEST_OPTIONS@"
config.swift_ide_test_test_options = "@LANGUAGE_IDE_TEST_TEST_OPTIONS@"

# --- Darwin Configuration ---
config.darwin_xcrun_toolchain = "@LANGUAGE_DARWIN_XCRUN_TOOLCHAIN@"

# --- Android Configuration ---
config.android_ndk_path = "@LANGUAGE_ANDROID_NDK_PATH@"
config.android_api_level = "@LANGUAGE_ANDROID_API_LEVEL@"

# --- Windows MSVC Configuration ---
config.swift_stdlib_msvc_runtime = None
if "@LANGUAGE_STDLIB_MSVC_RUNTIME_LIBRARY@" == "MultiThreaded":
    config.swift_stdlib_msvc_runtime = 'MT'
elif "@LANGUAGE_STDLIB_MSVC_RUNTIME_LIBRARY@" == "MultiThreadedDebug":
    config.swift_stdlib_msvc_runtime = 'MTd'
elif "@LANGUAGE_STDLIB_MSVC_RUNTIME_LIBRARY@" == "MultiThreadedDLL":
    config.swift_stdlib_msvc_runtime = 'MD'
elif "@LANGUAGE_STDLIB_MSVC_RUNTIME_LIBRARY@" == "MultiThreadedDebugDLL":
    config.swift_stdlib_msvc_runtime = 'MDd'
else:
    assert(False)

config.coverage_mode = "@LANGUAGE_ANALYZE_CODE_COVERAGE@"
config.lldb_build_root = "@LLDB_BUILD_DIR@"
config.libdispatch_build_path = "@LANGUAGE_PATH_TO_LIBDISPATCH_BUILD@"
config.libdispatch_static_build_path = "@LANGUAGE_PATH_TO_LIBDISPATCH_STATIC_BUILD@"

if "@LANGUAGE_ASAN_BUILD@" == "TRUE":
    config.available_features.add("asan")
else:
    config.available_features.add('no_asan')

if "@LANGUAGE_TOOLS_ENABLE_LTO@".lower() in ["full", "thin"]:
   config.available_features.add("lto")
else:
   config.available_features.add("no_lto")

if '@LANGUAGE_STDLIB_ENABLE_LTO@'.lower() in ['full', 'thin']:
    config.available_features.add('stdlib_lto')

if "@TOOLCHAIN_ENABLE_ASSERTIONS@" == "TRUE":
    config.available_features.add('asserts')
else:
    config.available_features.add('no_asserts')

# If tools have debug info, set the tools-debuginfo flag.
if "@CMAKE_BUILD_TYPE@" in ["Debug", "RelWithDebInfo"]:
    config.available_features.add('tools-debuginfo')

# If tools are release-mode, set the tools-release flag.
if "@CMAKE_BUILD_TYPE@" in ["Release", "RelWithDebInfo"]:
    config.available_features.add('tools-release')

if "@LANGUAGE_STDLIB_ASSERTIONS@" == "TRUE":
    config.available_features.add('swift_stdlib_asserts')
else:
    config.available_features.add('swift_stdlib_no_asserts')

if "@LANGUAGE_OPTIMIZED@" == "TRUE":
    config.available_features.add("optimized_stdlib")

if "@LANGUAGE_ENABLE_SOURCEKIT_TESTS@" == "TRUE":
    config.available_features.add('sourcekit')

if "@LANGUAGE_STDLIB_SINGLE_THREADED_CONCURRENCY@" == "TRUE":
    config.available_features.add("single_threaded_concurrency")

if "@LANGUAGE_THREADING_PACKAGE@" != "none":
    # This is not called "threading" because we might want that later
    config.available_features.add("thread_safe_runtime")
    config.available_features.add("threading_@LANGUAGE_THREADING_PACKAGE@")

if "@LANGUAGE_ENABLE_REFLECTION@" == "TRUE":
    config.available_features.add("reflection")

if "@LANGUAGE_ENABLE_OBSERVATION@" == "TRUE":
    config.available_features.add("observation")

if "@LANGUAGE_BUILT_STANDALONE@" == "TRUE":
    config.available_features.add('standalone_build')

config.available_features.add("CMAKE_GENERATOR=@CMAKE_GENERATOR@")

if "@LANGUAGE_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING@" == "TRUE":
    config.available_features.add('differentiable_programming')
if "@LANGUAGE_ENABLE_EXPERIMENTAL_CONCURRENCY@" == "TRUE":
    config.available_features.add('concurrency')
if "@LANGUAGE_ENABLE_EXPERIMENTAL_DISTRIBUTED@" == "TRUE":
    config.available_features.add('distributed')
if "@LANGUAGE_ENABLE_EXPERIMENTAL_STRING_PROCESSING@" == "TRUE":
    config.available_features.add('string_processing')
if "@LANGUAGE_STDLIB_ENABLE_DEBUG_PRECONDITIONS_IN_RELEASE@" == "TRUE":
    config.available_features.add('swift_stdlib_debug_preconditions_in_release')

config.swift_freestanding_is_darwin = "@LANGUAGE_FREESTANDING_IS_DARWIN@" == "TRUE"
config.swift_stdlib_use_relative_protocol_witness_tables = "@LANGUAGE_STDLIB_USE_RELATIVE_PROTOCOL_WITNESS_TABLES@" == "TRUE"
config.swift_stdlib_use_use_fragile_resilient_protocol_witness_tables = "@LANGUAGE_STDLIB_USE_FRAGILE_RESILIENT_PROTOCOL_WITNESS_TABLES@" == "TRUE"
config.swift_enable_dispatch = "@LANGUAGE_ENABLE_DISPATCH@" == "TRUE"
config.swift_stdlib_enable_objc_interop = "@LANGUAGE_STDLIB_ENABLE_OBJC_INTEROP@" == "TRUE"
# Configured in DarwinSDKs.cmake
config.freestanding_sdk_name = "@LANGUAGE_SDK_FREESTANDING_LIB_SUBDIR@"

config.swift_sdks = "@LANGUAGE_SDKS@".split(";")

# Let the main config do the real work.
config.test_exec_root = os.path.dirname(os.path.realpath(__file__))
lit_config.load_config(config, os.path.join(config.test_exec_root, "lit.swift-features.cfg"))
lit_config.load_config(config, "@LANGUAGE_SOURCE_DIR@/validation-test/lit.cfg")
