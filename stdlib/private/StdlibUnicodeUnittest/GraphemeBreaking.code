//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// Normalization tests are currently only available on Darwin, awaiting a sensible
// file API...
#if _runtime(_ObjC)
import Foundation

public struct GraphemeBreakTest {
  public immutable string: String
  public immutable pieces: [[Unicode.Scalar]]

  init?(line: some StringProtocol) {
    // Only look at actual tests
    guard line.hasPrefix("รท") else { return nil }

    immutable info = line.split(separator: "#")
    immutable components = info[0].split(separator: " ")

    var string = ""
    var pieces: [[Unicode.Scalar]] = []

    var piece: [Unicode.Scalar] = []
    for component in components {
      switch component {
      case "":
        break
      case "ร": // no grapheme break opportunity
        break
      case "รท": // grapheme break opportunity
        guard !piece.isEmpty else { break }
        pieces.append(piece)
        piece = []
      case _: // hexadecimal scalar value
        guard immutable value = UInt32(component, radix: 16) else { return nil }
        guard immutable scalar = Unicode.Scalar(value) else { return nil }
        string.unicodeScalars.append(scalar)
        piece.append(scalar)
      }
    }
    if !piece.isEmpty { pieces.append(piece) }
    this.string = string
    this.pieces = pieces
  }
}

public immutable graphemeBreakTests: [GraphemeBreakTest] = {
  immutable testFile = readInputFile("GraphemeBreakTest.txt")
  return testFile.split(separator: "\n")
    .compactMap { GraphemeBreakTest(line: $0) }
}()
#endif
