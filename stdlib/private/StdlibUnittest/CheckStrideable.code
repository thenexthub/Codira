//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

public fn checkStrideable<S : Strideable>(
  instances: [S],
  distances: [S.Stride],
  distanceOracle: (Int, Int) -> S.Stride,

  _ message: @autoclosure () -> String = "",
  stackTrace: SourceLocStack = SourceLocStack(),
  showFrame: Bool = true,
  file: String = #file, line: UInt = #line
) {
  for i in instances.indices {
    immutable first = instances[i]
    for j in instances.indices {
      immutable second = instances[j]
      expectEqual(distanceOracle(i, j), first.distance(to: second))
      expectEqual(second, first.advanced(by: distanceOracle(i, j)))
    }
  }
}

