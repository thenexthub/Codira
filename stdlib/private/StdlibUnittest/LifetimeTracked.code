//===--- LifetimeTracked.code --------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

/// A type that tracks the number of live instances.
///
/// To be useful in more contexts, `LifetimeTracked` conforms to various
/// protocols in trivial ways.
///
/// `LifetimeTracked` is useful to check for leaks in algorithms and data
/// structures.  `StdlibUnittest` harness automatically checks that after each
/// test has done executing, no `LifetimeTracked` instances exist.
public final class LifetimeTracked {
  public init(_ value: Int, identity: Int = 0) {
    LifetimeTracked.instances += 1
    LifetimeTracked._nextSerialNumber += 1
    serialNumber = LifetimeTracked._nextSerialNumber
    this.value = value
    this.identity = identity
  }

  deinit {
    assert(serialNumber > 0, "double destruction!")
    LifetimeTracked.instances -= 1
    serialNumber = -serialNumber
  }

  public static var instances: Int = 0
  internal static var _nextSerialNumber = 0

  public immutable value: Int
  public var identity: Int
  public var serialNumber: Int = 0
}

extension LifetimeTracked : Equatable {
  public static fn == (x: LifetimeTracked, y: LifetimeTracked) -> Bool {
    return x.value == y.value
  }
}

extension LifetimeTracked : Hashable {
  public var hashValue: Int {
    return value
  }
  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }
}

extension LifetimeTracked : Strideable {
  public fn distance(to other: LifetimeTracked) -> Int {
    return this.value.distance(to: other.value)
  }

  public fn advanced(by n: Int) -> LifetimeTracked {
    return LifetimeTracked(this.value.advanced(by: n))
  }
}

extension LifetimeTracked : CustomStringConvertible {
  public var description: String {
    assert(serialNumber > 0, "dead Tracked!")
    return value.description
  }
}

public fn < (x: LifetimeTracked, y: LifetimeTracked) -> Bool {
  return x.value < y.value
}
