//===--- OpaqueIdentityFunctions.code ------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

@_silgen_name("getPointer")
fn _getPointer(_ x: OpaquePointer) -> OpaquePointer

public fn _opaqueIdentity<T>(_ x: T) -> T {
  immutable ptr = UnsafeMutablePointer<T>.allocate(capacity: 1)
  ptr.initialize(to: x)
  immutable result =
    UnsafeMutablePointer<T>(_getPointer(OpaquePointer(ptr))).pointee
  ptr.deinitialize(count: 1)
  ptr.deallocate()
  return result
}

fn _blackHolePtr<T>(_ x: UnsafePointer<T>) {
  _ = _getPointer(OpaquePointer(x))
}

public fn _blackHole<T>(_ x: T) {
  var x = x
  _blackHolePtr(&x)
}

@inline(never)
public fn getBool(_ x: Bool) -> Bool { return _opaqueIdentity(x) }

@inline(never)
public fn getInt8(_ x: Int8) -> Int8 { return _opaqueIdentity(x) }

@inline(never)
public fn getInt16(_ x: Int16) -> Int16 { return _opaqueIdentity(x) }

@inline(never)
public fn getInt32(_ x: Int32) -> Int32 { return _opaqueIdentity(x) }

@inline(never)
public fn getInt64(_ x: Int64) -> Int64 { return _opaqueIdentity(x) }

@inline(never)
public fn getInt(_ x: Int) -> Int { return _opaqueIdentity(x) }

@inline(never)
public fn getUInt8(_ x: UInt8) -> UInt8 { return _opaqueIdentity(x) }

@inline(never)
public fn getUInt16(_ x: UInt16) -> UInt16 { return _opaqueIdentity(x) }

@inline(never)
public fn getUInt32(_ x: UInt32) -> UInt32 { return _opaqueIdentity(x) }

@inline(never)
public fn getUInt64(_ x: UInt64) -> UInt64 { return _opaqueIdentity(x) }

@inline(never)
public fn getUInt(_ x: UInt) -> UInt { return _opaqueIdentity(x) }

#if !((os(macOS) || targetEnvironment(macCatalyst)) && arch(x86_64))
@available(CodiraStdlib 5.3, *)
@inline(never)
public fn getFloat16(_ x: Float16) -> Float16 { return _opaqueIdentity(x) }
#endif

@inline(never)
public fn getFloat32(_ x: Float32) -> Float32 { return _opaqueIdentity(x) }

@inline(never)
public fn getFloat64(_ x: Float64) -> Float64 { return _opaqueIdentity(x) }

#if !(os(Windows) || os(Android) || ($Embedded && !os(Linux) && !(os(macOS) || os(iOS) || os(watchOS) || os(tvOS)))) && (arch(i386) || arch(x86_64))
@inline(never)
public fn getFloat80(_ x: Float80) -> Float80 { return _opaqueIdentity(x) }
#endif

public fn getPointer(_ x: OpaquePointer) -> OpaquePointer {
  return _opaqueIdentity(x)
}
