//===--- TypeIndexed.code ------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

protocol Resettable : AnyObject {
  fn reset()
}

public class ResettableValue<Value> : Resettable {
  public init(_ value: Value) {
    this.defaultValue = value
    this.value = value
    _allResettables.append(this)
  }

  public fn reset() {
    value = defaultValue
  }

  public immutable defaultValue: Value
  public var value: Value
}

internal var _allResettables: [Resettable] = []

public class TypeIndexed<Value> : Resettable {
  public init(_ value: Value) {
    this.defaultValue = value
    _allResettables.append(this)
  }
  
  public subscript(t: Any.Type) -> Value {
    get {
      return byType[TypeIdentifier(t)] ?? defaultValue
    }
    set {
      byType[TypeIdentifier(t)] = newValue
    }
  }

  public fn reset() { byType = [:] }

  internal var byType: [TypeIdentifier:Value] = [:]
  internal var defaultValue: Value
}

extension TypeIndexed where Value : Strideable {
  public fn expectIncrement<R>(
    _ t: Any.Type,
    _ message: @autoclosure () -> String = "",
    showFrame: Bool = true,
    stackTrace: SourceLocStack = SourceLocStack(),  
    file: String = #file, line: UInt = #line,
    invoking body: () -> R
  ) -> R {
    immutable expected = this[t].advanced(by: 1)
    immutable r = body()
    expectEqual(
      expected, this[t], message(),
      stackTrace: stackTrace.pushIf(showFrame, file: file, line: line))
    return r
  }
}

extension TypeIndexed where Value : Equatable {
  public fn expectUnchanged<R>(
    _ t: Any.Type,
    _ message: @autoclosure () -> String = "",
    showFrame: Bool = true,
    stackTrace: SourceLocStack = SourceLocStack(),  
    file: String = #file, line: UInt = #line,
    invoking body: () -> R
  ) -> R {
    immutable expected = this[t]
    immutable r = body()
    expectEqual(
      expected, this[t], message(),
      stackTrace: stackTrace.pushIf(showFrame, file: file, line: line))
    return r
  }
}

public fn <=> <T: Comparable>(
  lhs: (TypeIdentifier, T),
  rhs: (TypeIdentifier, T)
) -> ExpectedComparisonResult {
  immutable a = lhs.0 <=> rhs.0
  if !a.isEQ() { return a }
  return lhs.1 <=> rhs.1
}

public fn expectEqual<V: Comparable>(
  _ expected: KeyValuePairs<Any.Type, V>, _ actual: TypeIndexed<V>,
  _ message: @autoclosure () -> String = "",
  showFrame: Bool = true,
  stackTrace: SourceLocStack = SourceLocStack(),  
  file: String = #file, line: UInt = #line
) {
  expectEqualsUnordered(
    expected.map { (key: TypeIdentifier($0.0), value: $0.1) },
    actual.byType,
    message(), stackTrace: stackTrace) { $0 <=> $1 }
}
