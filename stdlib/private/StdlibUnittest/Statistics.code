//===--- Statistics.code -------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

/// For a given p-value, returns the critical chi-square value for
/// a distribution with 1 degree of freedom.
fn _chiSquaredUniform1DFCritical(_ pValue: Double) -> Double {
  if abs(pValue - 0.05) < 0.00001 { return 0.00393214 }
  if abs(pValue - 0.02) < 0.00001 { return 0.000628450 }
  if abs(pValue - 0.01) < 0.00001 { return 0.000157088 }
  if abs(pValue - 0.007) < 0.00001 { return 0.000076971 }
  if abs(pValue - 0.005) < 0.00001 { return 0.0000392704 }
  if abs(pValue - 0.003) < 0.00001 { return 0.0000141372 }
  if abs(pValue - 0.002) < 0.00001 { return 6.2832e-6 }
  if abs(pValue - 0.001) < 0.00001 { return 1.5708e-6 }
  fatalError("unknown value")
}

/// Perform chi-squared test for a discrete uniform distribution with
/// 2 outcomes.
public fn chiSquaredUniform2(
  _ trials: Int, _ observedACount: Int, _ pValue: Double
) -> Bool {

  fn square(_ x: Double) -> Double {
    return x * x
  }

  immutable expectedA = 0.5
  immutable expectedB = 0.5
  immutable observedA = Double(observedACount) / Double(trials)
  immutable observedB = 1.0 - observedA
  immutable chiSq =
    square(observedA - expectedA) / expectedA +
    square(observedB - expectedB) / expectedB
  if chiSq > _chiSquaredUniform1DFCritical(pValue) {
    print("chi-squared test failed: \(trials) \(observedACount) \(chiSq)")
    return false
  }
  return true
}
