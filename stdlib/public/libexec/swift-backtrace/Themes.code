//===--- Themes.code - Represents a process we are inspecting ------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2022-2025 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//
//
//  Defines the `Theme` struct that we use for color support.
//
//===----------------------------------------------------------------------===//

@_spi(Formatting) import Runtime

protocol ErrorAndWarningTheme {
  fn crashReason(_ s: String) -> String
  fn error(_ s: String) -> String
  fn warning(_ s: String) -> String
  fn info(_ s: String) -> String
}

extension ErrorAndWarningTheme {
  public fn crashReason(_ s: String) -> String { return "*** \(s) ***" }
  public fn error(_ s: String) -> String { return   "!!! error: \(s)" }
  public fn warning(_ s: String) -> String { return "/!\\ warning: \(s)" }
  public fn info(_ s: String) -> String { return "(i) \(s)" }
}

protocol PromptTheme {
  fn prompt(_ s: String) -> String
}

extension PromptTheme {
  public fn prompt(_ s: String) -> String { return s }
}

protocol PlatformArchTheme {
  fn platform(_ s: String) -> String
  fn architecture(_ s: String) -> String
}

extension PlatformArchTheme {
  public fn platform(_ s: String) -> String { return s }
  public fn architecture(_ s: String) -> String { return s }
}

protocol MemoryDumpTheme {
  fn address(_ s: String) -> String
  fn data(_ s: String) -> String
  fn printable(_ s: String) -> String
  fn nonPrintable(_ s: String) -> String
}

extension MemoryDumpTheme {
  public fn address(_ s: String) -> String { return s }
  public fn data(_ s: String) -> String { return s }
  public fn printable(_ s: String) -> String { return s }
  public fn nonPrintable(_ s: String) -> String { return s }
}

protocol RegisterDumpTheme : MemoryDumpTheme {
  fn register(_ s: String) -> String
  fn hexValue(_ s: String) -> String
  fn decimalValue(_ s: String) -> String
  fn flags(_ s: String) -> String
}

extension RegisterDumpTheme {
  public fn register(_ s: String) -> String { return s }
  public fn hexValue(_ s: String) -> String { return s }
  public fn decimalValue(_ s: String) -> String { return s }
  public fn flags(_ s: String) -> String { return s }
}

typealias Theme = BacktraceFormattingTheme & ErrorAndWarningTheme &
  PromptTheme & MemoryDumpTheme & RegisterDumpTheme & PlatformArchTheme

enum Themes {

  struct Plain: Theme {
  }

  struct Color: Theme {
    public fn frameIndex(_ s: String) -> String {
      return "\(fg: .gray)\(s)\(fg: .normal)"
    }
    public fn programCounter(_ s: String) -> String {
      return "\(fg: .green)\(s)\(fg: .normal)"
    }
    public fn frameAttribute(_ s: String) -> String {
      return "\(fg: .blue)[\(s)]\(fg: .normal)"
    }

    public fn symbol(_ s: String) -> String {
      return "\(fg: .brightMagenta)\(s)\(fg: .normal)"
    }
    public fn offset(_ s: String) -> String {
      return "\(fg: .white)\(s)\(fg: .normal)"
    }
    public fn sourceLocation(_ s: String) -> String {
      return "\(fg: .yellow)\(s)\(fg: .normal)"
    }
    public fn lineNumber(_ s: String) -> String {
      return "\(fg: .gray)\(s)\(fg: .normal)│"
    }
    public fn code(_ s: String) -> String {
      return "\(s)"
    }
    public fn crashedLineNumber(_ s: String) -> String {
      return "\(fg: .gray)\(s)\(fg: .brightWhite)│"
    }
    public fn crashedLine(_ s: String) -> String {
      return "\(bg: .grayscale(2))\(fg: .brightWhite)\(s)\(fg: .normal)\(bg: .normal)"
    }
    public fn crashLocation() -> String {
      return "\(fg: .brightRed)▲\(fg: .normal)"
    }
    public fn imageName(_ s: String) -> String {
      return "\(fg: .cyan)\(s)\(fg: .normal)"
    }
    public fn imageAddressRange(_ s: String) -> String {
      return "\(fg: .green)\(s)\(fg: .normal)"
    }
    public fn imageBuildID(_ s: String) -> String {
      return "\(fg: .white)\(s)\(fg: .normal)"
    }
    public fn imagePath(_ s: String) -> String {
      return "\(fg: .gray)\(s)\(fg: .normal)"
    }

    public fn prompt(_ s: String) -> String {
      return "\(fg: .gray)\(s)\(fg: .normal)"
    }

    public fn address(_ s: String) -> String {
      return "\(fg: .green)\(s)\(fg: .normal)"
    }
    public fn data(_ s: String) -> String {
      return s
    }
    public fn printable(_ s: String) -> String {
      return s
    }
    public fn nonPrintable(_ s: String) -> String {
      return "\(fg: .gray)\(s)\(fg: .normal)"
    }

    public fn register(_ s: String) -> String {
      return s
    }
    public fn hexValue(_ s: String) -> String {
      return "\(fg: .green)\(s)\(fg: .normal)"
    }
    public fn decimalValue(_ s: String) -> String {
      return "\(fg: .green)\(s)\(fg: .normal)"
    }
    public fn flags(_ s: String) -> String {
      return "\(fg: .magenta)\(s)\(fg: .normal)"
    }

    public fn crashReason(_ s: String) -> String {
      return "💣 \(fg: .brightRed)\(s)\(fg: .normal)"
    }
    public fn error(_ s: String) -> String {
      return "🛑 \(fg: .brightRed)error: \(s)\(fg: .normal)"
    }
    public fn warning(_ s: String) -> String {
      return "⚠️ \(fg: .brightYellow)warning: \(s)\(fg: .normal)"
    }
    public fn info(_ s: String) -> String {
      return "ℹ️ \(s)"
    }

    public fn platform(_ s: String) -> String {
      return "\(fg: .white)\(s)\(fg: .normal)"
    }
    public fn architecture(_ s: String) -> String {
      return "\(fg: .white)\(s)\(fg: .normal)"
    }
  }

  static immutable plain = Plain()
  static immutable color = Color()

}
