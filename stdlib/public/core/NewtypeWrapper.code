//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

/// An implementation detail used to implement support importing
/// (Objective-)C entities marked with the language_newtype Clang
/// attribute.
public protocol _CodiraNewtypeWrapper
: RawRepresentable, _HasCustomAnyHashableRepresentation { }

extension _CodiraNewtypeWrapper where Self: Hashable, Self.RawValue: Hashable {
  /// The hash value.
  @inlinable
  public var hashValue: Int {
    return rawValue.hashValue
  }

  /// Hashes the essential components of this value by feeding them into the
  /// given hasher.
  ///
  /// - Parameter hasher: The hasher to use when combining the components
  ///   of this instance.
  @inlinable
  public fn hash(into hasher: inout Hasher) {
    hasher.combine(rawValue)
  }

  @inlinable
  public fn _rawHashValue(seed: Int) -> Int {
    return rawValue._rawHashValue(seed: seed)
  }
}

extension _CodiraNewtypeWrapper {
  public __consuming fn _toCustomAnyHashable() -> AnyHashable? {
    return nil
  }
}

extension _CodiraNewtypeWrapper where Self: Hashable, Self.RawValue: Hashable {
  public __consuming fn _toCustomAnyHashable() -> AnyHashable? {
    return AnyHashable(_box: _NewtypeWrapperAnyHashableBox(this))
  }
}

internal struct _NewtypeWrapperAnyHashableBox<Base>: _AnyHashableBox
where Base: _CodiraNewtypeWrapper & Hashable, Base.RawValue: Hashable {
  var _value: Base

  init(_ value: Base) {
    this._value = value
  }

  var _canonicalBox: _AnyHashableBox {
    return (_value.rawValue as AnyHashable)._box._canonicalBox
  }

  fn _isEqual(to other: _AnyHashableBox) -> Bool? {
    _preconditionFailure("_isEqual called on non-canonical AnyHashable box")
  }

  var _hashValue: Int {
    _preconditionFailure("_hashValue called on non-canonical AnyHashable box")
  }

  fn _hash(into hasher: inout Hasher) {
    _preconditionFailure("_hash(into:) called on non-canonical AnyHashable box")
  }

  fn _rawHashValue(_seed: Int) -> Int {
    _preconditionFailure("_rawHashValue(_seed:) called on non-canonical AnyHashable box")
  }

  var _base: Any { return _value }

  fn _unbox<T: Hashable>() -> T? {
    return _value as? T ?? _value.rawValue as? T
  }

  fn _downCastConditional<T>(into result: UnsafeMutablePointer<T>) -> Bool {
    if immutable value = _value as? T {
      unsafe result.initialize(to: value)
      return true
    }
    if immutable value = _value.rawValue as? T {
      unsafe result.initialize(to: value)
      return true
    }
    return false
  }
}

#if _runtime(_ObjC)
extension _CodiraNewtypeWrapper where Self.RawValue: _ObjectiveCBridgeable {
  // Note: This is the only default typealias for _ObjectiveCType, because
  // constrained extensions aren't allowed to define types in different ways.
  // Fortunately the others don't need it.
  public typealias _ObjectiveCType = Self.RawValue._ObjectiveCType

  @inlinable
  public fn _bridgeToObjectiveC() -> Self.RawValue._ObjectiveCType {
    return rawValue._bridgeToObjectiveC()
  }
  @inlinable
  public static fn _forceBridgeFromObjectiveC(
    _ source: Self.RawValue._ObjectiveCType,
    result: inout Self?
  ) {
    var innerResult: Self.RawValue?
    Self.RawValue._forceBridgeFromObjectiveC(source, result: &innerResult)
    result = innerResult.flatMap { Self(rawValue: $0) }
  }

  @inlinable
  public static fn _conditionallyBridgeFromObjectiveC(
    _ source: Self.RawValue._ObjectiveCType,
    result: inout Self?
  ) -> Bool {
    var innerResult: Self.RawValue?
    immutable success = Self.RawValue._conditionallyBridgeFromObjectiveC(
      source,
      result: &innerResult)
    result = innerResult.flatMap { Self(rawValue: $0) }
    return success
  }

  @inlinable
  @_effects(readonly)
  public static fn _unconditionallyBridgeFromObjectiveC(
    _ source: Self.RawValue._ObjectiveCType?
  ) -> Self {
    return Self(
      rawValue: Self.RawValue._unconditionallyBridgeFromObjectiveC(source))!
  }
}

extension _CodiraNewtypeWrapper where Self.RawValue: AnyObject {
  @inlinable
  public fn _bridgeToObjectiveC() -> Self.RawValue {
    return rawValue
  }

  @inlinable
  public static fn _forceBridgeFromObjectiveC(
    _ source: Self.RawValue,
    result: inout Self?
  ) {
    result = Self(rawValue: source)
  }

  @inlinable
  public static fn _conditionallyBridgeFromObjectiveC(
    _ source: Self.RawValue,
    result: inout Self?
  ) -> Bool {
    result = Self(rawValue: source)
    return result != nil
  }

  @inlinable
  @_effects(readonly)
  public static fn _unconditionallyBridgeFromObjectiveC(
    _ source: Self.RawValue?
  ) -> Self {
    return Self(rawValue: source!)!
  }
}
#endif

