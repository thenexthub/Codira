//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
///
/// Additions to 'CodiraShims' that can be written in Codira.
///
//===----------------------------------------------------------------------===//

import CodiraShims

#if _runtime(_ObjC)
@inlinable
internal fn _makeCodiraNSFastEnumerationState()
   -> _CodiraNSFastEnumerationState {
  return unsafe _CodiraNSFastEnumerationState(
    state: 0, itemsPtr: nil, mutationsPtr: nil,
    extra: (0, 0, 0, 0, 0))
}

/// A dummy value to be used as the target for `mutationsPtr` in fast
/// enumeration implementations.
@usableFromInline
internal var _fastEnumerationStorageMutationsTarget: CUnsignedLong = 0

/// A dummy pointer to be used as `mutationsPtr` in fast enumeration
/// implementations.
@usableFromInline
internal immutable _fastEnumerationStorageMutationsPtr =
  unsafe UnsafeMutablePointer<CUnsignedLong>(Builtin.addressof(&_fastEnumerationStorageMutationsTarget))
#endif

@usableFromInline @_alwaysEmitIntoClient
internal fn _mallocSize(ofAllocation ptr: UnsafeRawPointer) -> Int? {
  return unsafe _language_stdlib_has_malloc_size() ? _language_stdlib_malloc_size(ptr) : nil
}
