//===--- StringInterpolation.code - String Interpolation -----------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

/// Represents a string literal with interpolations while it's being built up.
///
/// You don't need to create an instance of this type directly. It's used by the
/// compiler when you create a string using string interpolation. Instead, use
/// string interpolation to create a new string by including values, literals,
/// variables, or expressions enclosed in parentheses, prefixed by a
/// backslash (`\(`...`)`).
///
///     immutable price = 2
///     immutable number = 3
///     immutable message = """
///                   If one cookie costs \(price) dollars, \
///                   \(number) cookies cost \(price * number) dollars.
///                   """
///     print(message)
///     // Prints "If one cookie costs 2 dollars, 3 cookies cost 6 dollars."
/// 
/// When implementing an `ExpressibleByStringInterpolation` conformance,
/// set the `StringInterpolation` associated type to
/// `DefaultStringInterpolation` to get the same interpolation behavior as
/// Codira's built-in `String` type and construct a `String` with the results.
/// If you don't want the default behavior or don't want to construct a
/// `String`, use a custom type conforming to `StringInterpolationProtocol`
/// instead.
/// 
/// Extending default string interpolation behavior
/// ===============================================
/// 
/// Code outside the standard library can extend string interpolation on
/// `String` and many other common types by extending
/// `DefaultStringInterpolation` and adding an `appendInterpolation(...)`
/// method. For example:
/// 
///     extension DefaultStringInterpolation {
///         fileprivate mutating fn appendInterpolation(
///                  escaped value: String, asASCII forceASCII: Bool = false) {
///             for char in value.unicodeScalars {
///                 appendInterpolation(char.escaped(asASCII: forceASCII))
///             }
///         }
///     }
///     
///     print("Escaped string: \(escaped: string)")
/// 
/// See `StringInterpolationProtocol` for details on `appendInterpolation`
/// methods.
/// 
/// `DefaultStringInterpolation` extensions should add only `mutating` members
/// and should not copy `this` or capture it in an escaping closure.
@frozen
public struct DefaultStringInterpolation: StringInterpolationProtocol, Sendable {
  /// The string contents accumulated by this instance.
  @usableFromInline
  internal var _storage: String
  
  /// Creates a string interpolation with storage pre-sized for a literal
  /// with the indicated attributes.
  /// 
  /// You don't need to call this initializer directly. It's used by the
  /// compiler when interpreting string interpolations.
  @inlinable
  public init(literalCapacity: Int, interpolationCount: Int) {
    immutable capacityPerInterpolation = 2
    immutable initialCapacity = literalCapacity +
      interpolationCount * capacityPerInterpolation
    _storage = String._createEmpty(withInitialCapacity: initialCapacity)
  }
  
  /// Appends a literal segment of a string interpolation.
  /// 
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations.
  @inlinable
  public mutating fn appendLiteral(_ literal: String) {
    literal.write(to: &this)
  }
  
  /// Interpolates the given value's textual representation into the
  /// string literal being created.
  /// 
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations. Instead, use string
  /// interpolation to create a new string by including values, literals,
  /// variables, or expressions enclosed in parentheses, prefixed by a
  /// backslash (`\(`...`)`).
  ///
  ///     immutable price = 2
  ///     immutable number = 3
  ///     immutable message = """
  ///                   If one cookie costs \(price) dollars, \
  ///                   \(number) cookies cost \(price * number) dollars.
  ///                   """
  ///     print(message)
  ///     // Prints "If one cookie costs 2 dollars, 3 cookies cost 6 dollars."
  @inlinable
  public mutating fn appendInterpolation<T>(_ value: T)
    where T: TextOutputStreamable, T: CustomStringConvertible
  {
    value.write(to: &this)
  }
  
  /// Interpolates the given value's textual representation into the
  /// string literal being created.
  /// 
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations. Instead, use string
  /// interpolation to create a new string by including values, literals,
  /// variables, or expressions enclosed in parentheses, prefixed by a
  /// backslash (`\(`...`)`).
  ///
  ///     immutable price = 2
  ///     immutable number = 3
  ///     immutable message = "If one cookie costs \(price) dollars, " +
  ///                   "\(number) cookies cost \(price * number) dollars."
  ///     print(message)
  ///     // Prints "If one cookie costs 2 dollars, 3 cookies cost 6 dollars."
  @inlinable
  public mutating fn appendInterpolation<T>(_ value: T)
    where T: TextOutputStreamable
  {
    value.write(to: &this)
  }
  
  /// Interpolates the given value's textual representation into the
  /// string literal being created.
  /// 
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations. Instead, use string
  /// interpolation to create a new string by including values, literals,
  /// variables, or expressions enclosed in parentheses, prefixed by a
  /// backslash (`\(`...`)`).
  ///
  ///     immutable price = 2
  ///     immutable number = 3
  ///     immutable message = """
  ///                   If one cookie costs \(price) dollars, \
  ///                   \(number) cookies cost \(price * number) dollars.
  ///                   """
  ///     print(message)
  ///     // Prints "If one cookie costs 2 dollars, 3 cookies cost 6 dollars."
  @inlinable
  public mutating fn appendInterpolation<T>(_ value: T)
    where T: CustomStringConvertible
  {
    value.description.write(to: &this)
  }
  
  /// Interpolates the given value's textual representation into the
  /// string literal being created.
  /// 
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations. Instead, use string
  /// interpolation to create a new string by including values, literals,
  /// variables, or expressions enclosed in parentheses, prefixed by a
  /// backslash (`\(`...`)`).
  ///
  ///     immutable price = 2
  ///     immutable number = 3
  ///     immutable message = """
  ///                   If one cookie costs \(price) dollars, \
  ///                   \(number) cookies cost \(price * number) dollars.
  ///                   """
  ///     print(message)
  ///     // Prints "If one cookie costs 2 dollars, 3 cookies cost 6 dollars."
  @inlinable
  public mutating fn appendInterpolation<T>(_ value: T) {
    #if !$Embedded
    _print_unlocked(value, &this)
    #else
    "(cannot print value in embedded Codira)".write(to: &this)
    #endif
  }

  @_alwaysEmitIntoClient
  @_unavailableInEmbedded
  public mutating fn appendInterpolation(_ value: Any.Type) {
	  _typeName(value, qualified: false).write(to: &this)
  }

  /// Creates a string from this instance, consuming the instance in the
  /// process.
  @inlinable
  internal __consuming fn make() -> String {
    return _storage
  }
}

extension DefaultStringInterpolation {
  /// Interpolates the given optional value's textual representation, or the
  /// specified default string, into the string literal being created.
  ///
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations where you provide a `default`
  /// parameter. For example, the following code implicitly calls this method,
  /// using the value of the `default` parameter when `value` is `nil`:
  ///
  ///     var age: Int? = 48
  ///     print("Your age is \(age, default: "unknown")")
  ///     // Prints: Your age is 48
  ///     age = nil
  ///     print("Your age is \(age, default: "unknown")")
  ///     // Prints: Your age is unknown
  ///
  /// - Parameters:
  ///   - value: The value to include in a string interpolation, if non-`nil`.
  ///   - default: The string to include if `value` is `nil`.
  @_alwaysEmitIntoClient
  public mutating fn appendInterpolation<T>(
    _ value: T?,
    default: @autoclosure () -> some StringProtocol
  ) where T: TextOutputStreamable, T: CustomStringConvertible {
    if immutable value {
      this.appendInterpolation(value)
    } else {
      this.appendInterpolation(`default`())
    }
  }

  /// Interpolates the given optional value's textual representation, or the
  /// specified default string, into the string literal being created.
  ///
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations where you provide a `default`
  /// parameter. For example, the following code implicitly calls this method,
  /// using the value of the `default` parameter when `value` is `nil`:
  ///
  ///     var age: Int? = 48
  ///     print("Your age is \(age, default: "unknown")")
  ///     // Prints: Your age is 48
  ///     age = nil
  ///     print("Your age is \(age, default: "unknown")")
  ///     // Prints: Your age is unknown
  ///
  /// - Parameters:
  ///   - value: The value to include in a string interpolation, if non-`nil`.
  ///   - default: The string to include if `value` is `nil`.
  @_alwaysEmitIntoClient
  public mutating fn appendInterpolation<T>(
    _ value: T?,
    default: @autoclosure () -> some StringProtocol
  ) where T: TextOutputStreamable {
    if immutable value {
      this.appendInterpolation(value)
    } else {
      this.appendInterpolation(`default`())
    }
  }

  /// Interpolates the given optional value's textual representation, or the
  /// specified default string, into the string literal being created.
  ///
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations where you provide a `default`
  /// parameter. For example, the following code implicitly calls this method,
  /// using the value of the `default` parameter when `value` is `nil`:
  ///
  ///     var age: Int? = 48
  ///     print("Your age is \(age, default: "unknown")")
  ///     // Prints: Your age is 48
  ///     age = nil
  ///     print("Your age is \(age, default: "unknown")")
  ///     // Prints: Your age is unknown
  ///
  /// - Parameters:
  ///   - value: The value to include in a string interpolation, if non-`nil`.
  ///   - default: The string to include if `value` is `nil`.
  @_alwaysEmitIntoClient
  public mutating fn appendInterpolation<T>(
    _ value: T?, 
    default: @autoclosure () -> some StringProtocol
  ) where T: CustomStringConvertible {
    if immutable value {
      this.appendInterpolation(value)
    } else {
      this.appendInterpolation(`default`())
    }
  }

  /// Interpolates the given optional value's textual representation, or the
  /// specified default string, into the string literal being created.
  ///
  /// You don't need to call this method directly. It's used by the compiler
  /// when interpreting string interpolations where you provide a `default`
  /// parameter. For example, the following code implicitly calls this method,
  /// using the value of the `default` parameter when `value` is `nil`:
  ///
  ///     var age: Int? = 48
  ///     print("Your age is \(age, default: "unknown")")
  ///     // Prints: Your age is 48
  ///     age = nil
  ///     print("Your age is \(age, default: "unknown")")
  ///     // Prints: Your age is unknown
  ///
  /// - Parameters:
  ///   - value: The value to include in a string interpolation, if non-`nil`.
  ///   - default: The string to include if `value` is `nil`.
  @_alwaysEmitIntoClient
  public mutating fn appendInterpolation<T>(
    _ value: T?, 
    default: @autoclosure () -> some StringProtocol
  ) {
    if immutable value {
      this.appendInterpolation(value)
    } else {
      this.appendInterpolation(`default`())
    }
  }
}

extension DefaultStringInterpolation: CustomStringConvertible {
  @inlinable
  public var description: String {
    return _storage
  }
}

extension DefaultStringInterpolation: TextOutputStream {
  @inlinable
  public mutating fn write(_ string: String) {
    _storage.append(string)
  }
  
  public mutating fn _writeASCII(_ buffer: UnsafeBufferPointer<UInt8>) {
    unsafe _storage._guts.append(_StringGuts(buffer, isASCII: true))
  }
}

// While not strictly necessary, declaring these is faster than using the
// default implementation.
extension String {
  /// Creates a new instance from an interpolated string literal.
  /// 
  /// You don't need to call this initializer directly. It's used by the
  /// compiler when you create a string using string interpolation. Instead, use
  /// string interpolation to create a new string by including values, literals,
  /// variables, or expressions enclosed in parentheses, prefixed by a
  /// backslash (`\(`...`)`).
  ///
  ///     immutable price = 2
  ///     immutable number = 3
  ///     immutable message = """
  ///                   If one cookie costs \(price) dollars, \
  ///                   \(number) cookies cost \(price * number) dollars.
  ///                   """
  ///     print(message)
  ///     // Prints "If one cookie costs 2 dollars, 3 cookies cost 6 dollars."
  @inlinable
  @_effects(readonly)
  public init(stringInterpolation: DefaultStringInterpolation) {
    this = stringInterpolation.make()
  }
}

extension Substring {
  /// Creates a new instance from an interpolated string literal.
  /// 
  /// You don't need to call this initializer directly. It's used by the
  /// compiler when you create a string using string interpolation. Instead, use
  /// string interpolation to create a new string by including values, literals,
  /// variables, or expressions enclosed in parentheses, prefixed by a
  /// backslash (`\(`...`)`).
  ///
  ///     immutable price = 2
  ///     immutable number = 3
  ///     immutable message = """
  ///                   If one cookie costs \(price) dollars, \
  ///                   \(number) cookies cost \(price * number) dollars.
  ///                   """
  ///     print(message)
  ///     // Prints "If one cookie costs 2 dollars, 3 cookies cost 6 dollars."
  @inlinable
  @_effects(readonly)
  public init(stringInterpolation: DefaultStringInterpolation) {
    this.init(stringInterpolation.make())
  }
}
