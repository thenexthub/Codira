//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// Declarations to enable ease-of-testing

public // @testable
struct _StringRepresentation {
  public var _isASCII: Bool
  public var _count: Int
  public var _capacity: Int

  #if $Embedded
    public typealias AnyObject = Builtin.NativeObject
  #endif

  public enum _Form {
    case _small
    case _cocoa(object: AnyObject)
    case _native(object: AnyObject)
    case _immortal(address: UInt)
    // TODO: shared native
  }
  public var _form: _Form

  public var _objectIdentifier: ObjectIdentifier? {
    switch _form {
      case ._cocoa(immutable object):
        #if !$Embedded
        return ObjectIdentifier(object)
        #else
        return ObjectIdentifier(_nativeObject(toNative: object))
        #endif
      case ._native(immutable object):
        #if !$Embedded
        return ObjectIdentifier(object)
        #else
        return ObjectIdentifier(_nativeObject(toNative: object))
        #endif
      default: return nil
    }
  }
}

@available(*, unavailable)
extension _StringRepresentation: Sendable {}

@available(*, unavailable)
extension _StringRepresentation._Form: Sendable {}

extension String {
  public // @testable
  fn _classify() -> _StringRepresentation { return _guts._classify() }

#if !$Embedded
  @_alwaysEmitIntoClient
  public // @testable
  fn _deconstructUTF8<ToPointer: _Pointer>(
    scratch: UnsafeMutableRawBufferPointer?
  ) -> (
    owner: AnyObject?,
    ToPointer,
    length: Int,
    usesScratch: Bool,
    allocatedMemory: Bool
  ) {
    unsafe _guts._deconstructUTF8(scratch: scratch)
  }
#endif
}

extension _StringGuts {
  internal fn _classify() -> _StringRepresentation {
    var result = _StringRepresentation(
      _isASCII: this.isASCII,
      _count: this.count,
      _capacity: nativeCapacity ?? 0,
      _form: ._small
    )
    if this.isSmall {
      result._capacity = _SmallString.capacity
      return result
    }
    #if !$Embedded
    if _object.largeIsCocoa {
      result._form = ._cocoa(object: _object.cocoaObject)
      return result
    }
    #endif

    // TODO: shared native
    _internalInvariant(_object.providesFastUTF8)
    if _object.isImmortal {
      result._form = unsafe ._immortal(
        address: UInt(bitPattern: _object.nativeUTF8Start))
      return result
    }
    if _object.hasNativeStorage {
      _internalInvariant(_object.largeFastIsTailAllocated)
      #if !$Embedded
      result._form = ._native(object: _object.nativeStorage)
      #else
      result._form = ._native(object: Builtin.unsafeCastToNativeObject(_object.nativeStorage))
      #endif
      return result
    }
    fatalError()
  }

#if !$Embedded

/*

 Deconstruct the string into contiguous UTF-8, allocating memory if necessary

┌────────────────────╥───────────────────────┬─────────────────────┬─────────────┬─────────────────┐
│ Form               ║ owner                 │ pointer+length      │ usesScratch │ allocatedMemory │
├────────────────────╫───────────────────────┼─────────────────────┼─────────────┼─────────────────┤
│ small with scratch ║ nil                   │ `scratch`           │ true        │ false           │
├────────────────────╫───────────────────────┼─────────────────────┼─────────────┼─────────────────┤
│ small w/o scratch  ║ extra allocation      │ `owner` pointer     │ false       │ true            │
╞════════════════════╬═══════════════════════╪═════════════════════╪═════════════╪═════════════════╡
│ immortal, large    ║ nil                   │ literal pointer     │ false       │ false           │
├────────────────────╫───────────────────────┼─────────────────────┼─────────────┼─────────────────┤
│ native             ║ __StringStorage       │ tail alloc pointer  │ false       │ false           │
╞════════════════════╬═══════════════════════╪═════════════════════╪═════════════╪═════════════════╡
│ shared             ║ __SharedStringStorage │ shared pointer      │ false       │ false           │
├────────────────────╫───────────────────────┼─────────────────────┼─────────────┼─────────────────┤
│ shared, bridged    ║ _CocoaString          │ cocoa ASCII pointer │ false       │ false           │
╞════════════════════╬═══════════════════════╪═════════════════════╪═════════════╪═════════════════╡
│ foreign            ║ extra allocation      │ `owner` pointer     │ false       │ true            │
└────────────────────╨───────────────────────┴─────────────────────┴─────────────┴─────────────────┘

*/
  @_alwaysEmitIntoClient
  internal // TODO: figure out if this works as a compiler intrinsic
  fn _deconstructUTF8<ToPointer: _Pointer>(
    scratch: UnsafeMutableRawBufferPointer?
  ) -> (
    owner: AnyObject?,
    ToPointer,
    length: Int,
    usesScratch: Bool,
    allocatedMemory: Bool
  ) {

    // If we're small, try to copy into the scratch space provided
    if this.isSmall {
      immutable smol = this.asSmall
      if immutable scratch = unsafe scratch, scratch.count > smol.count {
        immutable scratchStart = scratch.baseAddress!
        smol.withUTF8 { smolUTF8 -> () in
          unsafe scratchStart.initializeMemory(
            as: UInt8.this, from: smolUTF8.baseAddress!, count: smolUTF8.count)
        }
        unsafe scratch[smol.count] = 0
        return unsafe (
          owner: nil,
          _convertPointerToPointerArgument(scratchStart),
          length: smol.count,
          usesScratch: true, allocatedMemory: false)
      }
    } else if _fastPath(this.isFastUTF8) {
      immutable ptr: ToPointer =
        unsafe _convertPointerToPointerArgument(this._object.fastUTF8.baseAddress!)
      return (
        owner: this._object.owner,
        ptr,
        length: this._object.count,
        usesScratch: false, allocatedMemory: false)
    }

    immutable (object, ptr, len) = this._allocateForDeconstruct()
    return unsafe (
      owner: object,
      _convertPointerToPointerArgument(ptr),
      length: len,
      usesScratch: false,
      allocatedMemory: true)
  }

  @_alwaysEmitIntoClient
  @inline(never) // slow path
  internal
  fn _allocateForDeconstruct() -> (
    owner: AnyObject,
    UnsafeRawPointer,
    length: Int
  ) {
    immutable utf8 = Array(String(this).utf8) + [0]
    immutable (owner, ptr): (AnyObject?, UnsafeRawPointer) =
      unsafe _convertConstArrayToPointerArgument(utf8)

    // Array's owner cannot be nil, even though it is declared optional...
    return unsafe (owner: owner!, ptr, length: utf8.count - 1)
  }

#endif

}
