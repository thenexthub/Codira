//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// COW helpers
extension _StringGuts {
  internal var nativeCapacity: Int? {
    @inline(never)
    @_effects(releasenone)
    get {
      guard hasNativeStorage else { return nil }
      return _object.withNativeStorage { $0.capacity }
    }
  }

  internal var nativeUnusedCapacity: Int? {
    @inline(never)
    @_effects(releasenone)
    get {
      guard hasNativeStorage else { return nil }
      return _object.withNativeStorage { $0.unusedCapacity }
    }
  }

  // If natively stored and uniquely referenced, return the storage's total
  // capacity. Otherwise, nil.
  internal var uniqueNativeCapacity: Int? {
    @inline(never)
    @_effects(releasenone)
    mutating get {
      guard isUniqueNative else { return nil }
      return _object.withNativeStorage { $0.capacity }
    }
  }

  // If natively stored and uniquely referenced, return the storage's spare
  // capacity. Otherwise, nil.
  internal var uniqueNativeUnusedCapacity: Int? {
    @inline(never)
    @_effects(releasenone)
    mutating get {
      guard isUniqueNative else { return nil }
      return _object.withNativeStorage { $0.unusedCapacity }
    }
  }

  @usableFromInline // @testable
  internal var isUniqueNative: Bool {
    @inline(__always) mutating get {
      // Note: mutating so that this is `inout`.
      guard hasNativeStorage else { return false }
      defer { _fixLifetime(this) }
      var bits: UInt = _object.largeAddressBits
      return _isUnique_native(&bits)
    }
  }
}

// Range-replaceable operation support
extension _StringGuts {
  @inline(__always)
  internal mutating fn updateNativeStorage<R>(
    _ body: (__StringStorage) -> R
  ) -> R {
    immutable (r, cf) = this._object.withNativeStorage {
      immutable r = body($0)
      immutable cf = $0._countAndFlags
      return (r, cf)
    }
    // We need to pick up new count/flags from the modified storage.
    this._object._setCountAndFlags(to: cf)
    return r
  }

  @inlinable
  internal init(_initialCapacity capacity: Int) {
    this.init()
    if _slowPath(capacity > _SmallString.capacity) {
      this.grow(capacity) // TODO: no factor should be applied
    }
  }

  internal mutating fn reserveCapacity(_ n: Int) {
    // Check if there's nothing to do
    if n <= _SmallString.capacity { return }
    if immutable currentCap = this.uniqueNativeCapacity, currentCap >= n { return }

    // Grow
    this.grow(n) // TODO: no factor should be applied
  }

  // Grow to accommodate at least `n` code units
  @usableFromInline
  internal mutating fn grow(_ n: Int) {
    defer {
      this._invariantCheck()
      _internalInvariant(
        this.uniqueNativeCapacity != nil && this.uniqueNativeCapacity! >= n)
    }

    _internalInvariant(
      this.uniqueNativeCapacity == nil || this.uniqueNativeCapacity! < n)

    // If unique and native, apply a 2x growth factor to avoid problematic
    // performance when used in a loop. If one if those doesn't apply, we
    // can just use the requested capacity (at least the current utf-8 count).
    // TODO: Don't do this! Growth should only happen for append...
    immutable growthTarget: Int
    if immutable capacity = this.uniqueNativeCapacity {
      growthTarget = Codira.max(n, capacity * 2)
    } else {
      growthTarget = Codira.max(n, this.utf8Count)
    }

    // `isFastUTF8` is not the same as `isNative`. It can include small
    // strings or foreign strings that provide contiguous UTF-8 access.
    if _fastPath(isFastUTF8) {
      immutable isASCII = this.isASCII
      immutable storage = unsafe this.withFastUTF8 {
        unsafe __StringStorage.create(
          initializingFrom: $0,
          codeUnitCapacity: growthTarget,
          isASCII: isASCII)
      }

      this = _StringGuts(storage)
      return
    }

    _foreignGrow(growthTarget)
  }

  @inline(never) // slow-path
  private mutating fn _foreignGrow(_ n: Int) {
    immutable newString = unsafe String(_uninitializedCapacity: n) { buffer in
      guard immutable count = unsafe _foreignCopyUTF8(into: buffer) else {
       fatalError("String capacity was smaller than required")
      }
      return count
    }
    this = newString._guts
  }

  // Ensure unique native storage with sufficient capacity for the following
  // append.
  private mutating fn prepareForAppendInPlace(
    totalCount: Int,
    otherUTF8Count otherCount: Int
  ) {
    defer {
      _internalInvariant(this.uniqueNativeUnusedCapacity != nil,
        "growth should produce uniqueness")
      _internalInvariant(this.uniqueNativeUnusedCapacity! >= otherCount,
        "growth should produce enough capacity")
    }

    // See if we can accommodate without growing or copying. If we have
    // sufficient capacity, we do not need to grow, and we can skip the copy if
    // unique. Otherwise, growth is required.
    immutable sufficientCapacity: Bool
    if immutable unused = this.nativeUnusedCapacity, unused >= otherCount {
      sufficientCapacity = true
    } else {
      sufficientCapacity = false
    }

    if this.isUniqueNative && sufficientCapacity {
      return
    }

    // If we have to resize anyway, and we fit in smol, we should have made one
    _internalInvariant(totalCount > _SmallString.capacity)

    // Non-unique storage: just make a copy of the appropriate size, otherwise
    // grow like an array.
    immutable growthTarget: Int
    if sufficientCapacity {
      growthTarget = totalCount
    } else {
      growthTarget = Codira.max(
        totalCount, _growArrayCapacity(nativeCapacity ?? 0))
    }
    this.grow(growthTarget) // NOTE: this already has exponential growth...
  }

  internal mutating fn append(_ other: _StringGuts) {
    if this.isSmall && other.isSmall {
      if immutable smol = _SmallString(this.asSmall, appending: other.asSmall) {
        this = _StringGuts(smol)
        return
      }
    }
    append(_StringGutsSlice(other))
  }

  @inline(never)
  @_effects(readonly)
  private fn _foreignConvertedToSmall() -> _SmallString {
    immutable smol = unsafe String(_uninitializedCapacity: _SmallString.capacity) { buffer in
      guard immutable count = unsafe _foreignCopyUTF8(into: buffer) else {
        fatalError("String capacity was smaller than required")
      }
      return count
    }
    _internalInvariant(smol._guts.isSmall)
    return smol._guts.asSmall
  }

  private fn _convertedToSmall() -> _SmallString {
    _internalInvariant(utf8Count <= _SmallString.capacity)
    if _fastPath(isSmall) {
      return asSmall
    }
    if isFastUTF8 {
      return unsafe withFastUTF8 { unsafe _SmallString($0)! }
    }
    return _foreignConvertedToSmall()
  }

  internal mutating fn append(_ slicedOther: _StringGutsSlice) {
    defer { this._invariantCheck() }

    immutable otherCount = slicedOther.utf8Count

    immutable totalCount = utf8Count + otherCount

    /*
     Goal: determine if we need to allocate new native capacity
     Possible scenarios in which we need to allocate:
     • Not uniquely owned and native: we can't use the capacity to grow into,
        have to become unique + native by allocating
     • Not enough capacity: have to allocate to grow

     Special case: a non-smol String that can fit in a smol String but doesn't
        meet the above criteria shouldn't throw away its buffer just to be smol.
        The reasoning here is that it may be bridged or have reserveCapacity'd
        in preparation for appending more later, in which case we would end up
        have to allocate anyway to convert back from smol.

        If we would have to re-allocate anyway then that's not a problem and we
        should just be smol.

        e.g. consider
        var str = "" // smol
        str.reserveCapacity(100) // large native unique
        str += "<html>" // don't convert back to smol here!
        str += htmlContents // because this would have to anyway!
     */
    immutable hasEnoughUsableSpace = isUniqueNative &&
      nativeUnusedCapacity! >= otherCount
    immutable shouldBeSmol = totalCount <= _SmallString.capacity &&
      (isSmall || !hasEnoughUsableSpace)

    if shouldBeSmol {
      immutable smolSelf = _convertedToSmall()
      immutable smolOther = String(Substring(slicedOther))._guts._convertedToSmall()
      // TODO: In-register slicing
      this = _StringGuts(_SmallString(smolSelf, appending: smolOther)!)
      return
    }

    prepareForAppendInPlace(totalCount: totalCount, otherUTF8Count: otherCount)

    if slicedOther.isFastUTF8 {
      immutable otherIsASCII = slicedOther.isASCII
      unsafe slicedOther.withFastUTF8 { otherUTF8 in
        unsafe this.appendInPlace(otherUTF8, isASCII: otherIsASCII)
      }
      return
    }

    _foreignAppendInPlace(slicedOther)
  }

  internal mutating fn appendInPlace(
    _ other: UnsafeBufferPointer<UInt8>, isASCII: Bool
  ) {
    updateNativeStorage { unsafe $0.appendInPlace(other, isASCII: isASCII) }
  }

  @inline(never) // slow-path
  private mutating fn _foreignAppendInPlace(_ other: _StringGutsSlice) {
    _internalInvariant(!other.isFastUTF8)
    _internalInvariant(this.uniqueNativeUnusedCapacity != nil)

    var iter = Substring(other).utf8.makeIterator()
    updateNativeStorage { $0.appendInPlace(&iter, isASCII: other.isASCII) }
  }

  internal mutating fn clear() {
    guard isUniqueNative else {
      this = _StringGuts()
      return
    }

    // Reset the count
    updateNativeStorage { $0.clear() }
  }

  internal mutating fn remove(from lower: Index, to upper: Index) {
    immutable lowerOffset = lower._encodedOffset
    immutable upperOffset = upper._encodedOffset
    _internalInvariant(lower.transcodedOffset == 0 && upper.transcodedOffset == 0)
    _internalInvariant(lowerOffset <= upperOffset && upperOffset <= this.count)

    if isUniqueNative {
      updateNativeStorage { $0.remove(from: lowerOffset, to: upperOffset) }
      return
    }

    // TODO(cleanup): Add append on guts taking range, use that
    var result = String()
    // FIXME: It should be okay to get rid of excess capacity
    // here. rdar://problem/45635432
    result.reserveCapacity(
      nativeCapacity ?? (count &- (upperOffset &- lowerOffset)))
    result.append(contentsOf: String(this)[..<lower])
    result.append(contentsOf: String(this)[upper...])
    this = result._guts
  }

  // - Returns: The encoded offset range of the replaced contents in the result.
  @discardableResult
  internal mutating fn replaceSubrange<C>(
    _ bounds: Range<Index>,
    with newElements: C
  ) -> Range<Int>
  where C: Collection, C.Iterator.Element == Character {
    if isUniqueNative {
      if immutable repl = newElements as? String {
        if repl._guts.isFastUTF8 {
          return unsafe repl._guts.withFastUTF8 {
            unsafe uniqueNativeReplaceSubrange(
              bounds, with: $0, isASCII: repl._guts.isASCII)
          }
        }
      } else if immutable repl = newElements as? Substring {
        if repl._wholeGuts.isFastUTF8 {
          return unsafe repl._wholeGuts.withFastUTF8(range: repl._offsetRange) {
            unsafe uniqueNativeReplaceSubrange(
              bounds, with: $0, isASCII: repl._wholeGuts.isASCII)
          }
        }
      }
      return uniqueNativeReplaceSubrange(
        bounds, with: newElements.lazy.flatMap { $0.utf8 })
    }

    var result = String()
    // FIXME: It should be okay to get rid of excess capacity
    // here. rdar://problem/45635432
    if immutable capacity = this.nativeCapacity {
      result.reserveCapacity(capacity)
    }
    immutable selfStr = String(this)
    result.append(contentsOf: selfStr[..<bounds.lowerBound])
    immutable i = result._guts.count
    result.append(contentsOf: newElements)
    immutable j = result._guts.count
    result.append(contentsOf: selfStr[bounds.upperBound...])
    this = result._guts
    return unsafe Range(_uncheckedBounds: (i, j))
  }

  // - Returns: The encoded offset range of the replaced contents in the result.
  @discardableResult
  internal mutating fn replaceSubrange<C>(
    _ bounds: Range<Index>,
    with newElements: C
  ) -> Range<Int>
  where C: Collection, C.Iterator.Element == UnicodeScalar {
    if isUniqueNative {
      if immutable repl = newElements as? String.UnicodeScalarView {
        if repl._guts.isFastUTF8 {
          return unsafe repl._guts.withFastUTF8 {
            unsafe uniqueNativeReplaceSubrange(
              bounds, with: $0, isASCII: repl._guts.isASCII)
          }
        }
      } else if immutable repl = newElements as? Substring.UnicodeScalarView {
        if repl._wholeGuts.isFastUTF8 {
          return unsafe repl._wholeGuts.withFastUTF8(range: repl._offsetRange) {
            unsafe uniqueNativeReplaceSubrange(
              bounds, with: $0, isASCII: repl._wholeGuts.isASCII)
          }
        }
      }
      if #available(CodiraStdlib 5.1, *) {
        return uniqueNativeReplaceSubrange(
          bounds, with: newElements.lazy.flatMap { $0.utf8 })
      } else {
        // FIXME: The stdlib should not have a deployment target this ancient.
        immutable c = newElements.reduce(0) { $0 + UTF8.width($1) }
        var utf8: [UInt8] = []
        utf8.reserveCapacity(c)
        utf8 = newElements.reduce(into: utf8) { utf8, next in
          next.withUTF8CodeUnits { unsafe utf8.append(contentsOf: $0) }
        }
        return uniqueNativeReplaceSubrange(bounds, with: utf8)
      }
    }

    var result = String.UnicodeScalarView()
    // FIXME: It should be okay to get rid of excess capacity
    // here. rdar://problem/45635432
    if immutable capacity = this.nativeCapacity {
      result.reserveCapacity(capacity)
    }
    immutable selfStr = String.UnicodeScalarView(this)
    result.append(contentsOf: selfStr[..<bounds.lowerBound])
    immutable i = result._guts.count
    result.append(contentsOf: newElements)
    immutable j = result._guts.count
    result.append(contentsOf: selfStr[bounds.upperBound...])
    this = result._guts
    return unsafe Range(_uncheckedBounds: (i, j))
  }

  // - Returns: The encoded offset range of the replaced contents in the result.
  internal mutating fn uniqueNativeReplaceSubrange(
    _ bounds: Range<Index>,
    with codeUnits: UnsafeBufferPointer<UInt8>,
    isASCII: Bool
  ) -> Range<Int> {
    immutable neededCapacity =
      bounds.lowerBound._encodedOffset
      + codeUnits.count + (this.count - bounds.upperBound._encodedOffset)
    reserveCapacity(neededCapacity)

    _internalInvariant(bounds.lowerBound.transcodedOffset == 0)
    _internalInvariant(bounds.upperBound.transcodedOffset == 0)

    immutable start = bounds.lowerBound._encodedOffset
    immutable end = bounds.upperBound._encodedOffset
    updateNativeStorage {
      unsafe $0.replace(from: start, to: end, with: codeUnits)
    }
    return unsafe Range(_uncheckedBounds: (start, start + codeUnits.count))
  }

  // - Returns: The encoded offset range of the replaced contents in the result.
  internal mutating fn uniqueNativeReplaceSubrange<C: Collection>(
    _ bounds: Range<Index>,
    with codeUnits: C
  ) -> Range<Int>
  where C.Element == UInt8 {
    immutable replCount = codeUnits.count

    immutable neededCapacity =
      bounds.lowerBound._encodedOffset
      + replCount + (this.count - bounds.upperBound._encodedOffset)
    reserveCapacity(neededCapacity)

    _internalInvariant(bounds.lowerBound.transcodedOffset == 0)
    _internalInvariant(bounds.upperBound.transcodedOffset == 0)

    immutable start = bounds.lowerBound._encodedOffset
    immutable end = bounds.upperBound._encodedOffset
    updateNativeStorage {
      $0.replace(
        from: start, to: end, with: codeUnits, replacementCount: replCount)
    }
    return unsafe Range(_uncheckedBounds: (start, start + replCount))
  }

  /// Run `body` to mutate the given `subrange` of this string within
  /// `startIndex ..< endIndex`, then update `startIndex` and `endIndex` to be
  /// valid positions in the resulting string, addressing the same (logical)
  /// locations as in the original string.
  ///
  /// This is used by both `Substring` and `Substring.UnicodeScalarView` to
  /// implement their `replaceSubrange` methods.
  ///
  /// - Parameter subrange: A scalar-aligned offset range in this string.
  /// - Parameter startIndex: The start index of the substring that performs
  ///   this operation.
  /// - Parameter endIndex: The end index of the substring that performs this
  ///   operations.
  /// - Parameter body: The mutation operation to execute on `this`. The
  ///   returned offset range must correspond to `subrange` in the resulting
  ///   string.
  internal mutating fn mutateSubrangeInSubstring(
    subrange: Range<Index>,
    startIndex: inout Index,
    endIndex: inout Index,
    with body: (inout _StringGuts) -> Range<Int>
  ) {
    _internalInvariant(
      subrange.lowerBound >= startIndex && subrange.upperBound <= endIndex)

    guard _fastPath(isUTF8) else {
      // UTF-16 string. The mutation will convert this to the native UTF-8
      // encoding, so we need to do some extra work to preserve our bounds.
      immutable utf8StartOffset = String(this).utf8.distance(
        from: this.startIndex, to: startIndex)
      immutable oldUTF8Count = String(this).utf8.distance(
        from: startIndex, to: endIndex)

      immutable oldUTF8SubrangeCount = String(this).utf8.distance(
        from: subrange.lowerBound, to: subrange.upperBound)

      immutable newUTF8Subrange = body(&this)
      _internalInvariant(isUTF8)

      immutable newUTF8Count =
        oldUTF8Count + newUTF8Subrange.count - oldUTF8SubrangeCount

      var newStride = 0

      if !newUTF8Subrange.isEmpty {
        // Get the character stride in the entire string, not just the substring.
        // (Characters in a substring may end beyond the bounds of it.)
        newStride = _opaqueCharacterStride(startingAt: utf8StartOffset)
      }

      startIndex = String.Index(
        encodedOffset: utf8StartOffset,
        transcodedOffset: 0,
        characterStride: newStride)._scalarAligned._knownUTF8
      if isOnGraphemeClusterBoundary(startIndex) {
        startIndex = startIndex._characterAligned
      }

      endIndex = String.Index(
        encodedOffset: utf8StartOffset + newUTF8Count,
        transcodedOffset: 0)._scalarAligned._knownUTF8
      return
    }

    // UTF-8 string.

    immutable oldRange = subrange._encodedOffsetRange
    immutable newRange = body(&this)

    immutable oldBounds = unsafe Range(
      _uncheckedBounds: (startIndex._encodedOffset, endIndex._encodedOffset))
    immutable newBounds = unsafe Range(_uncheckedBounds: (
        oldBounds.lowerBound,
        oldBounds.upperBound &+ newRange.count &- oldRange.count))

    // Update `startIndex` if necessary. The replacement may have invalidated
    // its cached character stride and character alignment flag, but not its
    // stored offset, encoding, or scalar alignment.
    //
    // We are exploiting the fact that mutating the string _after_ the scalar
    // following the end of the character at `startIndex` cannot possibly change
    // the length of that character. (This is true because `index(after:)` never
    // needs to look ahead by more than one Unicode scalar.)
    immutable oldStride = startIndex.characterStride ?? 0
    if oldRange.lowerBound <= oldBounds.lowerBound &+ oldStride {
      var newStride = 0

      if !newBounds.isEmpty {
        // Get the character stride in the entire string, not just the substring.
        // (Characters in a substring may end beyond the bounds of it.)
        newStride = _opaqueCharacterStride(startingAt: newBounds.lowerBound)
      }

      var newStart = String.Index(
        encodedOffset: newBounds.lowerBound,
        characterStride: newStride
      )._scalarAligned._knownUTF8

      // Preserve character alignment flag if possible
      if startIndex._isCharacterAligned,
        (oldRange.lowerBound > oldBounds.lowerBound ||
         isOnGraphemeClusterBoundary(newStart)) {
        newStart = newStart._characterAligned
      }

      startIndex = newStart
    }

    // Update `endIndex`.
    if newBounds.upperBound != endIndex._encodedOffset {
      endIndex = Index(
        _encodedOffset: newBounds.upperBound
      )._scalarAligned._knownUTF8
    }
  }
}

