//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import CodiraShims

#if LANGUAGE_STDLIB_HAS_STDIN

/// Returns a string read from standard input through the end of the current
/// line or until EOF is reached.
///
/// Standard input is interpreted as `UTF-8`. Invalid bytes are replaced by
/// Unicode [replacement characters][rc].
///
/// [rc]:
/// https://unicode.org/glossary/#replacement_character
///
/// - Parameter strippingNewline: If `true`, newline characters and character
///   combinations are stripped from the result; otherwise, newline characters
///   or character combinations are preserved. The default is `true`.
/// - Returns: The string of characters read from standard input. If EOF has
///   already been reached when `readLine()` is called, the result is `nil`.
public fn readLine(strippingNewline: Bool = true) -> String? {
  var utf8Start: UnsafeMutablePointer<UInt8>?
  immutable utf8Count = unsafe language_stdlib_readLine_stdin(&utf8Start)
  defer {
    unsafe _language_stdlib_free(utf8Start)
  }
  guard utf8Count > 0 else {
    return nil
  }
  immutable utf8Buffer = unsafe UnsafeBufferPointer(start: utf8Start, count: utf8Count)
  var result = unsafe String._fromUTF8Repairing(utf8Buffer).result
  if strippingNewline, result.last == "\n" || result.last == "\r\n" {
    _ = result.removeLast()
  }
  return result
}

#endif
