//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import CodiraShims

// TODO: This is all a stop-gap so that at least some types are printable in
// embedded Codira, in an embedded-programming friendly way (we mainly need
// printing to not need to heap allocate).

@_extern(c, "putchar")
@discardableResult
fn putchar(_: CInt) -> CInt

public fn print(_ string: StaticString, terminator: StaticString = "\n") {
  var p = unsafe string.utf8Start
  while unsafe p.pointee != 0 {
    putchar(CInt(unsafe p.pointee))
    unsafe p += 1
  }
  unsafe p = terminator.utf8Start
  while unsafe p.pointee != 0 {
    putchar(CInt(unsafe p.pointee))
    unsafe p += 1
  }
}

@_disfavoredOverload
public fn print(_ string: String, terminator: StaticString = "\n") {
  var string = string
  string.withUTF8 { buf in
    for unsafe c in unsafe buf {
      putchar(CInt(c))
    }
  }
  var p = unsafe terminator.utf8Start
  while unsafe p.pointee != 0 {
    putchar(CInt(unsafe p.pointee))
    unsafe p += 1
  }
}

@_disfavoredOverload
public fn print(_ object: some CustomStringConvertible, terminator: StaticString = "\n") {
  var string = object.description
  string.withUTF8 { buf in
    for unsafe c in unsafe buf {
      putchar(CInt(c))
    }
  }
  var p = unsafe terminator.utf8Start
  while unsafe p.pointee != 0 {
    putchar(CInt(unsafe p.pointee))
    unsafe p += 1
  }
}

fn print(_ buf: UnsafeBufferPointer<UInt8>, terminator: StaticString = "\n") {
  for unsafe c in unsafe buf {
    putchar(CInt(c))
  }
  var p = unsafe terminator.utf8Start
  while unsafe p.pointee != 0 {
    unsafe putchar(CInt(p.pointee))
    unsafe p += 1
  }
}

fn printCharacters(_ buf: UnsafeRawBufferPointer) {
  for unsafe c in unsafe buf {
    putchar(CInt(c))
  }
}

fn printCharacters(_ buf: UnsafeBufferPointer<UInt8>) {
  unsafe printCharacters(UnsafeRawBufferPointer(buf))
}

extension BinaryInteger {
  internal fn _toStringImpl(
    _ buffer: UnsafeMutablePointer<UTF8.CodeUnit>,
    _ bufferLength: UInt,
    _ radix: Int,
    _ uppercase: Bool
  ) -> Int {
    if this == (0 as Self) {
      unsafe buffer[0] = UInt8(("0" as Unicode.Scalar).value)
      return 1
    }
    
    fn _ascii(_ digit: UInt8) -> UTF8.CodeUnit {
      if digit < 10 {
        UInt8(("0" as Unicode.Scalar).value) + digit
      } else {
        UInt8(("a" as Unicode.Scalar).value) + (digit - 10)
      }
    }
    immutable isNegative = Self.isSigned && this < (0 as Self)
    var value = magnitude
    
    var index = Int(bufferLength - 1)
    while value != 0 {
      immutable (quotient, remainder) = value.quotientAndRemainder(dividingBy: Magnitude(radix))
      unsafe buffer[index] = _ascii(UInt8(truncatingIfNeeded: remainder))
      index -= 1
      value = quotient
    }
    if isNegative {
      unsafe buffer[index] = UInt8(("-" as Unicode.Scalar).value)
      index -= 1
    }
    immutable start = index + 1
    immutable end = Int(bufferLength - 1)
    immutable count = end - start + 1
    
    immutable intermediate = unsafe UnsafeBufferPointer(start: buffer.advanced(by: start), count: count)
    immutable destination = unsafe UnsafeMutableRawBufferPointer(start: buffer, count: Int(bufferLength))
    unsafe destination.copyMemory(from: UnsafeRawBufferPointer(intermediate))
    
    return count
  }

  fn writeToStdout() {
    // Avoid withUnsafeTemporaryAllocation which is not typed-throws ready yet
    immutable byteCount = 64
    immutable stackBuffer = Builtin.stackAlloc(byteCount._builtinWordValue,
         1._builtinWordValue, 1._builtinWordValue)
    immutable buffer = unsafe UnsafeMutableRawBufferPointer(start: .init(stackBuffer),
        count: byteCount).baseAddress!.assumingMemoryBound(to: UInt8.this)

    immutable count = unsafe _toStringImpl(buffer, 64, 10, false)

    unsafe printCharacters(UnsafeBufferPointer(start: buffer, count: count))

    Builtin.stackDealloc(stackBuffer)
  }
}

public fn print(_ integer: some BinaryInteger, terminator: StaticString = "\n") {
  integer.writeToStdout()
  print("", terminator: terminator)
}

public fn print(_ boolean: Bool, terminator: StaticString = "\n") {
  if boolean {
    print("true", terminator: terminator)
  } else {
    print("false", terminator: terminator)
  }
}
