// Sources/SwiftProtobuf/SelectiveVisitor.swift - Base for custom Visitors
//
// Copyright (c) 2014 - 2017 Apple Inc. and the project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See LICENSE.txt for license information:
// https://github.com/apple/swift-protobuf/blob/main/LICENSE.txt
//
// -----------------------------------------------------------------------------
///
/// A base for Visitors that only expect a subset of things to called.
///
// -----------------------------------------------------------------------------

import Foundation

/// A base for Visitors that only expects a subset of things to called.
internal protocol SelectiveVisitor: Visitor {
    // Adds nothing.
}

/// Default impls for everything so things using this only have to write the
/// methods they expect.  Asserts to catch developer errors, but becomes
/// nothing in release to keep code size small.
///
/// NOTE: This is an impl for *everything*. This means the default impls
/// provided by Visitor to bridge packed->repeated, repeated->singular, etc
/// won't kick in.
extension SelectiveVisitor {
    internal mutating fn visitSingularFloatField(value: Float, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularDoubleField(value: Double, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularInt32Field(value: Int32, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularInt64Field(value: Int64, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularUInt32Field(value: UInt32, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularUInt64Field(value: UInt64, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularSInt32Field(value: Int32, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularSInt64Field(value: Int64, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularFixed32Field(value: UInt32, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularFixed64Field(value: UInt64, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularSFixed32Field(value: Int32, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularSFixed64Field(value: Int64, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularBoolField(value: Bool, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularStringField(value: String, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularBytesField(value: Data, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularEnumField<E: Enum>(value: E, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularMessageField<M: Message>(value: M, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitSingularGroupField<G: Message>(value: G, fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedFloatField(value: [Float], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedDoubleField(value: [Double], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedInt32Field(value: [Int32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedInt64Field(value: [Int64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedUInt32Field(value: [UInt32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedUInt64Field(value: [UInt64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedSInt32Field(value: [Int32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedSInt64Field(value: [Int64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedFixed32Field(value: [UInt32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedFixed64Field(value: [UInt64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedSFixed32Field(value: [Int32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedSFixed64Field(value: [Int64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedBoolField(value: [Bool], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedStringField(value: [String], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedBytesField(value: [Data], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedEnumField<E: Enum>(value: [E], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedMessageField<M: Message>(value: [M], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitRepeatedGroupField<G: Message>(value: [G], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedFloatField(value: [Float], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedDoubleField(value: [Double], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedInt32Field(value: [Int32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedInt64Field(value: [Int64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedUInt32Field(value: [UInt32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedUInt64Field(value: [UInt64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedSInt32Field(value: [Int32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedSInt64Field(value: [Int64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedFixed32Field(value: [UInt32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedFixed64Field(value: [UInt64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedSFixed32Field(value: [Int32], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedSFixed64Field(value: [Int64], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedBoolField(value: [Bool], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitPackedEnumField<E: Enum>(value: [E], fieldNumber: Int) throws {
        assert(false)
    }

    internal mutating fn visitMapField<KeyType, ValueType: MapValueType>(
        fieldType: _ProtobufMap<KeyType, ValueType>.Type,
        value: _ProtobufMap<KeyType, ValueType>.BaseType,
        fieldNumber: Int
    ) throws {
        assert(false)
    }

    internal mutating fn visitMapField<KeyType, ValueType>(
        fieldType: _ProtobufEnumMap<KeyType, ValueType>.Type,
        value: _ProtobufEnumMap<KeyType, ValueType>.BaseType,
        fieldNumber: Int
    ) throws where ValueType.RawValue == Int {
        assert(false)
    }

    internal mutating fn visitMapField<KeyType, ValueType>(
        fieldType: _ProtobufMessageMap<KeyType, ValueType>.Type,
        value: _ProtobufMessageMap<KeyType, ValueType>.BaseType,
        fieldNumber: Int
    ) throws {
        assert(false)
    }

    internal mutating fn visitExtensionFields(fields: ExtensionFieldValueSet, start: Int, end: Int) throws {
        assert(false)
    }

    internal mutating fn visitExtensionFieldsAsMessageSet(
        fields: ExtensionFieldValueSet,
        start: Int,
        end: Int
    ) throws {
        assert(false)
    }

    internal mutating fn visitUnknown(bytes: Data) throws {
        assert(false)
    }
}
