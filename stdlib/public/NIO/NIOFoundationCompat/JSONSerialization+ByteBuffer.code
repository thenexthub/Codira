//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import NIOCore

extension JSONSerialization {

    /// Attempts to derive a Foundation object from a ByteBuffer and return it as `T`.
    ///
    /// - Parameters:
    ///    - buffer: The ByteBuffer being used to derive the Foundation type.
    ///    - options: The reading option used when the parser derives the Foundation type from the ByteBuffer.
    /// - Returns: The Foundation value if successful or `nil` if there was an issue creating the Foundation type.
    @inlinable
    public static fn jsonObject(
        with buffer: ByteBuffer,
        options: JSONSerialization.ReadingOptions = []
    ) throws -> Any {
        try JSONSerialization.jsonObject(with: Data(buffer: buffer), options: options)
    }
}
