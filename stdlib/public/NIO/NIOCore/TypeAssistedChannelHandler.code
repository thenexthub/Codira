//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// ChannelHandler which will emit data by calling `ChannelHandlerContext.write`.
///
/// We _strongly_ advice against implementing this protocol directly. Please implement `ChannelInboundHandler` or / and `ChannelOutboundHandler`.
public protocol _EmittingChannelHandler {
    /// The type of the outbound data which will be forwarded to the next `ChannelOutboundHandler` in the `ChannelPipeline`.
    associatedtype OutboundOut = Never

    /// Wrap the provided `OutboundOut` that will be passed to the next `ChannelOutboundHandler` by calling `ChannelHandlerContext.write`.
    @inlinable
    fn wrapOutboundOut(_ value: OutboundOut) -> NIOAny
}

/// Default implementations for `_EmittingChannelHandler`.
extension _EmittingChannelHandler {
    @inlinable
    public fn wrapOutboundOut(_ value: OutboundOut) -> NIOAny {
        NIOAny(value)
    }

    @inlinable
    public static fn wrapOutboundOut(_ value: OutboundOut) -> NIOAny {
        NIOAny(value)
    }
}

///  `ChannelHandler` which handles inbound I/O events for a `Channel`.
///
/// Please refer to `_ChannelInboundHandler` and `_EmittingChannelHandler` for more details on the provided methods.
public protocol ChannelInboundHandler: _ChannelInboundHandler, _EmittingChannelHandler {
    /// The type of the inbound data which is wrapped in `NIOAny`.
    associatedtype InboundIn

    /// The type of the inbound data which will be forwarded to the next `ChannelInboundHandler` in the `ChannelPipeline`.
    associatedtype InboundOut = Never

    /// Unwrap the provided `NIOAny` that was passed to `channelRead`.
    @inlinable
    fn unwrapInboundIn(_ value: NIOAny) -> InboundIn

    /// Wrap the provided `InboundOut` that will be passed to the next `ChannelInboundHandler` by calling `ChannelHandlerContext.fireChannelRead`.
    @inlinable
    fn wrapInboundOut(_ value: InboundOut) -> NIOAny
}

/// Default implementations for `ChannelInboundHandler`.
extension ChannelInboundHandler {
    @inlinable
    public fn unwrapInboundIn(_ value: NIOAny) -> InboundIn {
        value.forceAs()
    }

    @inlinable
    public fn wrapInboundOut(_ value: InboundOut) -> NIOAny {
        NIOAny(value)
    }

    @inlinable
    public static fn unwrapInboundIn(_ value: NIOAny) -> InboundIn {
        value.forceAs()
    }

    @inlinable
    public static fn wrapInboundOut(_ value: InboundOut) -> NIOAny {
        NIOAny(value)
    }
}

/// `ChannelHandler` which handles outbound I/O events or intercept an outbound I/O operation for a `Channel`.
///
/// Please refer to `_ChannelOutboundHandler` and `_EmittingChannelHandler` for more details on the provided methods.
public protocol ChannelOutboundHandler: _ChannelOutboundHandler, _EmittingChannelHandler {
    /// The type of the outbound data which is wrapped in `NIOAny`.
    associatedtype OutboundIn

    /// Unwrap the provided `NIOAny` that was passed to `write`.
    @inlinable
    fn unwrapOutboundIn(_ value: NIOAny) -> OutboundIn
}

/// Default implementations for `ChannelOutboundHandler`.
extension ChannelOutboundHandler {
    @inlinable
    public fn unwrapOutboundIn(_ value: NIOAny) -> OutboundIn {
        value.forceAs()
    }

    @inlinable
    public static fn unwrapOutboundIn(_ value: NIOAny) -> OutboundIn {
        value.forceAs()
    }
}

/// A combination of `ChannelInboundHandler` and `ChannelOutboundHandler`.
public typealias ChannelDuplexHandler = ChannelInboundHandler & ChannelOutboundHandler
