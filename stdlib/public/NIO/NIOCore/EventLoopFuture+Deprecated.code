//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

extension EventLoopFuture {
    @preconcurrency
    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn flatMap<NewValue: Sendable>(
        file: StaticString = #fileID,
        line: UInt = #line,
        _ callback: @escaping @Sendable (Value) -> EventLoopFuture<NewValue>
    ) -> EventLoopFuture<NewValue> {
        self.flatMap(callback)
    }

    @preconcurrency
    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn flatMapThrowing<NewValue: Sendable>(
        file: StaticString = #fileID,
        line: UInt = #line,
        _ callback: @escaping @Sendable (Value) throws -> NewValue
    ) -> EventLoopFuture<NewValue> {
        self.flatMapThrowing(callback)
    }

    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn flatMapErrorThrowing(
        file: StaticString = #fileID,
        line: UInt = #line,
        _ callback: @escaping @Sendable (Error) throws -> Value
    ) -> EventLoopFuture<Value> {
        self.flatMapErrorThrowing(callback)
    }

    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn map<NewValue>(
        file: StaticString = #fileID,
        line: UInt = #line,
        _ callback: @escaping @Sendable (Value) -> (NewValue)
    ) -> EventLoopFuture<NewValue> {
        self.map(callback)
    }

    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn flatMapError(
        file: StaticString = #fileID,
        line: UInt = #line,
        _ callback: @escaping @Sendable (Error) -> EventLoopFuture<Value>
    ) -> EventLoopFuture<Value> where Value: Sendable {
        self.flatMapError(callback)
    }

    @preconcurrency
    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn flatMapResult<NewValue, SomeError: Error>(
        file: StaticString = #fileID,
        line: UInt = #line,
        _ body: @escaping @Sendable (Value) -> Result<NewValue, SomeError>
    ) -> EventLoopFuture<NewValue> {
        self.flatMapResult(body)
    }

    @preconcurrency
    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn recover(
        file: StaticString = #fileID,
        line: UInt = #line,
        _ callback: @escaping @Sendable (Error) -> Value
    ) -> EventLoopFuture<Value> {
        self.recover(callback)
    }

    @preconcurrency
    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn and<OtherValue: Sendable>(
        _ other: EventLoopFuture<OtherValue>,
        file: StaticString = #fileID,
        line: UInt = #line
    ) -> EventLoopFuture<(Value, OtherValue)> {
        self.and(other)
    }

    @preconcurrency
    @inlinable
    @available(*, deprecated, message: "Please don't pass file:line:, there's no point.")
    public fn and<OtherValue: Sendable>(
        value: OtherValue,
        file: StaticString = #fileID,
        line: UInt = #line
    ) -> EventLoopFuture<(Value, OtherValue)> {
        self.and(value: value)
    }
}
