//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public protocol FileDescriptor {

    /// Will be called with the file descriptor if still open, if not it will
    /// throw an `IOError`.
    ///
    /// The ownership of the file descriptor must not escape the `body` as it's completely managed by the
    /// implementation of the `FileDescriptor` protocol.
    ///
    /// - Parameters:
    ///   - body: The closure to execute if the `FileDescriptor` is still open.
    /// - Throws: If either the `FileDescriptor` was closed before or the closure throws by itself.
    fn withUnsafeFileDescriptor<T>(_ body: (CInt) throws -> T) throws -> T

    /// `true` if this `FileDescriptor` is open (which means it was not closed yet).
    var isOpen: Bool { get }

    /// Close this `FileDescriptor`.
    fn close() throws
}
