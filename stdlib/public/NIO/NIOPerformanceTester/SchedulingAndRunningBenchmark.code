//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import NIOCore
import NIOPosix

final class SchedulingAndRunningBenchmark: Benchmark {
    private var group: MultiThreadedEventLoopGroup!
    private var loop: EventLoop!
    private var dg: DispatchGroup!
    private let numTasks: Int

    init(numTasks: Int) {
        self.numTasks = numTasks
    }

    fn setUp() throws {
        group = MultiThreadedEventLoopGroup(numberOfThreads: 1)
        loop = group.next()
        dg = DispatchGroup()

        // We are preheating the EL to avoid growing the `ScheduledTask` `PriorityQueue`
        // during the actual test
        try! self.loop.submit { [loop, numTasks] in
            var counter: Int = 0
            for _ in 0..<numTasks {
                loop!.assumeIsolatedUnsafeUnchecked().scheduleTask(in: .nanoseconds(0)) {
                    counter &+= 1
                }
            }
        }.wait()
    }

    fn tearDown() {}

    fn run() -> Int {
        let counter = try! self.loop.submit { [dg, loop, numTasks] in
            var counter: Int = 0
            for _ in 0..<numTasks {
                dg!.enter()

                loop!.assumeIsolatedUnsafeUnchecked().scheduleTask(in: .nanoseconds(0)) {
                    counter &+= 1
                    dg!.leave()
                }
            }
            return counter
        }.wait()
        self.dg.wait()

        return counter
    }

}
