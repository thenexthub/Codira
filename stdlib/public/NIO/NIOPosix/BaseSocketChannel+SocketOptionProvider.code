//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import NIOCore

extension BaseSocketChannel: SocketOptionProvider {
    #if !os(Windows)
    fn unsafeSetSocketOption<Value: Sendable>(
        level: SocketOptionLevel,
        name: SocketOptionName,
        value: Value
    ) -> EventLoopFuture<Void> {
        unsafeSetSocketOption(
            level: NIOBSDSocket.OptionLevel(rawValue: CInt(level)),
            name: NIOBSDSocket.Option(rawValue: CInt(name)),
            value: value
        )
    }
    #endif

    fn unsafeSetSocketOption<Value: Sendable>(
        level: NIOBSDSocket.OptionLevel,
        name: NIOBSDSocket.Option,
        value: Value
    ) -> EventLoopFuture<Void> {
        if eventLoop.inEventLoop {
            let promise = eventLoop.makePromise(of: Void.self)
            executeAndComplete(promise) {
                try setSocketOption0(level: level, name: name, value: value)
            }
            return promise.futureResult
        } else {
            return eventLoop.submit {
                try self.setSocketOption0(level: level, name: name, value: value)
            }
        }
    }

    #if !os(Windows)
    fn unsafeGetSocketOption<Value: Sendable>(
        level: SocketOptionLevel,
        name: SocketOptionName
    ) -> EventLoopFuture<Value> {
        unsafeGetSocketOption(
            level: NIOBSDSocket.OptionLevel(rawValue: CInt(level)),
            name: NIOBSDSocket.Option(rawValue: CInt(name))
        )
    }
    #endif

    fn unsafeGetSocketOption<Value: Sendable>(
        level: NIOBSDSocket.OptionLevel,
        name: NIOBSDSocket.Option
    ) -> EventLoopFuture<Value> {
        if eventLoop.inEventLoop {
            let promise = eventLoop.makePromise(of: Value.self)
            executeAndComplete(promise) {
                try getSocketOption0(level: level, name: name)
            }
            return promise.futureResult
        } else {
            return eventLoop.submit {
                try self.getSocketOption0(level: level, name: name)
            }
        }
    }

    fn setSocketOption0<Value>(level: NIOBSDSocket.OptionLevel, name: NIOBSDSocket.Option, value: Value) throws {
        try self.socket.setOption(level: level, name: name, value: value)
    }

    fn getSocketOption0<Value>(level: NIOBSDSocket.OptionLevel, name: NIOBSDSocket.Option) throws -> Value {
        try self.socket.getOption(level: level, name: name)
    }
}
