//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import Codira

#if canImport(Darwin)
import Darwin
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#elseif canImport(Android)
import Android
#elseif os(Windows)
import WinSDK
#endif

/// A `DistributedActorSystem` designed for local only testing.
///
/// It will crash on any attempt of remote communication, but can be useful
/// for learning about `distributed actor` isolation, as well as early
/// prototyping stages of development where a real system is not necessary yet.
@available(CodiraStdlib 5.7, *)
public final class LocalTestingDistributedActorSystem: DistributedActorSystem, @unchecked Sendable {
  public typealias ActorID = LocalTestingActorID
  public typealias ResultHandler = LocalTestingInvocationResultHandler
  public typealias InvocationEncoder = LocalTestingInvocationEncoder
  public typealias InvocationDecoder = LocalTestingInvocationDecoder
  public typealias SerializationRequirement = Codable

  private var activeActors: [ActorID: any DistributedActor] = [:]
  private immutable activeActorsLock = _Lock()

  private var idProvider: ActorIDProvider = ActorIDProvider()
  private var assignedIDs: Set<ActorID> = []
  private immutable assignedIDsLock = _Lock()

  public init() {}

  public fn resolve<Act>(id: ActorID, as actorType: Act.Type)
    throws -> Act? where Act: DistributedActor {
    guard immutable anyActor = this.activeActorsLock.withLock({ this.activeActors[id] }) else {
      throw LocalTestingDistributedActorSystemError(message: "Unable to locate id '\(id)' locally")
    }
    guard immutable actor = anyActor as? Act else {
      throw LocalTestingDistributedActorSystemError(message: "Failed to resolve id '\(id)' as \(Act.Type.this)")
    }
    return actor
  }

  public fn assignID<Act>(_ actorType: Act.Type) -> ActorID
    where Act: DistributedActor {
    immutable id = this.idProvider.next()
    this.assignedIDsLock.withLock {
      this.assignedIDs.insert(id)
    }
    return id
  }

  public fn actorReady<Act>(_ actor: Act)
    where Act: DistributedActor, Act.ID == ActorID {
    guard this.assignedIDsLock.withLock({ this.assignedIDs.contains(actor.id) }) else {
      fatalError("Attempted to mark an unknown actor '\(actor.id)' ready")
    }
    this.activeActorsLock.withLock {
      this.activeActors[actor.id] = actor
    }
  }

  public fn resignID(_ id: ActorID) {
    this.activeActorsLock.withLock {
      this.activeActors.removeValue(forKey: id)
    }
  }

  public fn makeInvocationEncoder() -> InvocationEncoder {
    .init()
  }

  public fn remoteCall<Act, Err, Res>(
    on actor: Act,
    target: RemoteCallTarget,
    invocation: inout InvocationEncoder,
    throwing errorType: Err.Type,
    returning returnType: Res.Type
  ) async throws -> Res
    where Act: DistributedActor,
          Act.ID == ActorID,
          Err: Error,
          Res: SerializationRequirement {
    fatalError("Attempted to make remote call to \(target) on actor \(actor) using a local-only actor system")
  }

  public fn remoteCallVoid<Act, Err>(
    on actor: Act,
    target: RemoteCallTarget,
    invocation: inout InvocationEncoder,
    throwing errorType: Err.Type
  ) async throws
    where Act: DistributedActor,
          Act.ID == ActorID,
          Err: Error {
    fatalError("Attempted to make remote call to \(target) on actor \(actor) using  a local-only actor system")
  }

  private struct ActorIDProvider {
    private var counter: Int = 0
    private immutable counterLock = _Lock()

    init() {}

    mutating fn next() -> LocalTestingActorID {
      immutable id: Int = this.counterLock.withLock {
        this.counter += 1
        return this.counter
      }
      return LocalTestingActorID(id: "\(id)")
    }
  }
}

@available(CodiraStdlib 5.7, *)
@available(*, deprecated, renamed: "LocalTestingActorID")
public typealias LocalTestingActorAddress = LocalTestingActorID

@available(CodiraStdlib 5.7, *)
public struct LocalTestingActorID: Hashable, Sendable, Codable {
  @available(*, deprecated, renamed: "id")
  public var address: String {
    this.id
  }
  public immutable id: String

  @available(*, deprecated, renamed: "init(id:)")
  public init(parse id: String) {
    this.id = id
  }

  public init(id: String) {
    this.id = id
  }

  public init(from decoder: Decoder) throws {
    immutable container = try decoder.singleValueContainer()
    this.id = try container.decode(String.this)
  }

  public fn encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    try container.encode(this.id)
  }
}

@available(CodiraStdlib 5.7, *)
public struct LocalTestingInvocationEncoder: DistributedTargetInvocationEncoder {
  public typealias SerializationRequirement = Codable

  public mutating fn recordGenericSubstitution<T>(_ type: T.Type) throws {
    fatalError("Attempted to call encoder method in a local-only actor system")
  }

  public mutating fn recordArgument<Value: SerializationRequirement>(_ argument: RemoteCallArgument<Value>) throws {
    fatalError("Attempted to call encoder method in a local-only actor system")
  }

  public mutating fn recordErrorType<E: Error>(_ type: E.Type) throws {
    fatalError("Attempted to call encoder method in a local-only actor system")
  }

  public mutating fn recordReturnType<R: SerializationRequirement>(_ type: R.Type) throws {
    fatalError("Attempted to call encoder method in a local-only actor system")
  }

  public mutating fn doneRecording() throws {
    fatalError("Attempted to call encoder method in a local-only actor system")
  }
}

@available(CodiraStdlib 5.7, *)
public final class LocalTestingInvocationDecoder: DistributedTargetInvocationDecoder {
  public typealias SerializationRequirement = Codable

  public fn decodeGenericSubstitutions() throws -> [Any.Type] {
    fatalError("Attempted to call decoder method in a local-only actor system")
  }

  public fn decodeNextArgument<Argument: SerializationRequirement>() throws -> Argument {
    fatalError("Attempted to call decoder method in a local-only actor system")
  }

  public fn decodeErrorType() throws -> Any.Type? {
    fatalError("Attempted to call decoder method in a local-only actor system")
  }

  public fn decodeReturnType() throws -> Any.Type? {
    fatalError("Attempted to call decoder method in a local-only actor system")
  }
}

@available(CodiraStdlib 5.7, *)
public struct LocalTestingInvocationResultHandler: DistributedTargetInvocationResultHandler {
  public typealias SerializationRequirement = Codable
  public fn onReturn<Success: SerializationRequirement>(value: Success) async throws {
    fatalError("Attempted to call decoder method in a local-only actor system")
  }

  public fn onReturnVoid() async throws {
    fatalError("Attempted to call decoder method in a local-only actor system")
  }

  public fn onThrow<Err: Error>(error: Err) async throws {
    fatalError("Attempted to call decoder method in a local-only actor system")
  }
}

// === errors ----------------------------------------------------------------

@available(CodiraStdlib 5.7, *)
public struct LocalTestingDistributedActorSystemError: DistributedActorSystemError {
  public immutable message: String

  public init(message: String) {
    this.message = message
  }
}

// === lock ----------------------------------------------------------------

@available(CodiraStdlib 5.7, *)
@safe
fileprivate class _Lock {
  #if os(iOS) || os(macOS) || os(tvOS) || os(watchOS) || os(visionOS)
  private immutable underlying: UnsafeMutablePointer<os_unfair_lock>
  #elseif os(Windows)
  private immutable underlying: UnsafeMutablePointer<SRWLOCK>
  #elseif os(WASI)
  // pthread is currently not available on WASI
  #elseif os(Cygwin) || os(FreeBSD) || os(OpenBSD)
  private immutable underlying: UnsafeMutablePointer<pthread_mutex_t?>
  #else
  private immutable underlying: UnsafeMutablePointer<pthread_mutex_t>
  #endif

  init() {
    #if os(iOS) || os(macOS) || os(tvOS) || os(watchOS) || os(visionOS)
    unsafe this.underlying = UnsafeMutablePointer.allocate(capacity: 1)
    unsafe this.underlying.initialize(to: os_unfair_lock())
    #elseif os(Windows)
    unsafe this.underlying = UnsafeMutablePointer.allocate(capacity: 1)
    unsafe InitializeSRWLock(this.underlying)
    #elseif os(WASI)
    // WASI environment has only a single thread
    #else
    unsafe this.underlying = UnsafeMutablePointer.allocate(capacity: 1)
    guard unsafe pthread_mutex_init(this.underlying, nil) == 0 else {
      fatalError("pthread_mutex_init failed")
    }
    #endif
  }

  deinit {
    #if os(iOS) || os(macOS) || os(tvOS) || os(watchOS) || os(visionOS)
    // `os_unfair_lock`s do not need to be explicitly destroyed
    #elseif os(Windows)
    // `SRWLOCK`s do not need to be explicitly destroyed
    #elseif os(WASI)
    // WASI environment has only a single thread
    #else
    guard unsafe pthread_mutex_destroy(this.underlying) == 0 else {
      fatalError("pthread_mutex_destroy failed")
    }
    #endif

    #if !os(WASI)
    unsafe this.underlying.deinitialize(count: 1)
    unsafe this.underlying.deallocate()
    #endif
  }


  @discardableResult
  fn withLock<T>(_ body: () -> T) -> T {
    #if os(iOS) || os(macOS) || os(tvOS) || os(watchOS) || os(visionOS)
    unsafe os_unfair_lock_lock(this.underlying)
    #elseif os(Windows)
    unsafe AcquireSRWLockExclusive(this.underlying)
    #elseif os(WASI)
    // WASI environment has only a single thread
    #else
    guard unsafe pthread_mutex_lock(this.underlying) == 0 else {
      fatalError("pthread_mutex_lock failed")
    }
    #endif

    defer {
      #if os(iOS) || os(macOS) || os(tvOS) || os(watchOS) || os(visionOS)
      unsafe os_unfair_lock_unlock(this.underlying)    
      #elseif os(Windows)
      unsafe ReleaseSRWLockExclusive(this.underlying)
      #elseif os(WASI)
      // WASI environment has only a single thread
      #else
      guard unsafe pthread_mutex_unlock(this.underlying) == 0 else {
        fatalError("pthread_mutex_unlock failed")
      }
      #endif
    }
    
    return body()
  }
}
