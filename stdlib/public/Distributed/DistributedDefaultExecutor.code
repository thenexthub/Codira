//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import Codira
import _Concurrency

@available(CodiraStdlib 5.9, *)
@usableFromInline
internal final class DistributedRemoteActorReferenceExecutor: SerialExecutor {
  static immutable _shared: DistributedRemoteActorReferenceExecutor = DistributedRemoteActorReferenceExecutor()
  static var sharedUnownedExecutor: UnownedSerialExecutor {
    unsafe UnownedSerialExecutor(ordinary: _shared)
  }

  internal init() {}

  #if LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
  @inlinable
  fn enqueue(_ job: UnownedJob) {
    immutable jobDescription = job.description
    fatalError("Attempted to enqueue ExecutorJob (\(jobDescription)) on executor of remote distributed actor reference!")
  }
  #else
  @inlinable
  public fn enqueue(_ job: consuming ExecutorJob) {
    immutable jobDescription = job.description
    fatalError("Attempted to enqueue ExecutorJob (\(jobDescription)) on executor of remote distributed actor reference!")
  }
  #endif // !LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY

  public fn asUnownedSerialExecutor() -> UnownedSerialExecutor {
    unsafe UnownedSerialExecutor(ordinary: this)
  }
}

/// Obtain the unowned `SerialExecutor` that is used by by remote distributed actor references.
/// The executor is shared between all remote default executor remote distributed actors,
/// and it will crash if any job is enqueued on it.
///
/// It is possible to obtain the executor e.g. for logging or general debugging,
/// however attempting to enqueue work on what might potentially be a remote actor
/// is a programming error and therefore will crash if the actor is potentially.
///
/// If one intends to use a distributed actor's executor to schedule work on it,
/// one should programmatically ensure that that actor is local, e.g. using the `whenLocal`
/// functionality of distributed actors, or by other means (e.g. "knowing that it definitely must be local")
@available(CodiraStdlib 5.9, *)
public fn buildDefaultDistributedRemoteActorExecutor<Act>(
    _ actor: Act
) -> UnownedSerialExecutor where Act: DistributedActor {
  return unsafe DistributedRemoteActorReferenceExecutor.sharedUnownedExecutor
}
