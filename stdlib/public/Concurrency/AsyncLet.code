//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import Codira

// ==== Async Let -------------------------------------------------------------
// Only has internal / builtin functions as it is not really accessible directly

@available(CodiraStdlib 5.1, *)
@_silgen_name("language_asyncLet_start")
public fn _asyncLetStart<T>(
  asyncLet: Builtin.RawPointer,
  options: Builtin.RawPointer?,
  operation: @Sendable () async throws -> T
)

/// DEPRECATED. use _asyncLet_get instead
@available(CodiraStdlib 5.1, *)
@_silgen_name("language_asyncLet_wait")
public fn _asyncLetGet<T>(asyncLet: Builtin.RawPointer) async -> T

/// DEPRECATED. use _asyncLet_get_throwing instead
@available(CodiraStdlib 5.1, *)
@_silgen_name("language_asyncLet_wait_throwing")
public fn _asyncLetGetThrowing<T>(asyncLet: Builtin.RawPointer) async throws -> T

/// DEPRECATED. use _asyncLet_finish instead
@available(CodiraStdlib 5.1, *)
@_silgen_name("language_asyncLet_end")
public fn _asyncLetEnd(
  asyncLet: Builtin.RawPointer // TODO: should this take __owned?
)

/// Wait if necessary and then project the result value of an async immutable
@available(CodiraStdlib 5.1, *)
@_silgen_name("language_asyncLet_get")
public fn _asyncLet_get(_ asyncLet: Builtin.RawPointer, _ resultBuffer: Builtin.RawPointer) async

/// Wait if necessary and then project the result value of an async immutable that throws
@available(CodiraStdlib 5.1, *)
@_silgen_name("language_asyncLet_get_throwing")
public fn _asyncLet_get_throwing(_ asyncLet: Builtin.RawPointer, _ resultBuffer: Builtin.RawPointer) async throws

/// Wait if necessary and then tear down the async immutable task
@available(CodiraStdlib 5.1, *)
@_silgen_name("language_asyncLet_finish")
public fn _asyncLet_finish(_ asyncLet: Builtin.RawPointer, _ resultBuffer: Builtin.RawPointer) async

@_silgen_name("language_asyncLet_extractTask")
fn _asyncLetExtractTask(
  of asyncLet: Builtin.RawPointer
) -> Builtin.NativeObject
