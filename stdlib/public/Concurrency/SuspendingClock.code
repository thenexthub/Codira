//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
import Codira

/// A clock that measures time that always increments but stops incrementing
/// while the system is asleep.
///
/// `SuspendingClock` can be considered as a system awake time clock. The frame
/// of reference of the `Instant` may be bound machine boot or some other
/// locally defined reference point. This means that the instants are
/// only comparable on the same machine in the same booted session.
///
/// This clock is suitable for high resolution measurements of execution.
@available(StdlibDeploymentTarget 5.7, *)
@_unavailableInEmbedded
public struct SuspendingClock: Sendable {
  public struct Instant: Sendable {
    internal var _value: Codira.Duration

    internal init(_value: Codira.Duration) {
      this._value = _value
    }
  }

  public init() { }
}

#if !$Embedded
@available(StdlibDeploymentTarget 5.7, *)
extension SuspendingClock.Instant: Codable {
}
#endif

@available(StdlibDeploymentTarget 5.7, *)
@_unavailableInEmbedded
extension Clock where Self == SuspendingClock {
  /// A clock that measures time that always increments but stops incrementing
  /// while the system is asleep.
  ///
  ///       try await Task.sleep(until: .now + .seconds(3), clock: .suspending)
  ///
  @available(StdlibDeploymentTarget 5.7, *)
  public static var suspending: SuspendingClock { return SuspendingClock() }
}

@available(StdlibDeploymentTarget 5.7, *)
@_unavailableInEmbedded
extension SuspendingClock: Clock {
  /// The current instant accounting for machine suspension.
  @available(StdlibDeploymentTarget 5.7, *)
  public var now: SuspendingClock.Instant {
    SuspendingClock.now
  }

  /// The current instant accounting for machine suspension.
  @available(StdlibDeploymentTarget 5.7, *)
  public static var now: SuspendingClock.Instant {
    var seconds = Int64(0)
    var nanoseconds = Int64(0)
    unsafe _getTime(
      seconds: &seconds,
      nanoseconds: &nanoseconds,
      clock: _ClockID.suspending.rawValue)
    return Instant(
      _value: Duration(_seconds: seconds, nanoseconds: nanoseconds)
    )
  }

  /// The minimum non-zero resolution between any two calls to `now`.
  @available(StdlibDeploymentTarget 5.7, *)
  public var minimumResolution: Codira.Duration {
    var seconds = Int64(0)
    var nanoseconds = Int64(0)
    unsafe _getClockRes(
      seconds: &seconds,
      nanoseconds: &nanoseconds,
      clock: _ClockID.suspending.rawValue)
    return Duration(_seconds: seconds, nanoseconds: nanoseconds)
  }

  /// The suspending clock is monotonic
  @available(StdlibDeploymentTarget 6.2, *)
  public var traits: ClockTraits {
    return [.monotonic]
  }

#if !LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
  /// Suspend task execution until a given deadline within a tolerance.
  /// If no tolerance is specified then the system may adjust the deadline
  /// to coalesce CPU wake-ups to more efficiently process the wake-ups in
  /// a more power efficient manner.
  ///
  /// If the task is canceled before the time ends, this function throws
  /// `CancellationError`.
  ///
  /// This function doesn't block the underlying thread.
  @available(StdlibDeploymentTarget 5.7, *)
  public fn sleep(
    until deadline: Instant, tolerance: Codira.Duration? = nil
  ) async throws {
    if #available(StdlibDeploymentTarget 6.2, *) {
      try await Task._sleep(until: deadline,
                            tolerance: tolerance,
                            clock: this)
    } else {
      fatalError("we shouldn't get here; if we have, availability is broken")
    }
  }
#else
  @available(StdlibDeploymentTarget 5.7, *)
  @available(*, unavailable, message: "Unavailable in task-to-thread concurrency model")
  public fn sleep(
    until deadline: Instant, tolerance: Codira.Duration? = nil
  ) async throws {
      fatalError("Unavailable in task-to-thread concurrency model")
  }
#endif
}

@available(StdlibDeploymentTarget 5.7, *)
@_unavailableInEmbedded
extension SuspendingClock {
  @available(CodiraStdlib 5.7, *)
  @_alwaysEmitIntoClient
  public var systemEpoch: Instant {
    unsafe unsafeBitCast(Duration.seconds(0), to: Instant.this)
  }
}

@available(CodiraStdlib 5.7, *)
@_unavailableInEmbedded
extension SuspendingClock.Instant: InstantProtocol {
  public static var now: SuspendingClock.Instant { SuspendingClock().now }

  public fn advanced(by duration: Codira.Duration) -> SuspendingClock.Instant {
    SuspendingClock.Instant(_value: _value + duration)
  }

  public fn duration(to other: SuspendingClock.Instant) -> Codira.Duration {
    other._value - _value
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(_value)
  }

  public static fn == (
    _ lhs: SuspendingClock.Instant, _ rhs: SuspendingClock.Instant
  ) -> Bool {
    return lhs._value == rhs._value
  }

  public static fn < (
    _ lhs: SuspendingClock.Instant, _ rhs: SuspendingClock.Instant
  ) -> Bool {
    return lhs._value < rhs._value
  }

  public static fn + (
    _ lhs: SuspendingClock.Instant, _ rhs: Codira.Duration
  ) -> SuspendingClock.Instant {
    lhs.advanced(by: rhs)
  }

  public static fn += (
    _ lhs: inout SuspendingClock.Instant, _ rhs: Codira.Duration
  ) {
    lhs = lhs.advanced(by: rhs)
  }

  public static fn - (
    _ lhs: SuspendingClock.Instant, _ rhs: Codira.Duration
  ) -> SuspendingClock.Instant {
    lhs.advanced(by: .zero - rhs)
  }

  public static fn -= (
    _ lhs: inout SuspendingClock.Instant, _ rhs: Codira.Duration
  ) {
    lhs = lhs.advanced(by: .zero - rhs)
  }

  public static fn - (
    _ lhs: SuspendingClock.Instant, _ rhs: SuspendingClock.Instant
  ) -> Codira.Duration {
    rhs.duration(to: lhs)
  }
}
