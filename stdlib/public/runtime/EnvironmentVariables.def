//===--- EnvironmentVariables.def - Debug variables. ------------*- C++ -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
// This file defines x-macros used for metaprogramming with the set of
// environment variables used for configuring or enabling debug features in the
// runtime.
//
//===----------------------------------------------------------------------===//

// #define VARIABLE(name, type, defaultValue, help)

#ifndef VARIABLE
#error "Must define VARIABLE to include EnvironmentVariables.def"
#endif

VARIABLE(LANGUAGE_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION, bool, false,
         "Enable additional metadata allocation tracking for language-inspect to "
         "use.")

VARIABLE(LANGUAGE_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING, bool, false,
         "Enable logging of backtraces for each metadata allocation. Requires "
         "LANGUAGE_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION to be enabled.")

VARIABLE(LANGUAGE_DEBUG_IMPLICIT_OBJC_ENTRYPOINT, uint8_t, 2,
         "Print warnings when using implicit @objc entrypoints. Set to "
         "desired reporting level, 0-3.")

VARIABLE(LANGUAGE_DETERMINISTIC_HASHING, bool, false,
         "Disable randomized hash seeding.")

VARIABLE(LANGUAGE_ENABLE_MANGLED_NAME_VERIFICATION, bool, false,
         "Enable verification that metadata can roundtrip through a mangled "
         "name each time metadata is instantiated.")

VARIABLE(LANGUAGE_DEBUG_ENABLE_MALLOC_SCRIBBLE, bool, false,
         "Scribble on runtime allocations such as metadata allocations.")

VARIABLE(LANGUAGE_DEBUG_ENABLE_COW_CHECKS, bool, false,
         "Enable internal checks for copy-on-write operations.")

VARIABLE(LANGUAGE_DEBUG_VALIDATE_UNCHECKED_CONTINUATIONS, bool, false,
         "Check for and error on double-calls of unchecked continuations.")

#if defined(__APPLE__) && defined(__MACH__)

VARIABLE(LANGUAGE_DEBUG_VALIDATE_SHARED_CACHE_PROTOCOL_CONFORMANCES, bool, false,
         "Validate shared cache protocol conformance results against the "
         "lists of conformances in the shared cache images.")

VARIABLE(LANGUAGE_DEBUG_ENABLE_SHARED_CACHE_PROTOCOL_CONFORMANCES, bool, true,
         "Enable querying precomputed protocol conformances in the shared "
         "cache.")

#endif

VARIABLE(LANGUAGE_DEBUG_CONCURRENCY_ENABLE_COOPERATIVE_QUEUES, bool, true,
         "Enable dispatch cooperative queues in the global executor.")

#ifndef NDEBUG

VARIABLE(LANGUAGE_DEBUG_RUNTIME_EXCLUSIVITY_LOGGING, bool, false,
         "Enable the an asserts runtime to emit logging as it works.")

#endif

VARIABLE(LANGUAGE_BINARY_COMPATIBILITY_VERSION, uint32_t, 0,
        "Set the binary compatibility level of the Codira Standard Library")

VARIABLE(LANGUAGE_DEBUG_FAILED_TYPE_LOOKUP, bool, false,
         "Enable warnings when we fail to look up a type by name.")

VARIABLE(LANGUAGE_DEBUG_ENABLE_LIB_PRESPECIALIZED_METADATA, bool, true,
         "Enable use of metadata in prespecializations library.")

VARIABLE(LANGUAGE_DEBUG_ENABLE_LIB_PRESPECIALIZED_DESCRIPTOR_LOOKUP, bool, true,
         "Enable use of descriptor map in prespecializations library.")

VARIABLE(LANGUAGE_DEBUG_VALIDATE_LIB_PRESPECIALIZED_DESCRIPTOR_LOOKUP, bool, false,
         "Validate results from the prespecializations map descriptor map by "
         "comparing to a full scan.")

VARIABLE(LANGUAGE_DEBUG_LIB_PRESPECIALIZED_PATH, string, "",
         "A path to a prespecializations library to use at runtime. In order "
         "to be used, this library must be loaded into the process by other "
         "means (such as DYLD_INSERT_LIBRARIES) before Codira tries to use it.")

VARIABLE(LANGUAGE_DEBUG_LIB_PRESPECIALIZED_DISABLED_PROCESSES, string, "",
         "A colon-separated list of process names where the prespecializations "
         "library will be forcibly disabled.")

VARIABLE(LANGUAGE_DEBUG_LIB_PRESPECIALIZED_ENABLED_PROCESSES, string, "",
         "A colon-separated list of process names where the prespecializations "
         "library will be forcibly enabled. This overrides the disabled "
         "processes list in the prespecializations library, as well as the "
         "list in LANGUAGE_DEBUG_LIB_PRESPECIALIZED_DISABLED_PROCESSES.")

VARIABLE(LANGUAGE_DEBUG_ENABLE_LIB_PRESPECIALIZED_LOGGING, bool, false,
         "Enable debug logging of prespecializations library use.")

VARIABLE(LANGUAGE_ROOT, string, "",
         "Overrides the root directory of the Codira installation. "
         "This is used to locate auxiliary files relative to the runtime "
         "itself.")

VARIABLE(LANGUAGE_BACKTRACE, string, "",
         "A comma-separated list of key=value pairs that controls the "
         "crash catching and backtracing support in the runtime. "
         "See docs/Backtracing.rst in the Codira repository for details.")

VARIABLE(LANGUAGE_IS_CURRENT_EXECUTOR_LEGACY_MODE_OVERRIDE, string, "",
         "Allows for suppressing 'is current executor' equality check crashes. "
         "As since Codira 6.0 checking for current executor equality, may crash "
         "and will never return 'false' because we are calling into library "
         "implemented SerialExecutor.checkIsolation which should crash if the "
         "isolation is not the expected one. Some old code may rely on the "
         "non-crashing behavior. This flag enables temporarily restoring the "
         "legacy 'nocrash' behavior until adopting code has been adjusted. "
         "It is possible to force the use of Codira 6.2's "
         "isIsolatingCurrentContext instead of checkIsolated by passing "
         " the 'isIsolatingCurrentContext' configuration value. "
         "Legal values are: "
         " 'legacy' (Legacy behavior), "
         " 'language6' (Codira 6.0-6.1 behavior)"
         " 'isIsolatingCurrentContext' (Codira 6.2 behavior)")

VARIABLE(LANGUAGE_DUMP_ACCESSIBLE_FUNCTIONS, bool, false,
         "Dump a listing of all 'AccessibleFunctionRecord's upon first access. "
         "These are used to obtain function pointers from accessible function "
         "record names, e.g. by the Distributed runtime to invoke distributed "
         "functions.")

#undef VARIABLE
