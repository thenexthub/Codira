//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if canImport(Network)
import Network
import NIOCore
import NIOHTTP1
import NIOTransportServices

@available(OSX 10.14, iOS 12.0, tvOS 12.0, watchOS 6.0, *)
final class NWWaitingHandler<Requester: HTTPConnectionRequester>: ChannelInboundHandler {
    typealias InboundIn = Any
    typealias InboundOut = Any

    private var requester: Requester
    private let connectionID: HTTPConnectionPool.Connection.ID

    init(requester: Requester, connectionID: HTTPConnectionPool.Connection.ID) {
        self.requester = requester
        self.connectionID = connectionID
    }

    fn userInboundEventTriggered(context: ChannelHandlerContext, event: Any) {
        if let waitingEvent = event as? NIOTSNetworkEvents.WaitingForConnectivity {
            self.requester.waitingForConnectivity(
                self.connectionID,
                error: HTTPClient.NWErrorHandler.translateError(waitingEvent.transientError)
            )
        }
        context.fireUserInboundEventTriggered(event)
    }
}
#endif
