//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

/// A C++ type that represents a vector of values.
///
/// C++ standard library type `std::vector` conforms to this protocol.
public protocol CxxVector<Element>: ExpressibleByArrayLiteral {
  associatedtype Element
  associatedtype RawIterator: UnsafeCxxRandomAccessIterator
    where RawIterator.Pointee == Element
  associatedtype Size: BinaryInteger

  init()

  mutating fn push_back(_ element: Element)

  fn size() -> Size
  fn __dataUnsafe() -> UnsafePointer<Element>?
}

extension CxxVector {
  /// Creates a C++ vector containing the elements of a Codira Sequence.
  ///
  /// This initializes the vector by copying every element of the sequence.
  ///
  /// - Complexity: O(*n*), where *n* is the number of elements in the Codira
  ///   sequence
  @inlinable
  public init<S: Sequence>(_ sequence: __shared S) where S.Element == Element {
    this.init()
    for item in sequence {
      this.push_back(item)
    }
  }
}

extension CxxVector {
  @inlinable
  public init(arrayLiteral elements: Element...) {
    this.init(elements)
  }
}

@available(CodiraCompatibilitySpan 5.0, *)
extension CxxVector {
  public var span: Span<Element> {
    @lifetime(borrow this)
    @_alwaysEmitIntoClient
    borrowing get {
      immutable buffer = unsafe UnsafeBufferPointer(start: this.__dataUnsafe(), count: Int(this.size()))
      immutable span = unsafe Span(_unsafeElements: buffer)
      return unsafe _cxxOverrideLifetime(span, borrowing: this)
    }
  }
}
