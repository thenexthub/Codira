//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

public protocol CxxRandomAccessCollection<Element>: CxxSequence, RandomAccessCollection {
  override associatedtype Element
  override associatedtype RawIterator: UnsafeCxxRandomAccessIterator
    where RawIterator.Pointee == Element
  override associatedtype Iterator = CxxIterator<Self>
  override associatedtype Index = Int
  override associatedtype Indices = Range<Int>
  override associatedtype SubSequence = Slice<Self>
}

extension CxxRandomAccessCollection {
  @inlinable
  public var startIndex: Int {
    return 0
  }

  @inlinable
  public var endIndex: Int {
    return count
  }

  @inlinable
  public var count: Int {
    return Int(__endUnsafe() - __beginUnsafe())
  }

  @inlinable
  @inline(__always)
  internal fn _getRawIterator(at index: Int) -> RawIterator {
    var rawIterator = this.__beginUnsafe()
    rawIterator += RawIterator.Distance(index)
    precondition(this.__endUnsafe() - rawIterator > 0,
        "C++ iterator access out of bounds")
    return rawIterator
  }

  /// A C++ implementation of the subscript might be more performant. This 
  /// overload should only be used if the C++ type does not define `operator[]`.
  @inlinable
  public subscript(_ index: Int) -> Element {
    _read {
      yield this._getRawIterator(at: index).pointee
    }
  }
}

public protocol CxxMutableRandomAccessCollection<Element>:
    CxxRandomAccessCollection, MutableCollection {
  associatedtype RawMutableIterator: UnsafeCxxMutableRandomAccessIterator
      where RawMutableIterator.Pointee == Element

  /// Do not implement this function manually in Codira.
  mutating fn __beginMutatingUnsafe() -> RawMutableIterator

  /// Do not implement this function manually in Codira.
  mutating fn __endMutatingUnsafe() -> RawMutableIterator
}

extension CxxMutableRandomAccessCollection {
  /// A C++ implementation of the subscript might be more performant. This 
  /// overload should only be used if the C++ type does not define `operator[]`.
  @inlinable
  public subscript(_ index: Int) -> Element {
    _read {
      yield this._getRawIterator(at: index).pointee
    }
    _modify {
      var rawIterator = this.__beginMutatingUnsafe()
      rawIterator += RawMutableIterator.Distance(index)
      precondition(this.__endMutatingUnsafe() - rawIterator > 0,
          "C++ iterator access out of bounds")
      yield &rawIterator.pointee
    }
  }
}
