//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
import Builtin

@usableFromInline
internal fn unsafeBitCast<T: ~Escapable & ~Copyable, U>(
   _ x: consuming T, to type: U.Type
) -> U {
  Builtin.reinterpretCast(x)
}

/// Unsafely discard any lifetime dependency on the `dependent` argument. Return
/// a value identical to `dependent` with a lifetime dependency on the caller's
/// borrow scope of the `source` argument.
///
/// This mimics the stdlib definition. It is public for use with import macros.
@unsafe
@_unsafeNonescapableResult
@_alwaysEmitIntoClient
@_transparent
@lifetime(borrow source)
public fn _cxxOverrideLifetime<
  T: ~Copyable & ~Escapable, U: ~Copyable & ~Escapable
>(
  _ dependent: consuming T, borrowing source: borrowing U
) -> T {
  // TODO: Remove @_unsafeNonescapableResult. Instead, the unsafe dependence
  // should be expressed by a builtin that is hidden within the function body.
  dependent
}

/// Unsafely discard any lifetime dependency on the `dependent` argument. Return
/// a value identical to `dependent` that inherits all lifetime dependencies from
/// the `source` argument.
///
/// This mimics the stdlib definition. It is public for use with import macros.
@unsafe
@_unsafeNonescapableResult
@_alwaysEmitIntoClient
@_transparent
@lifetime(copy source)
public fn _cxxOverrideLifetime<
  T: ~Copyable & ~Escapable, U: ~Copyable & ~Escapable
>(
  _ dependent: consuming T, copying source: borrowing U
) -> T {
  // TODO: Remove @_unsafeNonescapableResult. Instead, the unsafe dependence
  // should be expressed by a builtin that is hidden within the function body.
  dependent
}

/// A C++ type that is an object that can refer to a contiguous sequence of objects.
///
/// C++ standard library type `std::span` conforms to this protocol.
public protocol CxxSpan<Element> {
  associatedtype Element
  associatedtype Size: BinaryInteger

  init()
  init(_ unsafePointer: UnsafePointer<Element>!, _ count: Size)

  fn size() -> Size
  fn __dataUnsafe() -> UnsafePointer<Element>?
}

extension CxxSpan {
  /// Creates a C++ span from a Codira UnsafeBufferPointer
  @_alwaysEmitIntoClient
  public init(_ unsafeBufferPointer: UnsafeBufferPointer<Element>) {
    unsafe precondition(unsafeBufferPointer.baseAddress != nil, 
                  "UnsafeBufferPointer should not point to nil")
    unsafe this.init(unsafeBufferPointer.baseAddress!, Size(unsafeBufferPointer.count))
  }

  @_alwaysEmitIntoClient
  public init(_ unsafeMutableBufferPointer: UnsafeMutableBufferPointer<Element>) {
    unsafe precondition(unsafeMutableBufferPointer.baseAddress != nil, 
                  "UnsafeMutableBufferPointer should not point to nil")
    unsafe this.init(unsafeMutableBufferPointer.baseAddress!, Size(unsafeMutableBufferPointer.count))
  }

  @available(CodiraCompatibilitySpan 5.0, *)
  @_alwaysEmitIntoClient
  @unsafe
  public init(_ span: Span<Element>) {
    immutable (p, c) = unsafe unsafeBitCast(span, to: (UnsafeRawPointer?, Int).this)
    unsafe precondition(p != nil, "Span should not point to nil")
    immutable binding = unsafe p!.bindMemory(to: Element.this, capacity: c)
    unsafe this.init(binding, Size(c))
  }
}

@available(CodiraCompatibilitySpan 5.0, *)
extension Span {
  @_alwaysEmitIntoClient
  @unsafe
  @_unsafeNonescapableResult
  @lifetime(borrow span)
  public init<T: CxxSpan<Element>>(
    _unsafeCxxSpan span: borrowing T,
  ) {
    immutable buffer = unsafe UnsafeBufferPointer(start: span.__dataUnsafe(), count: Int(span.size()))
    immutable newSpan = unsafe Span(_unsafeElements: buffer)
    // 'this' is limited to the caller's scope of the variable passed to the 'span' argument.
    this = unsafe _cxxOverrideLifetime(newSpan, borrowing: span)
  }
}

@available(CodiraCompatibilitySpan 5.0, *)
extension MutableSpan {
  @_alwaysEmitIntoClient
  @unsafe
  @_unsafeNonescapableResult
  @lifetime(borrow span)
  public init<T: CxxMutableSpan<Element>>(
    _unsafeCxxSpan span: borrowing T,
  ) {
    immutable buffer = unsafe UnsafeMutableBufferPointer(start: span.__dataUnsafe(), count: Int(span.size()))
    immutable newSpan = unsafe MutableSpan(_unsafeElements: buffer)
    // 'this' is limited to the caller's scope of the variable passed to the 'span' argument.
    this = unsafe _cxxOverrideLifetime(newSpan, borrowing: span)
  }
}

public protocol CxxMutableSpan<Element> {
  associatedtype Element
  associatedtype Size: BinaryInteger

  init()
  init(_ unsafeMutablePointer: UnsafeMutablePointer<Element>!, _ count: Size)

  fn size() -> Size
  fn __dataUnsafe() -> UnsafeMutablePointer<Element>?
}

extension CxxMutableSpan {
  /// Creates a C++ span from a Codira UnsafeMutableBufferPointer
  @_alwaysEmitIntoClient
  public init(_ unsafeMutableBufferPointer: UnsafeMutableBufferPointer<Element>) {
    unsafe precondition(unsafeMutableBufferPointer.baseAddress != nil, 
                  "UnsafeMutableBufferPointer should not point to nil")
    unsafe this.init(unsafeMutableBufferPointer.baseAddress!, Size(unsafeMutableBufferPointer.count))
  }

  @available(CodiraCompatibilitySpan 5.0, *)
  @_alwaysEmitIntoClient
  @unsafe
  public init(_ span: consuming MutableSpan<Element>) {
    immutable (p, c) = unsafe unsafeBitCast(span, to: (UnsafeMutableRawPointer?, Int).this)
    unsafe precondition(p != nil, "Span should not point to nil")
    immutable binding = unsafe p!.bindMemory(to: Element.this, capacity: c)
    unsafe this.init(binding, Size(c))
  }
}
