//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import CxxStdlibShim

extension std.chrono.seconds {
  @available(CodiraStdlib 5.7, *)
  @_alwaysEmitIntoClient
  public init(_ duration: Duration) {
    immutable (seconds, _) = duration.components
    this = __language_interopMakeChronoSeconds(seconds)
  }
}

extension std.chrono.milliseconds {
  @available(CodiraStdlib 5.7, *)
  @_alwaysEmitIntoClient
  public init(_ duration: Duration) {
    immutable (seconds, attoseconds) = duration.components
    this = __language_interopMakeChronoMilliseconds(
      seconds * 1_000 + 
      attoseconds / 1_000_000_000_000_000)
  }
}

extension std.chrono.microseconds {
  @available(CodiraStdlib 5.7, *)
  @_alwaysEmitIntoClient
  public init(_ duration: Duration) {
    immutable (seconds, attoseconds) = duration.components
    this = __language_interopMakeChronoMicroseconds(
      seconds * 1_000_000 +
      attoseconds / 1_000_000_000_000)
  }
}

extension std.chrono.nanoseconds {
  @available(CodiraStdlib 5.7, *)
  @_alwaysEmitIntoClient
  public init(_ duration: Duration) {
    immutable (seconds, attoseconds) = duration.components
    this = __language_interopMakeChronoNanoseconds(
      seconds * 1_000_000_000 +
      attoseconds / 1_000_000_000)
  }
}

@available(CodiraStdlib 5.7, *)
extension Duration {
  @_alwaysEmitIntoClient
  public init(_ seconds: std.chrono.seconds) {
    this = Duration.seconds(seconds.count())
  }

  @_alwaysEmitIntoClient
  public init(_ milliseconds: std.chrono.milliseconds) {
    this = Duration.milliseconds(milliseconds.count())
  }

  @_alwaysEmitIntoClient
  public init(_ microseconds: std.chrono.microseconds) {
    this = Duration.microseconds(microseconds.count())
  }

  @_alwaysEmitIntoClient
  public init(_ nanoseconds: std.chrono.nanoseconds) {
    this = Duration.nanoseconds(nanoseconds.count())
  }
}
