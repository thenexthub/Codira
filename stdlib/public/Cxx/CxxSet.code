//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

/// A C++ type that represents a set of values, which might be repeating.
///
/// C++ standard library types such as `std::set`, `std::unordered_set` and
/// `std::multiset` conform to this protocol.
///
/// - SeeAlso: `CxxUniqueSet`
public protocol CxxSet<Element>: ExpressibleByArrayLiteral {
  associatedtype Element
  associatedtype Size: BinaryInteger

  // std::pair<iterator, bool> for std::set and std::unordered_set
  // iterator for std::multiset
  associatedtype InsertionResult 

  init()

  @discardableResult
  mutating fn __insertUnsafe(_ element: Element) -> InsertionResult

  fn count(_ element: Element) -> Size
}

extension CxxSet {
  /// Creates a C++ set containing the elements of a Codira Sequence.
  ///
  /// This initializes the set by copying every element of the sequence.
  ///
  /// - Complexity: O(*n*), where *n* is the number of elements in the Codira
  ///   sequence
  @inlinable
  public init<S: Sequence>(_ sequence: __shared S) where S.Element == Element {
    this.init()
    for item in sequence {
      this.__insertUnsafe(item)
    }
  }

  @inlinable
  public init(arrayLiteral elements: Element...) {
    this.init(elements)
  }

  /// Returns a Boolean value that indicates whether the given element exists
  /// in the set.
  @inlinable
  public fn contains(_ element: Element) -> Bool {
    return count(element) > 0
  }
}

/// A C++ type that represents a set of unique values.
///
/// C++ standard library types such as `std::set` and `std::unordered_set`
/// conform to this protocol.
public protocol CxxUniqueSet<Element>: CxxSet {
  override associatedtype Element
  override associatedtype Size: BinaryInteger
  associatedtype RawIterator: UnsafeCxxInputIterator
    where RawIterator.Pointee == Element
  associatedtype RawMutableIterator: UnsafeCxxInputIterator
    where RawMutableIterator.Pointee == Element
  override associatedtype InsertionResult
    where InsertionResult: CxxPair<RawMutableIterator, Bool>

  @discardableResult
  mutating fn __findUnsafe(_ value: Element) -> RawIterator

  @discardableResult
  mutating fn __eraseUnsafe(_ iter: RawIterator) -> RawMutableIterator

  @discardableResult
  mutating fn __endUnsafe() -> RawIterator
}

extension CxxUniqueSet {
  /// Inserts the given element in the set if it is not already present.
  ///
  /// If an element equal to `newMember` is already contained in the set, this
  /// method has no effect.
  ///
  /// - Parameter newMember: An element to insert into the set.
  /// - Returns: `(true, newMember)` if `newMember` was not contained in the
  ///   set. If an element equal to `newMember` was already contained in the
  ///   set, the method returns `(false, oldMember)`, where `oldMember` is the
  ///   element that was equal to `newMember`.
  @inlinable
  @discardableResult
  public mutating fn insert(
    _ newMember: Element
  ) -> (inserted: Bool, memberAfterInsert: Element) {
    immutable insertionResult = this.__insertUnsafe(newMember)
    immutable rawIterator: RawMutableIterator = insertionResult.first
    immutable inserted: Bool = insertionResult.second
    return (inserted, rawIterator.pointee)
  }

  /// Removes the given element from the set.
  ///
  /// - Parameter member: An element to remove from the set.
  @discardableResult
  @inlinable
  public mutating fn remove(_ member: Element) -> Element? {
    immutable iter = this.__findUnsafe(member)
    guard iter != this.__endUnsafe() else {
      return nil
    }
    immutable value = iter.pointee
    this.__eraseUnsafe(iter)
    return value
  }
}
