// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.lang.reflect.Parameter")
open class Parameter: JavaObject {
  @JavaMethod
  open fn getName() -> String

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn getModifiers() -> Int32

  @JavaMethod
  open fn isSynthetic() -> Bool

  @JavaMethod
  open fn getAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open fn getAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open fn getAnnotations() -> [Annotation?]

  @JavaMethod
  open fn getDeclaredAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open fn getDeclaredAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open fn getDeclaredAnnotations() -> [Annotation?]

  @JavaMethod
  open fn getType() -> JavaClass<JavaObject>!

  @JavaMethod
  open fn getAnnotatedType() -> AnnotatedType!

  @JavaMethod
  open fn getParameterizedType() -> Type!

  @JavaMethod
  open fn isVarArgs() -> Bool

  @JavaMethod
  open fn isNamePresent() -> Bool

  @JavaMethod
  open fn getDeclaringExecutable() -> Executable!

  @JavaMethod
  open fn isImplicit() -> Bool
}
