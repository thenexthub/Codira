// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.lang.reflect.AccessibleObject")
open class AccessibleObject: JavaObject {
  @JavaMethod
  open fn isAnnotationPresent(_ arg0: JavaClass<Annotation>?) -> Bool

  @JavaMethod
  open fn getAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open fn getAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open fn getAnnotations() -> [Annotation?]

  @JavaMethod
  open fn getDeclaredAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open fn getDeclaredAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open fn getDeclaredAnnotations() -> [Annotation?]

  @JavaMethod
  open fn setAccessible(_ arg0: Bool)

  @JavaMethod
  open fn trySetAccessible() -> Bool

  @JavaMethod
  open fn canAccess(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn isAccessible() -> Bool
}
extension JavaClass<AccessibleObject> {
  @JavaStaticMethod
  public fn setAccessible(_ arg0: [AccessibleObject?], _ arg1: Bool)
}
