// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.lang.reflect.Executable", implements: GenericDeclaration.self)
open class Executable: AccessibleObject {
  @JavaMethod
  open fn getName() -> String

  @JavaMethod
  open fn getModifiers() -> Int32

  @JavaMethod
  open fn getTypeParameters() -> [TypeVariable<JavaObject>?]

  @JavaMethod
  open fn getParameterTypes() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open fn toGenericString() -> String

  @JavaMethod
  open fn isSynthetic() -> Bool

  @JavaMethod
  open fn getDeclaringClass() -> JavaClass<JavaObject>!

  @JavaMethod
  open override fn getAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open override fn getAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open override fn getDeclaredAnnotations() -> [Annotation?]

  @JavaMethod
  open fn isVarArgs() -> Bool

  @JavaMethod
  open fn getAnnotatedParameterTypes() -> [AnnotatedType?]

  @JavaMethod
  open fn getParameterCount() -> Int32

  @JavaMethod
  open fn getParameterAnnotations() -> [[Annotation?]]

  @JavaMethod
  open fn getGenericParameterTypes() -> [Type?]

  @JavaMethod
  open fn getGenericExceptionTypes() -> [Type?]

  @JavaMethod
  open fn getExceptionTypes() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open fn getAnnotatedReturnType() -> AnnotatedType!

  @JavaMethod
  open fn getParameters() -> [Parameter?]

  @JavaMethod
  open fn getAnnotatedReceiverType() -> AnnotatedType!

  @JavaMethod
  open fn getAnnotatedExceptionTypes() -> [AnnotatedType?]
}
extension JavaClass<Executable> {
  @JavaStaticField(isFinal: true)
  public var PUBLIC: Int32

  @JavaStaticField(isFinal: true)
  public var DECLARED: Int32
}
