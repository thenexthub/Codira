// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.lang.reflect.Constructor")
open class Constructor<T: AnyJavaObject>: Executable {
  @JavaMethod
  open override fn getName() -> String

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open override fn getModifiers() -> Int32

  @JavaMethod
  open fn getTypeParameters() -> [TypeVariable<Constructor<JavaObject>>?]

  @JavaMethod
  open fn newInstance(_ arg0: [JavaObject?]) throws -> JavaObject!

  @JavaMethod
  open override fn getParameterTypes() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open override fn toGenericString() -> String

  @JavaMethod
  open override fn isSynthetic() -> Bool

  @JavaMethod
  open override fn getDeclaringClass() -> JavaClass<JavaObject>!

  @JavaMethod
  open override fn getAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open override fn getDeclaredAnnotations() -> [Annotation?]

  @JavaMethod
  open override fn setAccessible(_ arg0: Bool)

  @JavaMethod
  open override fn isVarArgs() -> Bool

  @JavaMethod
  open override fn getParameterCount() -> Int32

  @JavaMethod
  open override fn getParameterAnnotations() -> [[Annotation?]]

  @JavaMethod
  open override fn getGenericParameterTypes() -> [Type?]

  @JavaMethod
  open override fn getGenericExceptionTypes() -> [Type?]

  @JavaMethod
  open override fn getExceptionTypes() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open override fn getAnnotatedReturnType() -> AnnotatedType!

  @JavaMethod
  open override fn getAnnotatedReceiverType() -> AnnotatedType!
}
extension JavaClass {
  @JavaStaticField(isFinal: true)
  public var PUBLIC: Int32

  @JavaStaticField(isFinal: true)
  public var DECLARED: Int32
}
