// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.io.File")
open class File: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: File?, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  open fn getName() -> String

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn length() -> Int64

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn isHidden() -> Bool

  @JavaMethod
  open fn compareTo(_ arg0: File?) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open fn list() -> [String]

  @JavaMethod
  open fn isAbsolute() -> Bool

  @JavaMethod
  open fn getParent() -> String

  @JavaMethod
  open fn delete() -> Bool

  @JavaMethod
  open fn setReadOnly() -> Bool

  @JavaMethod
  open fn canRead() -> Bool

  @JavaMethod
  open fn getPath() -> String

  @JavaMethod
  open fn getAbsolutePath() -> String

  @JavaMethod
  open fn exists() -> Bool

  @JavaMethod
  open fn createNewFile() throws -> Bool

  @JavaMethod
  open fn renameTo(_ arg0: File?) -> Bool

  @JavaMethod
  open fn isDirectory() -> Bool

  @JavaMethod
  open fn getCanonicalPath() throws -> String

  @JavaMethod
  open fn getAbsoluteFile() -> File!

  @JavaMethod
  open fn mkdir() -> Bool

  @JavaMethod
  open fn getCanonicalFile() throws -> File!

  @JavaMethod
  open fn getParentFile() -> File!

  @JavaMethod
  open fn mkdirs() -> Bool

  @JavaMethod
  open fn setWritable(_ arg0: Bool) -> Bool

  @JavaMethod
  open fn setWritable(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaMethod
  open fn setReadable(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaMethod
  open fn setReadable(_ arg0: Bool) -> Bool

  @JavaMethod
  open fn setExecutable(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaMethod
  open fn setExecutable(_ arg0: Bool) -> Bool

  @JavaMethod
  open fn canWrite() -> Bool

  @JavaMethod
  open fn isFile() -> Bool

  @JavaMethod
  open fn lastModified() -> Int64

  @JavaMethod
  open fn deleteOnExit()

  @JavaMethod
  open fn listFiles() -> [File?]

  @JavaMethod
  open fn setLastModified(_ arg0: Int64) -> Bool

  @JavaMethod
  open fn canExecute() -> Bool

  @JavaMethod
  open fn getTotalSpace() -> Int64

  @JavaMethod
  open fn getFreeSpace() -> Int64

  @JavaMethod
  open fn getUsableSpace() -> Int64

  @JavaMethod
  open fn toPath() -> Path!
}
extension JavaClass<File> {
  @JavaStaticField(isFinal: true)
  public var separatorChar: UInt16

  @JavaStaticField(isFinal: true)
  public var separator: String

  @JavaStaticField(isFinal: true)
  public var pathSeparatorChar: UInt16

  @JavaStaticField(isFinal: true)
  public var pathSeparator: String

  @JavaStaticMethod
  public fn listRoots() -> [File?]

  @JavaStaticMethod
  public fn createTempFile(_ arg0: String, _ arg1: String) throws -> File!

  @JavaStaticMethod
  public fn createTempFile(_ arg0: String, _ arg1: String, _ arg2: File?) throws -> File!
}
