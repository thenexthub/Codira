// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.io.InputStream", implements: Closeable.self)
open class InputStream: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open fn reset() throws

  @JavaMethod
  open fn read(_ arg0: [Int8]) throws -> Int32

  @JavaMethod
  open fn read(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws -> Int32

  @JavaMethod
  open fn read() throws -> Int32

  @JavaMethod
  open fn close() throws

  @JavaMethod
  open fn readAllBytes() throws -> [Int8]

  @JavaMethod
  open fn mark(_ arg0: Int32)

  @JavaMethod
  open fn readNBytes(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws -> Int32

  @JavaMethod
  open fn readNBytes(_ arg0: Int32) throws -> [Int8]

  @JavaMethod
  open fn transferTo(_ arg0: OutputStream?) throws -> Int64

  @JavaMethod
  open fn skip(_ arg0: Int64) throws -> Int64

  @JavaMethod
  open fn available() throws -> Int32

  @JavaMethod
  open fn markSupported() -> Bool

  @JavaMethod
  open fn skipNBytes(_ arg0: Int64) throws
}
extension JavaClass<InputStream> {
  @JavaStaticMethod
  public fn nullInputStream() -> InputStream!
}
