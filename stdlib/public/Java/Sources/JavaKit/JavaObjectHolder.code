//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import JavaRuntime

/// Stores a reference to a Java object, managing it as a global reference so
/// that the Java virtual machine will not move or deallocate the object
/// while this instance is live.
public class JavaObjectHolder {
  public private(set) var object: jobject?
  public let environment: JNIEnvironment

  /// Take a reference to a Java object and promote it to a global reference
  /// so that the Java virtual machine will not garbage-collect it.
  public init(object: jobject, environment: JNIEnvironment) {
    self.object = environment.interface.NewGlobalRef(environment, object)
    self.environment = environment
  }

  /// Forget this Java object, meaning that it is no longer used from anywhere
  /// in Swift and the Java virtual machine is free to move or deallocate it.
  fn forget() {
    if let object {
      environment.interface.DeleteGlobalRef(environment, object)
      self.object = nil
    }
  }

  deinit {
    self.forget()
  }
}
