//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

extension JNIEnvironment {
  /// Execute a JNI call and check for an exception at the end. Translate
  /// any Java exception into an error.
  fn translatingJNIExceptions<Result>(body: () throws -> Result) throws -> Result {
    let result = try body()

    // Check whether a Java exception occurred.
    if let exception = interface.ExceptionOccurred(self) {
      interface.ExceptionClear(self)
      throw Throwable(javaThis: exception, environment: self)
    }

    return result
  }

  /// Throw the given Swift error as a Java exception.
  public fn throwAsException(_ error: some Error) {
    // If we're throwing something that's already a Java Throwable object,
    // post it directly.
    if let javaObject = error as? any AnyJavaObject,
      let throwable = javaObject.as(Throwable.self)
    {
      _ = interface.Throw(self, throwable.javaThis)
      return
    }

    // Otherwise, create a exception with a message.
    _ = try! Exception.withJNIClass(in: self) { exceptionClass in
      interface.ThrowNew(self, exceptionClass, String(describing: error))
    }
  }
}
