// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.Boolean")
open class JavaBoolean: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Bool, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaBoolean?) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open fn booleanValue() -> Bool
}
extension JavaClass<JavaBoolean> {
  @JavaStaticField(isFinal: true)
  public var TRUE: JavaBoolean!

  @JavaStaticField(isFinal: true)
  public var FALSE: JavaBoolean!

  @JavaStaticField(isFinal: true)
  public var TYPE: JavaClass<JavaBoolean>!

  @JavaStaticMethod
  public fn toString(_ arg0: Bool) -> String

  @JavaStaticMethod
  public fn hashCode(_ arg0: Bool) -> Int32

  @JavaStaticMethod
  public fn getBoolean(_ arg0: String) -> Bool

  @JavaStaticMethod
  public fn compare(_ arg0: Bool, _ arg1: Bool) -> Int32

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> JavaBoolean!

  @JavaStaticMethod
  public fn valueOf(_ arg0: Bool) -> JavaBoolean!

  @JavaStaticMethod
  public fn parseBoolean(_ arg0: String) -> Bool

  @JavaStaticMethod
  public fn logicalAnd(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaStaticMethod
  public fn logicalOr(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaStaticMethod
  public fn logicalXor(_ arg0: Bool, _ arg1: Bool) -> Bool
}
