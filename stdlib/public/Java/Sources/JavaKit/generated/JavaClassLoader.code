// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.ClassLoader")
open class JavaClassLoader: JavaObject {
  @JavaMethod
  open fn getName() -> String

  @JavaMethod
  open fn loadClass(_ arg0: String, _ arg1: Bool) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn loadClass(_ arg0: String) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn setSigners(_ arg0: JavaClass<JavaObject>?, _ arg1: [JavaObject?])

  @JavaMethod
  open fn getClassLoadingLock(_ arg0: String) -> JavaObject!

  @JavaMethod
  open fn findLoadedClass(_ arg0: String) -> JavaClass<JavaObject>!

  @JavaMethod
  open fn findClass(_ arg0: String) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn findClass(_ arg0: String, _ arg1: String) -> JavaClass<JavaObject>!

  @JavaMethod
  open fn resolveClass(_ arg0: JavaClass<JavaObject>?)

  @JavaMethod
  open fn defineClass(_ arg0: String, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn defineClass(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn findLibrary(_ arg0: String) -> String

  @JavaMethod
  open fn findSystemClass(_ arg0: String) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn isRegisteredAsParallelCapable() -> Bool

  @JavaMethod
  open fn getParent() -> JavaClassLoader!

  @JavaMethod
  open fn setDefaultAssertionStatus(_ arg0: Bool)

  @JavaMethod
  open fn setPackageAssertionStatus(_ arg0: String, _ arg1: Bool)

  @JavaMethod
  open fn setClassAssertionStatus(_ arg0: String, _ arg1: Bool)

  @JavaMethod
  open fn clearAssertionStatus()
}
extension JavaClass<JavaClassLoader> {
  @JavaStaticMethod
  public fn getPlatformClassLoader() -> JavaClassLoader!

  @JavaStaticMethod
  public fn getSystemClassLoader() -> JavaClassLoader!

  @JavaStaticMethod
  public fn registerAsParallelCapable() -> Bool
}
