// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.util.OptionalDouble")
open class JavaOptionalDouble: JavaObject {
  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn isEmpty() -> Bool

  @JavaMethod
  open fn isPresent() -> Bool

  @JavaMethod
  open fn orElse(_ arg0: Double) -> Double

  @JavaMethod
  open fn orElseThrow() -> Double

  @JavaMethod
  open fn getAsDouble() -> Double
}
extension JavaClass<JavaOptionalDouble> {
  @JavaStaticMethod
  public fn of(_ arg0: Double) -> JavaOptionalDouble!

  public fn ofOptional(_ arg0: Double) -> Double? {
    Optional(javaOptional: of(arg0))
  }

  @JavaStaticMethod
  public fn empty() -> JavaOptionalDouble!

  public fn emptyOptional() -> Double? {
    Optional(javaOptional: empty())
  }
}
