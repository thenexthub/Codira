// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.Float")
open class JavaFloat: JavaNumber {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Double, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Float, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn isInfinite() -> Bool

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaFloat?) -> Int32

  @JavaMethod
  open override fn byteValue() -> Int8

  @JavaMethod
  open override fn shortValue() -> Int16

  @JavaMethod
  open override fn intValue() -> Int32

  @JavaMethod
  open override fn longValue() -> Int64

  @JavaMethod
  open override fn floatValue() -> Float

  @JavaMethod
  open override fn doubleValue() -> Double

  @JavaMethod
  open fn describeConstable() -> JavaOptional<JavaFloat>!

  open fn describeConstableOptional() -> JavaFloat? {
    Optional(javaOptional: describeConstable())
  }

  @JavaMethod
  open fn isNaN() -> Bool
}
extension JavaClass<JavaFloat> {
  @JavaStaticField(isFinal: true)
  public var POSITIVE_INFINITY: Float

  @JavaStaticField(isFinal: true)
  public var NEGATIVE_INFINITY: Float

  @JavaStaticField(isFinal: true)
  public var NaN: Float

  @JavaStaticField(isFinal: true)
  public var MAX_VALUE: Float

  @JavaStaticField(isFinal: true)
  public var MIN_NORMAL: Float

  @JavaStaticField(isFinal: true)
  public var MIN_VALUE: Float

  @JavaStaticField(isFinal: true)
  public var SIZE: Int32

  @JavaStaticField(isFinal: true)
  public var PRECISION: Int32

  @JavaStaticField(isFinal: true)
  public var MAX_EXPONENT: Int32

  @JavaStaticField(isFinal: true)
  public var MIN_EXPONENT: Int32

  @JavaStaticField(isFinal: true)
  public var BYTES: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE: JavaClass<JavaFloat>!

  @JavaStaticMethod
  public fn toString(_ arg0: Float) -> String

  @JavaStaticMethod
  public fn hashCode(_ arg0: Float) -> Int32

  @JavaStaticMethod
  public fn min(_ arg0: Float, _ arg1: Float) -> Float

  @JavaStaticMethod
  public fn max(_ arg0: Float, _ arg1: Float) -> Float

  @JavaStaticMethod
  public fn isInfinite(_ arg0: Float) -> Bool

  @JavaStaticMethod
  public fn isFinite(_ arg0: Float) -> Bool

  @JavaStaticMethod
  public fn floatToRawIntBits(_ arg0: Float) -> Int32

  @JavaStaticMethod
  public fn floatToIntBits(_ arg0: Float) -> Int32

  @JavaStaticMethod
  public fn intBitsToFloat(_ arg0: Int32) -> Float

  @JavaStaticMethod
  public fn float16ToFloat(_ arg0: Int16) -> Float

  @JavaStaticMethod
  public fn floatToFloat16(_ arg0: Float) -> Int16

  @JavaStaticMethod
  public fn compare(_ arg0: Float, _ arg1: Float) -> Int32

  @JavaStaticMethod
  public fn valueOf(_ arg0: Float) -> JavaFloat!

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) throws -> JavaFloat!

  @JavaStaticMethod
  public fn toHexString(_ arg0: Float) -> String

  @JavaStaticMethod
  public fn isNaN(_ arg0: Float) -> Bool

  @JavaStaticMethod
  public fn sum(_ arg0: Float, _ arg1: Float) -> Float

  @JavaStaticMethod
  public fn parseFloat(_ arg0: String) throws -> Float
}
