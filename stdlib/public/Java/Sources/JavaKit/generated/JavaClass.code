// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.Class")
open class JavaClass<T: AnyJavaObject>: JavaObject {
  @JavaMethod
  open fn getName() -> String

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open fn isAssignableFrom(_ arg0: JavaClass<JavaObject>?) -> Bool

  @JavaMethod
  open fn isInstance(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn getModifiers() -> Int32

  @JavaMethod
  open fn isInterface() -> Bool

  @JavaMethod
  open fn isArray() -> Bool

  @JavaMethod
  open fn isPrimitive() -> Bool

  @JavaMethod
  open fn isHidden() -> Bool

  @JavaMethod
  open fn getSuperclass() -> JavaClass<JavaObject>!

  @JavaMethod
  open fn cast(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn componentType() -> JavaClass<JavaObject>!

  @JavaMethod
  open fn getComponentType() -> JavaClass<JavaObject>!

  @JavaMethod
  open fn isAnnotation() -> Bool

  @JavaMethod
  open fn isEnum() -> Bool

  @JavaMethod
  open fn isRecord() -> Bool

  @JavaMethod
  open fn getClassLoader() -> JavaClassLoader!

  @JavaMethod
  open fn newInstance() throws -> JavaObject!

  @JavaMethod
  open fn getInterfaces() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open fn isMemberClass() -> Bool

  @JavaMethod
  open fn isLocalClass() -> Bool

  @JavaMethod
  open fn isAnonymousClass() -> Bool

  @JavaMethod
  open fn getEnclosingClass() throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn arrayType() -> JavaClass<JavaObject>!

  @JavaMethod
  open fn getSimpleName() -> String

  @JavaMethod
  open fn getCanonicalName() -> String

  @JavaMethod
  open fn getPackageName() -> String

  @JavaMethod
  open fn desiredAssertionStatus() -> Bool

  @JavaMethod
  open fn getNestHost() -> JavaClass<JavaObject>!

  @JavaMethod
  open fn descriptorString() -> String

  @JavaMethod
  open fn getPermittedSubclasses() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open fn toGenericString() -> String

  @JavaMethod
  open fn isSynthetic() -> Bool

  @JavaMethod
  open fn getSigners() -> [JavaObject?]

  @JavaMethod
  open fn getDeclaringClass() throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn getTypeName() -> String

  @JavaMethod
  open fn getClasses() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open fn getDeclaredClasses() throws -> [JavaClass<JavaObject>?]

  @JavaMethod
  open fn getEnumConstants() -> [JavaObject?]

  @JavaMethod
  open fn asSubclass(_ arg0: JavaClass<JavaObject>?) -> JavaClass<JavaObject>!

  @JavaMethod
  open fn isNestmateOf(_ arg0: JavaClass<JavaObject>?) -> Bool

  @JavaMethod
  open fn getNestMembers() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open fn isSealed() -> Bool
}
extension JavaClass {
  @JavaStaticMethod
  public fn forName<T: AnyJavaObject>(_ arg0: String, _ arg1: Bool, _ arg2: JavaClassLoader?) throws -> JavaClass<JavaObject>! where ObjectType == JavaClass<T>

  @JavaStaticMethod
  public fn forName<T: AnyJavaObject>(_ arg0: String) throws -> JavaClass<JavaObject>! where ObjectType == JavaClass<T>

  @JavaStaticMethod
  public fn forPrimitiveName<T: AnyJavaObject>(_ arg0: String) -> JavaClass<JavaObject>! where ObjectType == JavaClass<T>
}
