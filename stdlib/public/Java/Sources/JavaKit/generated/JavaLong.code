// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.Long")
open class JavaLong: JavaNumber {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int64, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaLong?) -> Int32

  @JavaMethod
  open override fn byteValue() -> Int8

  @JavaMethod
  open override fn shortValue() -> Int16

  @JavaMethod
  open override fn intValue() -> Int32

  @JavaMethod
  open override fn longValue() -> Int64

  @JavaMethod
  open override fn floatValue() -> Float

  @JavaMethod
  open override fn doubleValue() -> Double

  @JavaMethod
  open fn describeConstable() -> JavaOptional<JavaLong>!

  open fn describeConstableOptional() -> JavaLong? {
    Optional(javaOptional: describeConstable())
  }
}
extension JavaClass<JavaLong> {
  @JavaStaticField(isFinal: true)
  public var MIN_VALUE: Int64

  @JavaStaticField(isFinal: true)
  public var MAX_VALUE: Int64

  @JavaStaticField(isFinal: true)
  public var TYPE: JavaClass<JavaLong>!

  @JavaStaticField(isFinal: true)
  public var SIZE: Int32

  @JavaStaticField(isFinal: true)
  public var BYTES: Int32

  @JavaStaticMethod
  public fn numberOfLeadingZeros(_ arg0: Int64) -> Int32

  @JavaStaticMethod
  public fn numberOfTrailingZeros(_ arg0: Int64) -> Int32

  @JavaStaticMethod
  public fn bitCount(_ arg0: Int64) -> Int32

  @JavaStaticMethod
  public fn toString(_ arg0: Int64) -> String

  @JavaStaticMethod
  public fn toString(_ arg0: Int64, _ arg1: Int32) -> String

  @JavaStaticMethod
  public fn hashCode(_ arg0: Int64) -> Int32

  @JavaStaticMethod
  public fn min(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaStaticMethod
  public fn max(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaStaticMethod
  public fn signum(_ arg0: Int64) -> Int32

  @JavaStaticMethod
  public fn expand(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaStaticMethod
  public fn compareUnsigned(_ arg0: Int64, _ arg1: Int64) -> Int32

  @JavaStaticMethod
  public fn divideUnsigned(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaStaticMethod
  public fn remainderUnsigned(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaStaticMethod
  public fn reverse(_ arg0: Int64) -> Int64

  @JavaStaticMethod
  public fn reverseBytes(_ arg0: Int64) -> Int64

  @JavaStaticMethod
  public fn compress(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaStaticMethod
  public fn getLong(_ arg0: String, _ arg1: JavaLong?) -> JavaLong!

  @JavaStaticMethod
  public fn getLong(_ arg0: String) -> JavaLong!

  @JavaStaticMethod
  public fn getLong(_ arg0: String, _ arg1: Int64) -> JavaLong!

  @JavaStaticMethod
  public fn compare(_ arg0: Int64, _ arg1: Int64) -> Int32

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) throws -> JavaLong!

  @JavaStaticMethod
  public fn valueOf(_ arg0: Int64) -> JavaLong!

  @JavaStaticMethod
  public fn valueOf(_ arg0: String, _ arg1: Int32) throws -> JavaLong!

  @JavaStaticMethod
  public fn toHexString(_ arg0: Int64) -> String

  @JavaStaticMethod
  public fn decode(_ arg0: String) throws -> JavaLong!

  @JavaStaticMethod
  public fn sum(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaStaticMethod
  public fn toUnsignedString(_ arg0: Int64) -> String

  @JavaStaticMethod
  public fn toUnsignedString(_ arg0: Int64, _ arg1: Int32) -> String

  @JavaStaticMethod
  public fn toOctalString(_ arg0: Int64) -> String

  @JavaStaticMethod
  public fn toBinaryString(_ arg0: Int64) -> String

  @JavaStaticMethod
  public fn highestOneBit(_ arg0: Int64) -> Int64

  @JavaStaticMethod
  public fn lowestOneBit(_ arg0: Int64) -> Int64

  @JavaStaticMethod
  public fn rotateLeft(_ arg0: Int64, _ arg1: Int32) -> Int64

  @JavaStaticMethod
  public fn rotateRight(_ arg0: Int64, _ arg1: Int32) -> Int64

  @JavaStaticMethod
  public fn parseLong(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) throws -> Int64

  @JavaStaticMethod
  public fn parseLong(_ arg0: String, _ arg1: Int32) throws -> Int64

  @JavaStaticMethod
  public fn parseLong(_ arg0: String) throws -> Int64

  @JavaStaticMethod
  public fn parseUnsignedLong(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) throws -> Int64

  @JavaStaticMethod
  public fn parseUnsignedLong(_ arg0: String, _ arg1: Int32) throws -> Int64

  @JavaStaticMethod
  public fn parseUnsignedLong(_ arg0: String) throws -> Int64
}
