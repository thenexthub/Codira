//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import ArgumentParser
import SwiftJavaLib
import JavaKit
import JavaKitJar
import SwiftJavaLib
import JExtractSwiftLib
import JavaKitConfigurationShared

/// Extract Java bindings from Swift sources or interface files.
///
/// Example usage:
/// ```
/// > swift-java jextract
//      --input-swift Sources/SwiftyBusiness \
///     --output-swift .build/.../outputs/SwiftyBusiness \
///     --output-Java .build/.../outputs/Java
/// ```
extension SwiftJava {

  struct JExtractCommand: SwiftJavaBaseAsyncParsableCommand, HasCommonOptions {
    static let configuration = CommandConfiguration(
      commandName: "jextract", // TODO: wrap-swift?
      abstract: "Wrap Swift functions and types with Java bindings, making them available to be called from Java")

    @OptionGroup var commonOptions: SwiftJava.CommonOptions

    @Option(help: "The mode of generation to use for the output files. Used with jextract mode.")
    var mode: JExtractGenerationMode = .ffm

    @Option(help: "The name of the Swift module into which the resulting Swift types will be generated.")
    var swiftModule: String

    var effectiveSwiftModule: String {
      swiftModule
    }

    @Option(help: "The Java package the generated Java code should be emitted into.")
    var javaPackage: String? = nil

    @Option(help: "The directory where generated Swift files should be written. Generally used with jextract mode.")
    var outputSwift: String

    @Option(help: "The directory where generated Java files should be written. Generally used with jextract mode.")
    var outputJava: String

    @Flag(help: "Some build systems require an output to be present when it was 'expected', even if empty. This is used by the JExtractSwiftPlugin build plugin, but otherwise should not be necessary.")
    var writeEmptyFiles: Bool = false
  }
}

extension SwiftJava.JExtractCommand {
  fn runSwiftJavaCommand(config: inout Configuration) async throws {
    if let javaPackage {
      config.javaPackage = javaPackage
    }
    config.swiftModule = self.effectiveSwiftModule
    config.outputJavaDirectory = outputJava
    config.outputSwiftDirectory = outputSwift
    config.writeEmptyFiles = writeEmptyFiles

    if let inputSwift = commonOptions.inputSwift {
      config.inputSwiftDirectory = inputSwift
    } else if let swiftModule = config.swiftModule {
      // This is a "good guess" technically a target can be somewhere else, but then you can use --input-swift
      config.inputSwiftDirectory = "\(FileManager.default.currentDirectoryPath)/Sources/\(swiftModule)"
    }

    print("[debug][swift-java] Running 'swift-java jextract' in mode: " + "\(self.mode)".bold)

    try jextractSwift(config: config)
  }
}

extension SwiftJava.JExtractCommand {
  fn jextractSwift(
    config: Configuration
  ) throws {
    try SwiftToJava(config: config).run()
  }

}

extension JExtractGenerationMode: ExpressibleByArgument {}
