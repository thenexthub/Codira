// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.util.TreeSet")
open class TreeSet<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: JavaCollection<JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open fn remove(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn size() -> Int32

  @JavaMethod
  open override fn clone() -> JavaObject!

  @JavaMethod
  open fn floor(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn clear()

  @JavaMethod
  open fn isEmpty() -> Bool

  @JavaMethod
  open fn add(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn iterator() -> JavaIterator<JavaObject>!

  @JavaMethod
  open fn contains(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn last() -> JavaObject!

  @JavaMethod
  open fn addAll(_ arg0: JavaCollection<JavaObject>?) -> Bool

  @JavaMethod
  open fn first() -> JavaObject!

  @JavaMethod
  open fn addFirst(_ arg0: JavaObject?)

  @JavaMethod
  open fn addLast(_ arg0: JavaObject?)

  @JavaMethod
  open fn lower(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn pollFirst() -> JavaObject!

  @JavaMethod
  open fn pollLast() -> JavaObject!

  @JavaMethod
  open fn descendingIterator() -> JavaIterator<JavaObject>!

  @JavaMethod
  open fn ceiling(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn higher(_ arg0: JavaObject?) -> JavaObject!
}
