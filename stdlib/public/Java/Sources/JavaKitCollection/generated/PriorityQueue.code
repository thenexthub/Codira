// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.util.PriorityQueue")
open class PriorityQueue<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: PriorityQueue<JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: JavaCollection<JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open fn remove(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn size() -> Int32

  @JavaMethod
  open fn clear()

  @JavaMethod
  open fn add(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn toArray(_ arg0: [JavaObject?]) -> [JavaObject?]

  @JavaMethod
  open fn toArray() -> [JavaObject?]

  @JavaMethod
  open fn iterator() -> JavaIterator<JavaObject>!

  @JavaMethod
  open fn contains(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open fn peek() -> JavaObject!

  @JavaMethod
  open fn removeAll(_ arg0: JavaCollection<JavaObject>?) -> Bool

  @JavaMethod
  open fn retainAll(_ arg0: JavaCollection<JavaObject>?) -> Bool

  @JavaMethod
  open fn poll() -> JavaObject!

  @JavaMethod
  open fn offer(_ arg0: JavaObject?) -> Bool
}
