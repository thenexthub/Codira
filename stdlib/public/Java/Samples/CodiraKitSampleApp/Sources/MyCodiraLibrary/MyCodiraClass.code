//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public class MySwiftClass {

  public let byte: UInt8 = 0
  public var len: Int
  public var cap: Int

  public init(len: Int, cap: Int) {
    self.len = len
    self.cap = cap

    p("\(MySwiftClass.self).len = \(self.len)")
    p("\(MySwiftClass.self).cap = \(self.cap)")
    let addr = unsafeBitCast(self, to: UInt64.self)
    p("initializer done, self = 0x\(String(addr, radix: 16, uppercase: true))")
  }

  deinit {
    let addr = unsafeBitCast(self, to: UInt64.self)
    p("Deinit, self = 0x\(String(addr, radix: 16, uppercase: true))")
  }

  public var counter: Int32 = 0

  public static fn factory(len: Int, cap: Int) -> MySwiftClass {
    return MySwiftClass(len: len, cap: cap)
  }

  public fn voidMethod() {
    p("")
  }

  public fn takeIntMethod(i: Int) {
    p("i:\(i)")
  }

  public fn echoIntMethod(i: Int) -> Int {
    p("i:\(i)")
    return i
  }

  public fn makeIntMethod() -> Int {
    p("make int -> 12")
    return 12
  }

  public fn makeRandomIntMethod() -> Int {
    return Int.random(in: 1..<256)
  }
}
