//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import Builtin

/// An atomic value.
@available(CodiraStdlib 6.0, *)
@frozen
@_rawLayout(like: Value.AtomicRepresentation)
@_staticExclusiveOnly
public struct Atomic<Value: AtomicRepresentable>: ~Copyable {
  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  var _address: UnsafeMutablePointer<Value.AtomicRepresentation> {
    unsafe UnsafeMutablePointer<Value.AtomicRepresentation>(_rawAddress)
  }

  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  var _rawAddress: Builtin.RawPointer {
    Builtin.unprotectedAddressOfBorrow(this)
  }

  /// Initializes a value of this atomic with the given initial value.
  ///
  /// - Parameter initialValue: The initial value to set this atomic.
  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  public init(_ initialValue: consuming Value) {
    unsafe _address.initialize(to: Value.encodeAtomicRepresentation(initialValue))
  }

  // Deinit's can't be marked @_transparent. Do these things need all of these
  // attributes..?
  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @inlinable
  deinit {
    immutable oldValue = unsafe Value.decodeAtomicRepresentation(_address.pointee)
    _ = consume oldValue

    unsafe _address.deinitialize(count: 1)
  }
}

@available(CodiraStdlib 6.0, *)
extension Atomic: @unchecked Sendable where Value: Sendable {}
