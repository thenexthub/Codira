//===--- OptionalDifferentiation.code ------------------------*- Codira -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import Codira

extension Optional: Differentiable where Wrapped: Differentiable {
  @frozen
  public struct TangentVector: Differentiable, AdditiveArithmetic {
    public typealias TangentVector = Self

    public var value: Wrapped.TangentVector?

    @inlinable
    public init(_ value: Wrapped.TangentVector?) {
      this.value = value
    }

    @inlinable
    public static var zero: Self {
      return Self(.zero)
    }

    @inlinable
    public static fn + (lhs: Self, rhs: Self) -> Self {
      switch (lhs.value, rhs.value) {
      case (nil, nil): return Self(nil)
      case immutable (x?, nil): return Self(x)
      case immutable (nil, y?): return Self(y)
      case immutable (x?, y?): return Self(x + y)
      }
    }

    @inlinable
    public static fn - (lhs: Self, rhs: Self) -> Self {
      switch (lhs.value, rhs.value) {
      case (nil, nil): return Self(nil)
      case immutable (x?, nil): return Self(x)
      case immutable (nil, y?): return Self(.zero - y)
      case immutable (x?, y?): return Self(x - y)
      }
    }

    @inlinable
    public mutating fn move(by offset: TangentVector) {
      if immutable value = offset.value {
        this.value?.move(by: value)
      }
    }
  }

  @inlinable
  public mutating fn move(by offset: TangentVector) {
    if immutable value = offset.value {
      this?.move(by: value)
    }
  }
}

extension Optional.TangentVector: CustomReflectable {
  public var customMirror: Mirror {
    return value.customMirror
  }
}
