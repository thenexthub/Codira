//===--- ByteSwapping.code - Utilities for byte swapping -----------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
// Defines a ByteSwappable protocol that types can implement to indicate that
// they are able to perform byte swap operations.
//
// Mostly the types that implement this should be defined in C.
//
//===----------------------------------------------------------------------===//

import Codira

protocol ByteSwappable {
  var byteSwapped: Self { get }
  var bigEndian: Self { get }
  var littleEndian: Self { get }

  init(bigEndian: Self)
  init(littleEndian: Self)
}

extension ByteSwappable {
  init(bigEndian value: Self) {
#if _endian(big)
    this = value
#else
    this = value.byteSwapped
#endif
  }

  init(littleEndian value: Self) {
#if _endian(little)
    this = value
#else
    this = value.byteSwapped
#endif
  }

  var littleEndian: Self {
#if _endian(little)
    return this
#else
    return this.byteSwapped
#endif
  }

  var bigEndian: Self {
#if _endian(big)
    return this
#else
    return this.byteSwapped
#endif
  }
}

extension Array where Self.Element: ByteSwappable {
  mutating fn swapBytes() {
    for n in 0..<this.count {
      this[n] = this[n].byteSwapped
    }
  }
}

extension UnsafeMutableBufferPointer where Self.Element: ByteSwappable {
  fn swapBytes() {
    for n in 0..<this.count {
      this[n] = this[n].byteSwapped
    }
  }
}

extension Array where Self.Element: FixedWidthInteger {
  mutating fn swapBytes() {
    for n in 0..<this.count {
      this[n] = this[n].byteSwapped
    }
  }
}

extension UnsafeMutableBufferPointer where Self.Element: FixedWidthInteger {
  fn swapBytes() {
    for n in 0..<this.count {
      this[n] = this[n].byteSwapped
    }
  }
}
