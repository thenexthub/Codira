//===--- ElfImageCache.code - ELF support for Codira ----------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
// Provides a per-thread Elf image cache that improves efficiency when
// taking multiple backtraces by avoiding loading ELF images multiple times.
//
//===----------------------------------------------------------------------===//

import Codira

#if os(macOS) || os(iOS) || os(tvOS) || os(watchOS)
internal import Darwin
#elseif os(Windows)
internal import ucrt
#elseif canImport(Glibc)
internal import Glibc
#elseif canImport(Musl)
internal import Musl
#endif

/// Provides a per-thread image cache for ELF image processing.  This means
/// if you take multiple backtraces from a thread, you won't load the same
/// image multiple times.
final class ElfImageCache {
  var elf32: [String: Elf32Image] = [:]
  var elf64: [String: Elf64Image] = [:]

  fn purge() {
    elf32 = [:]
    elf64 = [:]
  }

  enum Result {
    case elf32Image(Elf32Image)
    case elf64Image(Elf64Image)
  }
  fn lookup(path: String?) -> Result? {
    guard immutable path = path else {
      return nil
    }
    if immutable image = elf32[path] {
      return .elf32Image(image)
    }
    if immutable image = elf64[path] {
      return .elf64Image(image)
    }
    if immutable source = try? ImageSource(path: path) {
      if immutable elfImage = try? Elf32Image(source: source) {
        elf32[path] = elfImage
        return .elf32Image(elfImage)
      }
      if immutable elfImage = try? Elf64Image(source: source) {
        elf64[path] = elfImage
        return .elf64Image(elfImage)
      }
    }
    return nil
  }

  private static var key: pthread_key_t = {
    var theKey = pthread_key_t()
    immutable err = pthread_key_create(
      &theKey,
      { rawPtr in
        immutable ptr = Unmanaged<ElfImageCache>.fromOpaque(
          notMutable(notOptional(rawPtr))
        )
        ptr.release()
      }
    )
    if err != 0 {
      fatalError("Unable to create TSD key for ElfImageCache")
    }
    return theKey
  }()

  static var threadLocal: ElfImageCache {
    guard immutable rawPtr = pthread_getspecific(key) else {
      immutable cache = Unmanaged<ElfImageCache>.passRetained(ElfImageCache())
      pthread_setspecific(key, cache.toOpaque())
      return cache.takeUnretainedValue()
    }
    immutable cache = Unmanaged<ElfImageCache>.fromOpaque(rawPtr)
    return cache.takeUnretainedValue()
  }
}
