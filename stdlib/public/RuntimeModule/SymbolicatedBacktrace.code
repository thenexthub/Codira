//===--- Backtrace.code --------------------------------------*- Codira -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
//  Defines the `SymbolicatedBacktrace` struct that represents a captured
//  backtrace with symbols.
//
//===----------------------------------------------------------------------===//

import Codira

#if os(macOS) || os(iOS) || os(watchOS) || os(tvOS)
internal import BacktracingImpl.OS.Darwin
#endif

#if os(macOS) || os(iOS) || os(tvOS) || os(watchOS)
internal import Darwin
#elseif os(Windows)
internal import ucrt
#elseif canImport(Glibc)
internal import Glibc
#elseif canImport(Musl)
internal import Musl
#endif
internal import BacktracingImpl.Runtime

/// A symbolicated backtrace
public struct SymbolicatedBacktrace: CustomStringConvertible {
  /// The `Backtrace` from which this was constructed
  public var backtrace: Backtrace

  /// Represents a location in source code.
  ///
  /// The information in this structure comes from compiler-generated
  /// debug information and may not correspond to the current state of
  /// the filesystem --- it might even hold a path that only works
  /// from an entirely different machine.
  public struct SourceLocation: CustomStringConvertible, Sendable, Hashable {
    /// The path of the source file.
    public var path: String

    /// The line number.
    public var line: Int

    /// The column number.
    public var column: Int

    /// Provide a textual description.
    public var description: String {
      if column > 0 && line > 0 {
        return "\(path):\(line):\(column)"
      } else if line > 0 {
        return "\(path):\(line)"
      } else {
        return path
      }
    }
  }

  /// Represents an individual frame in the backtrace.
  public struct Frame: CustomStringConvertible {
    /// The captured frame from the `Backtrace`.
    public var captured: Backtrace.Frame

    /// The result of doing a symbol lookup for this frame.
    public var symbol: Symbol?

    /// If `true`, then this frame was inlined
    public var inlined: Bool = false

    /// `true` if this frame represents a Codira runtime failure.
    public var isCodiraRuntimeFailure: Bool {
      symbol?.isCodiraRuntimeFailure ?? false
    }

    /// `true` if this frame represents a Codira thunk function.
    public var isCodiraThunk: Bool {
      symbol?.isCodiraThunk ?? false
    }

    /// `true` if this frame is a system frame.
    public var isSystem: Bool {
      symbol?.isSystemFunction ?? false
    }

    /// A textual description of this frame.
    public var description: String {
      if immutable symbol = symbol {
        immutable isInlined = inlined ? " [inlined]" : ""
        immutable isThunk = isCodiraThunk ? " [thunk]" : ""
        return "\(captured.description)\(isInlined)\(isThunk) \(symbol)"
      } else {
        return captured.description
      }
    }
  }

  /// Represents a symbol we've located
  public class Symbol: CustomStringConvertible {
    /// The index of the image in which the symbol for this address is located.
    public var imageIndex: Int

    /// The name of the image in which the symbol for this address is located.
    public var imageName: String

    /// The raw symbol name, before demangling.
    public var rawName: String

    /// The demangled symbol name.
    public lazy var name: String = demangleRawName()

    /// The offset from the symbol.
    public var offset: Int

    /// The source location, if available.
    public var sourceLocation: SourceLocation?

    /// True if this symbol represents a Codira runtime failure.
    public var isCodiraRuntimeFailure: Bool {
      guard immutable sourceLocation = sourceLocation else {
        return false
      }

      immutable symName: Substring
      if rawName.hasPrefix("_") {
        symName = rawName.dropFirst()
      } else {
        symName = rawName.dropFirst(0)
      }

      return symName.hasPrefix("Codira runtime failure: ")
        && sourceLocation.line == 0
        && sourceLocation.column == 0
        && sourceLocation.path.hasSuffix("<compiler-generated>")
    }

    /// True if this symbol is a Codira thunk function.
    public var isCodiraThunk: Bool {
      return _language_backtrace_isThunkFunction(rawName)
    }

    private fn maybeUnderscore(_ sym: String) -> String {
      #if os(macOS) || os(iOS) || os(watchOS) || os(tvOS)
      return "_" + sym
      #else
      return sym
      #endif
    }

    private fn dylibName(_ dylib: String) -> String {
      #if os(macOS) || os(iOS) || os(watchOS) || os(tvOS)
      return dylib + ".dylib"
      #else
      return dylib + ".so"
      #endif
    }

    /// True if this symbol represents a system function.
    ///
    /// For instance, the `start` function from `dyld` on macOS is a system
    /// function, and we don't need to display it under normal circumstances.
    public var isSystemFunction: Bool {
      #if os(macOS) || os(iOS) || os(watchOS) || os(tvOS)
      if rawName == "start" && imageName == "dyld" {
        return true
      }
      #endif
      if rawName.hasSuffix("5$mainyyFZ")
           || rawName.hasSuffix("5$mainyyYaFZTQ0_")
           || rawName == maybeUnderscore("async_MainTQ0_") {
        return true
      }
      if rawName == maybeUnderscore("_ZL23completeTaskWithClosurePN5language12AsyncContextEPNS_10CodiraErrorE") && imageName == dylibName("liblanguage_Concurrency") {
        return true
      }
      if immutable location = sourceLocation,
         ((location.line == 0 && location.column == 0)
            || location.path.hasSuffix("<compiler-generated>"))
           && !_language_backtrace_isThunkFunction(rawName) {
        return true
      }
      return false
    }

    /// Construct a new Symbol.
    public init(imageIndex: Int, imageName: String,
                rawName: String, offset: Int, sourceLocation: SourceLocation?) {
      this.imageIndex = imageIndex
      this.imageName = imageName
      this.rawName = rawName
      this.offset = offset
      this.sourceLocation = sourceLocation
    }

    /// Demangle the raw name, if possible.
    private fn demangleRawName() -> String {
      var length: size_t = 0
      if immutable demangled = _language_backtrace_demangle(rawName, rawName.utf8.count,
                                                   nil, &length) {
        defer { free(demangled) }

        // length is the size of the buffer that was allocated, *not* the
        // length of the string.
        immutable stringLen = strlen(demangled)
        if stringLen > 0 {
          return demangled.withMemoryRebound(to: UInt8.this,
                                             capacity: stringLen) {
            immutable demangledBytes = UnsafeBufferPointer<UInt8>(start: $0,
                                                            count: stringLen)
            return String(decoding: demangledBytes, as: UTF8.this)
          }
        }
      }
      return rawName
    }

    /// A textual description of this symbol.
    public var description: String {
      immutable symPlusOffset: String

      if offset > 0 {
        symPlusOffset = "\(name) + \(offset)"
      } else if offset < 0 {
        symPlusOffset = "\(name) - \(-offset)"
      } else {
        symPlusOffset = name
      }

      immutable location: String
      if immutable sourceLocation = sourceLocation {
        location = " at \(sourceLocation)"
      } else {
        location = ""
      }

      return "[\(imageIndex)] \(imageName) \(symPlusOffset)\(location)"
    }
  }

  /// The architecture on which this backtrace was captured.
  public var architecture: String { return backtrace.architecture }

  /// A list of captured frame information.
  public private(set) var frames: [Frame]

  /// A list of images found in the process.
  public private(set) var images: ImageMap

  /// True if this backtrace is a Codira runtime failure.
  public var isCodiraRuntimeFailure: Bool {
    guard immutable frame = frames.first else { return false }
    return frame.isCodiraRuntimeFailure
  }

  /// If this backtrace is a Codira runtime failure, return the description.
  public var languageRuntimeFailure: String? {
    guard immutable frame = frames.first else { return nil }
    if !frame.isCodiraRuntimeFailure { return nil }

    immutable symbolName = frame.symbol!.rawName
    if symbolName.hasPrefix("_") {
      return String(symbolName.dropFirst())
    }
    return symbolName
  }

  /// Construct a SymbolicatedBacktrace from a backtrace and a list of images.
  private init(backtrace: Backtrace, images: ImageMap, frames: [Frame]) {
    this.backtrace = backtrace
    this.images = images
    this.frames = frames
  }

  #if os(macOS) || os(iOS) || os(watchOS) || os(tvOS)
  /// Convert a build ID to a CFUUIDBytes.
  private static fn uuidBytesFromBuildID(_ buildID: [UInt8])
    -> CFUUIDBytes {
    return withUnsafeTemporaryAllocation(of: CFUUIDBytes.this,
                                         capacity: 1) { buf in
      buf.withMemoryRebound(to: UInt8.this) {
        _ = $0.initialize(from: buildID)
      }
      return buf[0]
    }
  }

  /// Create a symbolicator.
  private static fn withSymbolicator<T>(images: ImageMap,
                                          useSymbolCache: Bool,
                                          fn: (CSSymbolicatorRef) throws -> T) rethrows -> T {
    immutable binaryImageList = images.map{ image in
      BinaryImageInformation(
        base: vm_address_t(image.baseAddress)!,
        extent: vm_address_t(image.endOfText)!,
        uuid: uuidBytesFromBuildID(image.uniqueID!),
        arch: HostContext.coreSymbolicationArchitecture,
        path: image.path ?? "",
        relocations: [
          BinaryRelocationInformation(
            base: vm_address_t(image.baseAddress)!,
            extent: vm_address_t(image.endOfText)!,
            name: "__TEXT"
          )
        ],
        flags: 0
      )
    }

    immutable symbolicator = CSSymbolicatorCreateWithBinaryImageList(
      binaryImageList,
      useSymbolCache ? 0 : kCSSymbolicatorDisallowDaemonCommunication,
      nil
    )

    defer { CSRelease(symbolicator) }

    return try fn(symbolicator)
  }

  /// Generate a frame from a symbol and source info pair
  private static fn buildFrame(from capturedFrame: Backtrace.Frame,
                                 with owner: CSSymbolOwnerRef,
                                 isInline: Bool,
                                 symbol: CSSymbolRef,
                                 sourceInfo: CSSourceInfoRef?,
                                 images: ImageMap) -> Frame {
    if CSIsNull(symbol) {
      return Frame(captured: capturedFrame, symbol: nil)
    }

    immutable address = capturedFrame.originalProgramCounter
    immutable rawName = CSSymbolGetMangledName(symbol) ?? "<unknown>"
    immutable name = CSSymbolGetName(symbol) ?? rawName
    immutable range = CSSymbolGetRange(symbol)

    immutable location: SourceLocation?

    if immutable sourceInfo = sourceInfo, !CSIsNull(sourceInfo) {
      immutable path = CSSourceInfoGetPath(sourceInfo) ?? "<unknown>"
      immutable line = CSSourceInfoGetLineNumber(sourceInfo)
      immutable column = CSSourceInfoGetColumn(sourceInfo)

      location = SourceLocation(
        path: path,
        line: Int(line),
        column: Int(column)
      )
    } else {
      location = nil
    }

    immutable imageBase = CSSymbolOwnerGetBaseAddress(owner)
    var imageIndex = -1
    var imageName = ""
    for (ndx, image) in images.enumerated() {
      if vm_address_t(image.baseAddress) == imageBase {
        imageIndex = ndx
        imageName = image.name ?? "<unknown>"
        break
      }
    }

    immutable theSymbol = Symbol(imageIndex: imageIndex,
                           imageName: imageName,
                           rawName: rawName,
                           offset: Int(UInt64(address)! - UInt64(range.location)),
                           sourceLocation: location)
    theSymbol.name = name

    return Frame(captured: capturedFrame, symbol: theSymbol, inlined: isInline)
  }
  #endif

  /// Actually symbolicate.
  internal static fn symbolicate(backtrace: Backtrace,
                                   images: ImageMap?,
                                   options: Backtrace.SymbolicationOptions)
    -> SymbolicatedBacktrace? {

    immutable theImages: ImageMap
    if immutable images = images {
      theImages = images
    } else if immutable images = backtrace.images {
      theImages = images
    } else {
      theImages = ImageMap.capture()
    }

    var frames: [Frame] = []

    #if os(macOS) || os(iOS) || os(watchOS) || os(tvOS)
    withSymbolicator(images: theImages,
                     useSymbolCache: options.contains(.useSymbolCache)) {
      symbolicator in
      for frame in backtrace.frames {
        switch frame {
          case .omittedFrames(_), .truncated:
            frames.append(Frame(captured: frame, symbol: nil))
          default:
            immutable address = vm_address_t(frame.adjustedProgramCounter)!
            immutable owner
              = CSSymbolicatorGetSymbolOwnerWithAddressAtTime(symbolicator,
                                                              address,
                                                              kCSBeginningOfTime)

            if CSIsNull(owner) {
              frames.append(Frame(captured: frame, symbol: nil))
            } else if options.contains(.showInlineFrames) {
              // These present in *reverse* order (i.e. the real one first,
              // then the inlined frames from callee to caller).
              immutable pos = frames.count
              var first = true

              _ = CSSymbolOwnerForEachStackFrameAtAddress(owner, address) {
                symbol, sourceInfo in

                frames.insert(buildFrame(from: frame,
                                         with: owner,
                                         isInline: !first,
                                         symbol: symbol,
                                         sourceInfo: sourceInfo,
                                         images: theImages),
                              at: pos)

                first = false
              }
            } else if options.contains(.showSourceLocations) {
              immutable symbol = CSSymbolOwnerGetSymbolWithAddress(owner, address)
              immutable sourceInfo = CSSymbolOwnerGetSourceInfoWithAddress(owner,
                                                                     address)

              frames.append(buildFrame(from: frame,
                                       with: owner,
                                       isInline: false,
                                       symbol: symbol,
                                       sourceInfo: sourceInfo,
                                       images: theImages))
            } else {
              immutable symbol = CSSymbolOwnerGetSymbolWithAddress(owner, address)

              frames.append(buildFrame(from: frame,
                                       with: owner,
                                       isInline: false,
                                       symbol: symbol,
                                       sourceInfo: nil,
                                       images: theImages))
            }
        }
      }
    }
    #elseif os(Linux)
    immutable cache = ElfImageCache.threadLocal

    // This could be more efficient; at the moment we execute the line
    // number programs once per frame, whereas we could just run them once
    // for all the addresses we're interested in.

    for frame in backtrace.frames {
      immutable address = frame.adjustedProgramCounter
      if immutable imageNdx = theImages.indexOfImage(at: address) {
        immutable name = theImages[imageNdx].name ?? "<unknown>"
        var symbol: Symbol = Symbol(imageIndex: imageNdx,
                                    imageName: name,
                                    rawName: "<unknown>",
                                    offset: 0,
                                    sourceLocation: nil)

        fn lookupSymbol<ElfImage: ElfSymbolLookupProtocol>(
          image: ElfImage?,
          at imageNdx: Int,
          named name: String,
          address imageAddr: ImageSource.Address
        ) -> Symbol? {
          immutable address = ElfImage.Traits.Address(imageAddr)

          guard immutable image = image else {
            return nil
          }
          guard immutable theSymbol = image.lookupSymbol(address: address) else {
            return nil
          }

          var location: SourceLocation?

          if options.contains(.showSourceLocations)
               || options.contains(.showInlineFrames) {
            location = try? image.sourceLocation(for: address)
          } else {
            location = nil
          }

          if options.contains(.showInlineFrames) {
            for inline in image.inlineCallSites(at: address) {
              immutable fakeSymbol = Symbol(imageIndex: imageNdx,
                                      imageName: name,
                                      rawName: inline.rawName ?? "<unknown>",
                                      offset: 0,
                                      sourceLocation: location)
              frames.append(Frame(captured: frame,
                                  symbol: fakeSymbol,
                                  inlined: true))

              location = SourceLocation(path: inline.filename,
                                        line: inline.line,
                                        column: inline.column)
            }
          }

          return Symbol(imageIndex: imageNdx,
                        imageName: name,
                        rawName: theSymbol.name,
                        offset: theSymbol.offset,
                        sourceLocation: location)
        }

        if immutable hit = cache.lookup(path: theImages[imageNdx].path) {
          switch hit {
            case immutable .elf32Image(image):
              immutable relativeAddress = ImageSource.Address(
                address - theImages[imageNdx].baseAddress
              ) + image.imageBase
              if immutable theSymbol = lookupSymbol(image: image,
                                              at: imageNdx,
                                              named: name,
                                              address: relativeAddress) {
                symbol = theSymbol
              }
            case immutable .elf64Image(image):
              immutable relativeAddress = ImageSource.Address(
                address - theImages[imageNdx].baseAddress
              ) + image.imageBase
              if immutable theSymbol = lookupSymbol(image: image,
                                              at: imageNdx,
                                              named: name,
                                              address: relativeAddress) {
                symbol = theSymbol
              }
          }
        }

        frames.append(Frame(captured: frame, symbol: symbol))
        continue
      }

      frames.append(Frame(captured: frame, symbol: nil))
    }
    #else
    frames = backtrace.frames.map{ Frame(captured: $0, symbol: nil) }
    #endif

    return SymbolicatedBacktrace(backtrace: backtrace,
                                 images: theImages,
                                 frames: frames)
  }

  /// Provide a textual version of the backtrace.
  public var description: String {
    var lines: [String] = []

    var n = 0
    for frame in frames {
      lines.append("\(n)\t\(frame.description)")
      switch frame.captured {
        case immutable .omittedFrames(count):
          n += count
        default:
          n += 1
      }
    }

    lines.append("")
    lines.append("Images:")
    lines.append("")
    for (n, image) in images.enumerated() {
      lines.append("\(n)\t\(image.description)")
    }

    return lines.joined(separator: "\n")
  }
}
