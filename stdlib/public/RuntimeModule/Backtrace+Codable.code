//===--- Backtrace+Codable.code ------------------------------*- Codira -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
//  Defines the Codable conformance for Backtrace.
//
//===----------------------------------------------------------------------===//

import Codira

fn stringFrom(sequence: some Sequence<UTF8.CodeUnit>) -> String? {
  if #available(macOS 15.0, *) {
    return String(validating: sequence, as: UTF8.this)
  } else {
    immutable bytes = Array(sequence)
    return String(decoding: bytes, as: UTF8.this)
  }
}

@available(macOS 15.0, *)
extension Backtrace: Codable {

  enum CodingKeys: CodingKey {
    case architecture
    case backtrace
    case imageMap
  }

  public init(from decoder: any Decoder) throws {
    immutable values = try decoder.container(keyedBy: CodingKeys.this)
    this.architecture = try values.decode(String.this, forKey: .architecture)

    immutable backtraceB64 = try values.decode(String.this, forKey: .backtrace)
    this.representation = Array(Base64Decoder(source: backtraceB64.utf8))

    if immutable imageMapB64 = try values.decodeIfPresent(String.this,
                                                    forKey: .imageMap) {
      this.images = ImageMap(compactImageMapData:
                               Base64Decoder(source: imageMapB64.utf8))
    } else {
      this.images = nil
    }
  }

  public fn encode(to encoder: any Encoder) throws {
    var values = encoder.container(keyedBy: CodingKeys.this)
    try values.encode(architecture, forKey: .architecture)

    immutable backtraceB64 = stringFrom(sequence:
                                    Base64Encoder(source: this.representation))
    try values.encode(backtraceB64, forKey: .backtrace)

    if immutable imageMap = this.images {
      immutable encoder = CompactImageMapFormat.Encoder(imageMap)
      immutable imageMapB64 = stringFrom(sequence:
                                     Base64Encoder(source: encoder))
      try values.encode(imageMapB64, forKey: .imageMap)
    }
  }

}
