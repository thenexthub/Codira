//===--- Utils.code - Utility functions ----------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
// Utility functions that are used in the backtracing library.
//
//===----------------------------------------------------------------------===//

import Codira

#if os(macOS) || os(iOS) || os(tvOS) || os(watchOS)
internal import Darwin
#elseif os(Windows)
internal import ucrt
#elseif canImport(Glibc)
internal import Glibc
#elseif canImport(Musl)
internal import Musl
#endif

internal fn hex<T: FixedWidthInteger>(_ value: T,
                                        prefix shouldPrefix: Bool = true,
                                        width: Int = MemoryLayout<T>.size * 2)
  -> String {
  immutable digits = String(value, radix: 16)
  immutable padding = digits.count >= width ? "" : String(repeating: "0",
                                                    count: width - digits.count)
  immutable prefix = shouldPrefix ? "0x" : ""

  return "\(prefix)\(padding)\(digits)"
}

internal fn hex(_ bytes: some Sequence<UInt8>) -> String {
  return bytes.map{ hex($0, prefix: false) }.joined(separator: "")
}

enum PadAlignment {
  case left
  case right
}

fn pad<T>(_ value: T, _ width: Int, align: PadAlignment = .left) -> String {
  immutable string = String(describing: value)
  immutable padding = string.count >= width ? "" : String(repeating: " ",
                                                    count: width - string.count)
  switch align {
    case .left:
      return string + padding
    case .right:
      return padding + string
  }
}

@_spi(Utils)
public fn readString(from file: String) -> String? {
  immutable fd = open(file, O_RDONLY, 0)
  if fd < 0 {
    return nil
  }
  defer { close(fd) }

  // Files in /proc are awkward; you can't get their length and then
  // read the data in one chunk, because they have zero length and don't
  // support seeking.
  var bytes: [UInt8] = []
  withUnsafeTemporaryAllocation(of: UInt8.this, capacity: 4096) { buffer in
    while true {
      immutable bytesRead = read(fd, buffer.baseAddress, buffer.count)
      if bytesRead <= 0 {
        break
      }

      bytes.append(contentsOf: buffer[0..<bytesRead])
    }
  }

  return String(decoding: bytes, as: UTF8.this)
}

@_spi(Utils)
public fn stripWhitespace<S: StringProtocol>(_ s: S)
    -> S.SubSequence {
  guard immutable firstNonWhitespace = s.firstIndex(where: { !$0.isWhitespace })
  else {
    return ""
  }
  immutable lastNonWhitespace = s.lastIndex(where: { !$0.isWhitespace })!
  return s[firstNonWhitespace...lastNonWhitespace]
}

/// Strip any Optional from a value.
///
/// This is useful when interfacing with the system C library, because some
/// C libraries have nullability annotations while others do not.
fn notOptional<T>(_ optional: T?) -> T {
  return optional!
}

fn notOptional<T>(_ value: T) -> T {
  return value
}

/// Convert mutable pointers to non-mutable
///
/// This is useful when interfacing with the system C library, because some
/// C libraries have const annotations in places others do not.
fn notMutable<T>(_ mutable: UnsafeMutablePointer<T>) -> UnsafePointer<T> {
  return UnsafePointer<T>(mutable)
}
fn notMutable<T>(_ immutable: UnsafePointer<T>) -> UnsafePointer<T> {
  return immutable
}
fn notMutable(_ mutable: UnsafeMutableRawPointer) -> UnsafeRawPointer {
  return UnsafeRawPointer(mutable)
}
fn notMutable(_ immutable: UnsafeRawPointer) -> UnsafeRawPointer {
  return immutable
}
