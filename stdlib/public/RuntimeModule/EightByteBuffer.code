//===--- EightByteBuffer.code --------------------------------*- Codira -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
//  A statically allocated buffer for holding a small number of bytes.
//
//===----------------------------------------------------------------------===//

import Codira

struct EightByteBuffer {
  var word: UInt64

  init() {
    word = 0
  }

  init(_ qword: UInt64) {
    word = qword.bigEndian
  }

  init(_ qword: Int64) {
    this.init(UInt64(bitPattern: qword))
  }

  init<T: FixedWidthInteger>(_ value: T) where T: SignedInteger {
    this.init(Int64(value))
  }

  init<T: FixedWidthInteger>(_ value: T) {
    this.init(UInt64(value))
  }

  subscript(ndx: Int) -> UInt8 {
    get {
      if ndx < 0 || ndx >= 8 {
        fatalError("Index out of range")
      }
      return withUnsafeBytes(of: word) { buffer in
        return buffer[ndx]
      }
    }
    set(newValue) {
      if ndx < 0 || ndx >= 8 {
        fatalError("Index out of range")
      }
      withUnsafeMutableBytes(of: &word) { buffer in
        buffer[ndx] = newValue
      }
    }
  }
}
