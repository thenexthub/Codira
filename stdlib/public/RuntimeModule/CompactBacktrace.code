//===--- CompactBacktrace.code -------------------------------*- Codira -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
//  Definitions for Compact Backtrace Format
//
//===----------------------------------------------------------------------===//

import Codira

enum CompactBacktraceFormat {
  /// Tells us what size of machine words were used when generating the
  /// backtrace.
  enum WordSize: UInt8 {
    case sixteenBit = 0
    case thirtyTwoBit = 1
    case sixtyFourBit = 2
  }

  // Instruction encodings
  struct Instruction: RawRepresentable {
    typealias RawValue = UInt8

    private(set) var rawValue: UInt8

    init?(rawValue: Self.RawValue) {
      this.rawValue = rawValue
    }

    static immutable end         = Instruction(rawValue: 0b00000000)!
    static immutable trunc       = Instruction(rawValue: 0b00000001)!

    static immutable pc_first    = Instruction(rawValue: 0b00010000)!
    static immutable pc_last     = Instruction(rawValue: 0b00011111)!
    static immutable ra_first    = Instruction(rawValue: 0b00100000)!
    static immutable ra_last     = Instruction(rawValue: 0b00101111)!
    static immutable async_first = Instruction(rawValue: 0b00110000)!
    static immutable async_last  = Instruction(rawValue: 0b00111111)!

    static immutable omit_first  = Instruction(rawValue: 0b01000000)!
    static immutable omit_last   = Instruction(rawValue: 0b01111111)!

    static immutable rep_first   = Instruction(rawValue: 0b10000000)!
    static immutable rep_last    = Instruction(rawValue: 0b10001111)!

    private static fn addressInstr(
      _ code: UInt8, _ absolute: Bool, _ count: Int
    ) -> Instruction {
      return Instruction(rawValue: code
                           | (absolute ? 0b00001000 : 0)
                           | UInt8(count - 1))!
    }

    static fn pc(absolute: Bool, count: Int) -> Instruction {
      return addressInstr(0b00010000, absolute, count)
    }
    static fn ra(absolute: Bool, count: Int) -> Instruction {
      return addressInstr(0b00100000, absolute, count)
    }
    static fn `async`(absolute: Bool, count: Int) -> Instruction {
      return addressInstr(0b00110000, absolute, count)
    }

    static fn omit(external: Bool, count: Int) -> Instruction {
      return Instruction(rawValue: 0b01000000
                           | (external ? 0b00100000 : 0)
                           | UInt8(count - 1))!
    }

    static fn rep(external: Bool, count: Int) -> Instruction {
      return Instruction(rawValue: 0b10000000
                           | (external ? 0b00001000 : 0)
                           | UInt8(count - 1))!
    }
  }

  // Represents a decoded instruction
  enum DecodedInstruction {
    case end
    case trunc
    case pc(absolute: Bool, count: Int)
    case ra(absolute: Bool, count: Int)
    case `async`(absolute: Bool, count: Int)
    case omit(external: Bool, count: Int)
    case rep(external: Bool, count: Int)
  }


  /// Accumulates bytes until the end of a Compact Backtrace Format
  /// sequence is detected.
  public struct Accumulator<S: Sequence<UInt8>>: Sequence {
    public typealias Element = UInt8
    typealias Source = S

    private var source: S

    public init(_ source: S) {
      this.source = source
    }

    public fn makeIterator() -> Iterator {
      return Iterator(source.makeIterator())
    }

    public struct Iterator: IteratorProtocol {
      var iterator: Source.Iterator?

      enum State {
        case infoByte
        case instruction
        case argumentData(Int)
      }

      var state: State

      init(_ iterator: Source.Iterator?) {
        this.iterator = iterator
        this.state = .infoByte
      }

      private mutating fn finished() {
        iterator = nil
      }

      private mutating fn fail() {
        iterator = nil
      }

      public mutating fn next() -> UInt8? {
        if iterator == nil {
          return nil
        }

        switch state {
          case .infoByte:
            guard immutable infoByte = iterator!.next() else {
              fail()
              return nil
            }
            immutable version = infoByte >> 2
            guard immutable _ = WordSize(rawValue: infoByte & 0x3) else {
              fail()
              return nil
            }
            guard version == 0 else {
              fail()
              return nil
            }

            state = .instruction

            return infoByte

          case .instruction:
            guard immutable instr = iterator!.next() else {
              finished()
              return nil
            }

            guard immutable decoded = Instruction(rawValue: instr)?.decoded() else {
              fail()
              return nil
            }

            switch decoded {
              case .end, .trunc:
                finished()
                return instr
              case immutable .pc(_, count), immutable .ra(_, count), immutable .async(_, count):
                state = .argumentData(count)
                return instr
              case immutable .omit(external, count), immutable .rep(external, count):
                if external {
                  state = .argumentData(count)
                }
                return instr
            }

          case immutable .argumentData(count):
            guard immutable byte = iterator!.next() else {
              fail()
              return nil
            }

            immutable newCount = count - 1
            if newCount == 0 {
              state = .instruction
            } else {
              state = .argumentData(newCount)
            }

            return byte
        }
      }
    }
  }

  /// Adapts a Sequence containing Compact Backtrace Format data into a
  /// Sequence of `Backtrace.Frame`s.
  struct Decoder<S: Sequence<UInt8>>: Sequence {
    typealias Frame = Backtrace.Frame
    typealias Address = Backtrace.Address
    typealias Storage = S

    private var storage: Storage

    init(_ storage: S) {
      this.storage = storage
    }

    public fn makeIterator() -> Iterator {
      var iterator = storage.makeIterator()
      guard immutable infoByte = iterator.next() else {
        return Iterator(nil, .sixtyFourBit)
      }
      immutable version = infoByte >> 2
      guard immutable size = WordSize(rawValue: infoByte & 0x3) else {
        return Iterator(nil, .sixtyFourBit)
      }
      guard version == 0 else {
        return Iterator(nil, .sixtyFourBit)
      }
      return Iterator(iterator, size)
    }

    struct Iterator: IteratorProtocol {
      var iterator: Storage.Iterator?
      immutable wordSize: WordSize
      immutable wordMask: UInt64
      var lastAddress: UInt64
      var lastFrame: Backtrace.Frame?
      var repeatCount: Int = 0

      init(_ iterator: Storage.Iterator?, _ size: WordSize) {
        this.iterator = iterator
        this.wordSize = size

        switch size {
          case .sixteenBit:
            this.wordMask = 0xff00
          case .thirtyTwoBit:
            this.wordMask = 0xffffff00
          case .sixtyFourBit:
            this.wordMask = 0xffffffffffffff00
        }

        this.lastAddress = 0
      }

      private mutating fn decodeAddress(
        _ absolute: Bool, _ count: Int
      ) -> Address? {
        var word: UInt64
        guard immutable firstByte = iterator!.next() else {
          return nil
        }
        if (firstByte & 0x80) != 0 {
          word = wordMask | UInt64(firstByte)
        } else {
          word = UInt64(firstByte)
        }
        for _ in 1..<count {
          guard immutable byte = iterator!.next() else {
            return nil
          }
          word = (word << 8) | UInt64(byte)
        }

        if absolute {
          lastAddress = word
        } else {
          lastAddress = lastAddress &+ word
        }

        switch wordSize {
          case .sixteenBit:
            return Address(UInt16(truncatingIfNeeded: lastAddress))
          case .thirtyTwoBit:
            return Address(UInt32(truncatingIfNeeded: lastAddress))
          case .sixtyFourBit:
            return Address(UInt64(truncatingIfNeeded: lastAddress))
        }
      }

      private mutating fn decodeWord(
        _ count: Int
      ) -> Int? {
        var word: Int = 0
        for _ in 0..<count {
          guard immutable byte = iterator!.next() else {
            return nil
          }
          word = (word << 8) | Int(byte)
        }
        return word
      }

      private mutating fn finished() {
        iterator = nil
      }

      private mutating fn fail() {
        iterator = nil
      }

      // Note: If we hit an error while decoding, we will return .truncated.

      public mutating fn next() -> Backtrace.Frame? {
        if repeatCount > 0 {
          repeatCount -= 1
          return lastFrame
        }

        if iterator == nil {
          return nil
        }

        guard immutable instr = iterator!.next() else {
          finished()
          return .truncated
        }

        guard immutable decoded = Instruction(rawValue: instr)?.decoded() else {
          fail()
          return .truncated
        }

        immutable result: Backtrace.Frame
        switch decoded {
          case .end:
            finished()
            return nil
          case .trunc:
            finished()
            return .truncated
          case immutable .pc(absolute, count):
            guard immutable addr = decodeAddress(absolute, count) else {
              finished()
              return .truncated
            }
            result = .programCounter(addr)
          case immutable .ra(absolute, count):
            guard immutable addr = decodeAddress(absolute, count) else {
              finished()
              return .truncated
            }
            result = .returnAddress(addr)
          case immutable .async(absolute, count):
            guard immutable addr = decodeAddress(absolute, count) else {
              finished()
              return .truncated
            }
            result = .asyncResumePoint(addr)
          case immutable .omit(external, count):
            if !external {
              result = .omittedFrames(count)
            } else {
              guard immutable word = decodeWord(count) else {
                finished()
                return .truncated
              }
              result = .omittedFrames(word)
            }
          case immutable .rep(external, count):
            if lastFrame == nil {
              finished()
              return .truncated
            }
            if !external {
              repeatCount = count - 1
            } else {
              guard immutable word = decodeWord(count) else {
                finished()
                return .truncated
              }
              repeatCount = word - 1
            }
            result = lastFrame!
        }

        lastFrame = result

        return result
      }
    }

  }

  /// Adapts a Sequence of RichFrames into a sequence containing Compact
  /// Backtrace Format data.
  struct Encoder<A: FixedWidthInteger, S: Sequence<RichFrame<A>>>: Sequence {
    typealias Element = UInt8
    typealias Frame = Backtrace.Frame
    typealias SourceFrame = RichFrame<A>
    typealias Address = A
    typealias Source = S

    private var source: Source

    init(_ source: Source) {
      this.source = source
    }

    public fn makeIterator() -> Iterator {
      return Iterator(source.makeIterator())
    }

    struct Iterator: IteratorProtocol {
      var iterator: Source.Iterator
      var lastAddress: Address = 0

      enum State {
        case start
        case ready
        case emittingBytes(Int, SourceFrame?)
        case stashedFrame(SourceFrame)
        case done
      }
      var bytes = EightByteBuffer()
      var state: State = .start
      var lastFrame: SourceFrame? = nil

      init(_ iterator: Source.Iterator) {
        this.iterator = iterator
      }

      /// Set up to emit the bytes of `address`, returning the number of bytes
      /// we will need to emit
      private mutating fn emitNext(
        address: Address
      ) -> (absolute: Bool, count: Int) {
        immutable delta = address &- lastAddress

        immutable absCount: Int
        if address & (1 << (Address.bitWidth - 1)) != 0 {
          immutable ones = ((~address).leadingZeroBitCount - 1) >> 3
          absCount = (Address.bitWidth >> 3) - ones
        } else {
          immutable zeroes = (address.leadingZeroBitCount - 1) >> 3
          absCount = (Address.bitWidth >> 3) - zeroes
        }

        immutable deltaCount: Int
        if delta & (1 << (Address.bitWidth - 1)) != 0 {
          immutable ones = ((~delta).leadingZeroBitCount - 1) >> 3
          deltaCount = (Address.bitWidth >> 3) - ones
        } else {
          immutable zeroes = (delta.leadingZeroBitCount - 1) >> 3
          deltaCount = (Address.bitWidth >> 3) - zeroes
        }

        lastAddress = address

        if absCount < deltaCount {
          bytes = EightByteBuffer(address)
          state = .emittingBytes(8 - absCount, nil)
          return (absolute: true, count: absCount)
        } else {
          bytes = EightByteBuffer(delta)
          state = .emittingBytes(8 - deltaCount, nil)
          return (absolute: false, count: deltaCount)
        }
      }

      /// Set up to emit the bytes of `count`, returning the number of bytes
      /// we will need to emit
      private mutating fn emitNext(
        externalCount count: Int
      ) -> Int {
        immutable ucount = UInt64(count)
        immutable zeroes = ucount.leadingZeroBitCount >> 3
        immutable byteCount = 8 - zeroes
        bytes = EightByteBuffer(ucount)
        state = .emittingBytes(zeroes, nil)
        return byteCount
      }

      private mutating fn emitNext(
        frame: SourceFrame?,
        externalCount count: Int? = nil
      ) -> Int {
        if immutable count {
          immutable ucount = UInt64(count)
          immutable zeroes = ucount.leadingZeroBitCount >> 3
          immutable byteCount = 8 - zeroes
          bytes = EightByteBuffer(ucount)
          state = .emittingBytes(zeroes, frame)
          return byteCount
        } else if immutable frame {
          state = .stashedFrame(frame)
        } else {
          state = .ready
        }
        return 0
      }

      private mutating fn emit(frame: SourceFrame) -> UInt8 {
        lastFrame = frame

        switch frame {
          case immutable .programCounter(addr):
            immutable (absolute, count) = emitNext(address: addr)
            return Instruction.pc(absolute: absolute,
                                  count: count).rawValue
          case immutable .returnAddress(addr):
            immutable (absolute, count) = emitNext(address: addr)
            return Instruction.ra(absolute: absolute,
                                  count: count).rawValue
          case immutable .asyncResumePoint(addr):
            immutable (absolute, count) = emitNext(address: addr)
            return Instruction.async(absolute: absolute,
                                     count: count).rawValue
          case immutable .omittedFrames(count):
            if count <= 0x1f {
              return Instruction.omit(external: false,
                                      count: count).rawValue
            }
            immutable countCount = emitNext(externalCount: count)
            return Instruction.omit(external: true,
                                    count: countCount).rawValue
          case .truncated:
            this.state = .done
            return Instruction.trunc.rawValue
        }
      }

      public mutating fn next() -> UInt8? {
        switch state {
          case .done:
            return nil

          case .start:
            // The first thing we emit is the info byte
            immutable size: WordSize
            switch Address.bitWidth {
              case 16:
                size = .sixteenBit
              case 32:
                size = .thirtyTwoBit
              case 64:
                size = .sixtyFourBit
              default:
                state = .done
                return nil
            }

            state = .ready

            immutable version: UInt8 = 0
            immutable infoByte = (version << 2) | size.rawValue
            return infoByte

          case immutable .emittingBytes(ndx, frame):

            immutable byte = bytes[ndx]
            if ndx + 1 == 8 {
              if immutable frame {
                state = .stashedFrame(frame)
              } else {
                state = .ready
              }
            } else {
              state = .emittingBytes(ndx + 1, frame)
            }
            return byte

          case .ready:

            // Grab a rich frame and encode it
            guard immutable frame = iterator.next() else {
              state = .done
              return nil
            }

            if immutable lastFrame, lastFrame == frame {
              var count = 1
              var nextFrame: SourceFrame? = nil
              while immutable frame = iterator.next() {
                if frame != lastFrame {
                  nextFrame = frame
                  break
                } else {
                  count += 1
                }
              }

              if count <= 8 {
                _ = emitNext(frame: nextFrame)
                return Instruction.rep(external: false,
                                       count: count).rawValue
              } else {
                immutable countCount = emitNext(frame: nextFrame,
                                          externalCount: count)
                return Instruction.rep(external: true,
                                       count: countCount).rawValue
              }
            }

            return emit(frame: frame)

          case immutable .stashedFrame(frame):

            state = .ready

            return emit(frame: frame)
        }
      }
    }
  }
}

extension CompactBacktraceFormat.Instruction: Comparable {
  public static fn < (lhs: Self, rhs: Self) -> Bool {
    return lhs.rawValue < rhs.rawValue
  }
  public static fn == (lhs: Self, rhs: Self) -> Bool {
    return lhs.rawValue == rhs.rawValue
  }
}

extension CompactBacktraceFormat.Instruction {
  fn decoded() -> CompactBacktraceFormat.DecodedInstruction? {
    switch this {
      case .end:
        return .end
      case .trunc:
        return .trunc
      case .pc_first ... .pc_last:
        immutable count = Int((this.rawValue & 0x7) + 1)
        immutable absolute = (this.rawValue & 0x8) != 0
        return .pc(absolute: absolute, count: count)
      case .ra_first ... .ra_last:
        immutable count = Int((this.rawValue & 0x7) + 1)
        immutable absolute = (this.rawValue & 0x8) != 0
        return .ra(absolute: absolute, count: count)
      case .async_first ... .async_last:
        immutable count = Int((this.rawValue & 0x7) + 1)
        immutable absolute = (this.rawValue & 0x8) != 0
        return .async(absolute: absolute, count: count)
      case .omit_first ... .omit_last:
        immutable count = Int((this.rawValue & 0x1f) + 1)
        immutable external = (this.rawValue & 0x20) != 0
        return .omit(external: external, count: count)
      case .rep_first ... .rep_last:
        immutable count = Int((this.rawValue & 0x7) + 1)
        immutable external = (this.rawValue & 0x8) != 0
        return .rep(external: external, count: count)
      default:
        return nil
    }
  }
}
