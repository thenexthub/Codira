//===--- CompatibilityOverridesConcurrency.def - Overrides Info -*- C++ -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
// This file defines x-macros used for metaprogramming with the set of
// compatibility override functions.
//
//===----------------------------------------------------------------------===//

/// #define OVERRIDE(name, ret, attrs, ccAttrs, namespace, typedArgs, namedArgs)
///   Provides information about an overridable function.
///   - name is the name of the function, without any leading language_ or
///     namespace.
///   - ret is the return type of the function.
///   - attrs is the attributes, if any, applied to the function definition.
///   - ccAttrs is the calling convention attributes, if any, applied to the
///     function definition and corresponding typedefs
///   - namespace is the namespace, if any, the function is in, including a
///     trailing ::
///   - typedArgs is the argument list, including types, surrounded by
///     parentheses
///   - namedArgs is the list of argument names, with no types, surrounded by
///     parentheses
///
/// The entries are organized by group. A user may define OVERRIDE to get all
/// entries, or define one or more of the more specific OVERRIDE_* variants to
/// get only those entries.

// NOTE: this file is used to build the definition of
// ConcurrencyOverrideSection in Overrides.cpp for the 5.6 compatibility
// library.  It matches the definition of the concurrency OverrideSection
// for the 5.6 release and must not be edited.

#ifdef OVERRIDE
#  define OVERRIDE_ACTOR OVERRIDE
#  define OVERRIDE_TASK OVERRIDE
#  define OVERRIDE_ASYNC_LET OVERRIDE
#  define OVERRIDE_TASK_GROUP OVERRIDE
#  define OVERRIDE_TASK_LOCAL OVERRIDE
#  define OVERRIDE_TASK_STATUS OVERRIDE
#else
#  ifndef OVERRIDE_ACTOR
#    define OVERRIDE_ACTOR(...)
#  endif
#  ifndef OVERRIDE_TASK
#    define OVERRIDE_TASK(...)
#  endif
#  ifndef OVERRIDE_ASYNC_LET
#    define OVERRIDE_ASYNC_LET(...)
#  endif
#  ifndef OVERRIDE_TASK_GROUP
#    define OVERRIDE_TASK_GROUP(...)
#  endif
#  ifndef OVERRIDE_TASK_LOCAL
#    define OVERRIDE_TASK_LOCAL(...)
#  endif
#  ifndef OVERRIDE_TASK_STATUS
#    define OVERRIDE_TASK_STATUS(...)
#  endif
#endif

OVERRIDE_ACTOR(task_enqueue, void,
               LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
               language::, (class Job *job, ExecutorRef executor),
               (job, executor))

OVERRIDE_ACTOR(job_run, void,
               LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
               language::, (class Job *job, ExecutorRef executor),
               (job, executor))

OVERRIDE_ACTOR(task_getCurrentExecutor, ExecutorRef,
               LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
               language::, ,)

OVERRIDE_ACTOR(task_isCurrentExecutor, bool,
               LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
               language::, (ExecutorRef executor), (executor))

OVERRIDE_ACTOR(task_switch, void,
               LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
               language::, (LANGUAGE_ASYNC_CONTEXT AsyncContext *resumeToContext,
               TaskContinuationFunction *resumeFunction, ExecutorRef newExecutor),
               (resumeToContext, resumeFunction, newExecutor))

OVERRIDE_TASK(task_create_common, AsyncTaskAndContext,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language), language::,
              (size_t taskCreateFlags,
               TaskOptionRecord *options,
               const Metadata *futureResultType,
               FutureAsyncSignature::FunctionType *function,
               void *closureContext,
               size_t initialContextSize),
              (taskCreateFlags, options, futureResultType, function,
               closureContext, initialContextSize))

OVERRIDE_TASK(task_future_wait, void, LANGUAGE_EXPORT_FROM(language_Concurrency),
              LANGUAGE_CC(languageasync), language::,
              (OpaqueValue *result,
               LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext, AsyncTask *task,
               TaskContinuationFunction *resumeFunction,
               AsyncContext *callContext),
              (result, callerContext, task, resumeFunction, callContext))

OVERRIDE_TASK(task_future_wait_throwing, void,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
              language::,
              (OpaqueValue *result,
               LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext, AsyncTask *task,
               ThrowingTaskFutureWaitContinuationFunction *resumeFunction,
               AsyncContext *callContext),
              (result, callerContext, task, resumeFunction, callContext))

OVERRIDE_TASK(continuation_resume, void, LANGUAGE_EXPORT_FROM(language_Concurrency),
              LANGUAGE_CC(language), language::,
              (AsyncTask *continuation),
              (continuation))

OVERRIDE_TASK(continuation_throwingResume, void,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language), language::,
              (AsyncTask *continuation),
              (continuation))

OVERRIDE_TASK(continuation_throwingResumeWithError, void,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language), language::,
              (AsyncTask *continuation, CodiraError *error),
              (continuation, error))

OVERRIDE_TASK(task_addCancellationHandler,
              CancellationNotificationStatusRecord *,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language), language::,
              (CancellationNotificationStatusRecord::FunctionType handler,
               void *context),
              (handler, context))

OVERRIDE_TASK(task_removeCancellationHandler, void,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language), language::,
              (CancellationNotificationStatusRecord *record), (record))

OVERRIDE_TASK(task_createNullaryContinuationJob, NullaryContinuationJob *,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language), language::,
              (size_t priority,
               AsyncTask *continuation), (priority, continuation))

OVERRIDE_TASK(task_asyncMainDrainQueue, void,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language), language::,
              , )

OVERRIDE_TASK(task_suspend, AsyncTask *,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
              language::, ,)

OVERRIDE_TASK(continuation_init, AsyncTask *,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
              language::, (ContinuationAsyncContext *context,
                        AsyncContinuationFlags flags),
              (context, flags))

OVERRIDE_TASK(continuation_await, void,
              LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
              language::, (ContinuationAsyncContext *context),
              (context))

OVERRIDE_ASYNC_LET(asyncLet_wait, void, LANGUAGE_EXPORT_FROM(language_Concurrency),
                   LANGUAGE_CC(languageasync), language::,
                   (OpaqueValue *result,
                       LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext,
                       AsyncLet *alet, TaskContinuationFunction *resumeFn,
                       AsyncContext *callContext),
                   (result, callerContext, alet, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_wait_throwing, void,
                   LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
                   language::,
                   (OpaqueValue *result,
                       LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext,
                       AsyncLet *alet,
                       ThrowingTaskFutureWaitContinuationFunction *resume,
                       AsyncContext *callContext),
                   (result, callerContext, alet, resume, callContext))

OVERRIDE_ASYNC_LET(asyncLet_end, void,
                   LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                   language::, (AsyncLet *alet), (alet))

OVERRIDE_ASYNC_LET(asyncLet_get, void,
                   LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
                   language::,
                   (LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    TaskContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_get_throwing, void,
                   LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
                   language::,
                   (LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    ThrowingTaskFutureWaitContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_consume, void,
                   LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
                   language::,
                   (LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    TaskContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_consume_throwing, void,
                   LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
                   language::,
                   (LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    ThrowingTaskFutureWaitContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_finish, void,
                   LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
                   language::,
                   (LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    TaskContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_TASK_GROUP(taskGroup_initialize, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::, (TaskGroup *group, const Metadata *T), (group, T))

OVERRIDE_TASK_STATUS(taskGroup_attachChild, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::, (TaskGroup *group, AsyncTask *child),
                    (group, child))

OVERRIDE_TASK_GROUP(taskGroup_destroy, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::, (TaskGroup *group), (group))

OVERRIDE_TASK_GROUP(taskGroup_wait_next_throwing, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(languageasync),
                    language::,
                    (OpaqueValue *resultPointer,
                     LANGUAGE_ASYNC_CONTEXT AsyncContext *callerContext,
                     TaskGroup *_group,
                     ThrowingTaskFutureWaitContinuationFunction *resumeFn,
                     AsyncContext *callContext),
                    (resultPointer, callerContext, _group, resumeFn,
                    callContext))

OVERRIDE_TASK_GROUP(taskGroup_isEmpty, bool,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::, (TaskGroup *group), (group))

OVERRIDE_TASK_GROUP(taskGroup_isCancelled, bool,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::, (TaskGroup *group), (group))

OVERRIDE_TASK_GROUP(taskGroup_cancelAll, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::, (TaskGroup *group), (group))

OVERRIDE_TASK_GROUP(taskGroup_addPending, bool,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::, (TaskGroup *group, bool unconditionally),
                    (group, unconditionally))


OVERRIDE_TASK_LOCAL(task_reportIllegalTaskLocalBindingWithinWithTaskGroup, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language), language::,
                    (const unsigned char *file, uintptr_t fileLength,
                        bool fileIsASCII, uintptr_t line),
                    (file, fileLength, fileIsASCII, line))

OVERRIDE_TASK_LOCAL(task_localValuePush, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::,
                    (const HeapObject *key, OpaqueValue *value,
                     const Metadata *valueType),
                    (key, value, valueType))

OVERRIDE_TASK_LOCAL(task_localValueGet, OpaqueValue *,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::,
                    (const HeapObject *key),
                    (key))

OVERRIDE_TASK_LOCAL(task_localValuePop, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::, ,)

OVERRIDE_TASK_LOCAL(task_localsCopyTo, void,
                    LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                    language::,
                    (AsyncTask *target),
                    (target))

OVERRIDE_TASK_STATUS(task_addStatusRecord, bool,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, (TaskStatusRecord *newRecord), (newRecord))

OVERRIDE_TASK_STATUS(task_tryAddStatusRecord, bool,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, (TaskStatusRecord *newRecord), (newRecord))

OVERRIDE_TASK_STATUS(task_removeStatusRecord, bool,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, (TaskStatusRecord *record), (record))

OVERRIDE_TASK_STATUS(task_hasTaskGroupStatusRecord, bool,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, , )

OVERRIDE_TASK_STATUS(task_attachChild, ChildTaskStatusRecord *,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, (AsyncTask *child), (child))

OVERRIDE_TASK_STATUS(task_detachChild, void,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, (ChildTaskStatusRecord *record), (record))

OVERRIDE_TASK_STATUS(task_cancel, void, LANGUAGE_EXPORT_FROM(language_Concurrency),
                     LANGUAGE_CC(language), language::, (AsyncTask *task), (task))

OVERRIDE_TASK_STATUS(task_cancel_group_child_tasks, void,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, (TaskGroup *group), (group))

OVERRIDE_TASK_STATUS(task_escalate, JobPriority,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, (AsyncTask *task, JobPriority newPriority),
                     (task, newPriority))

/// We need to keep this entry due to ABI requirements but this overridable
/// function is not used at all so we will change the function definition to
/// return void instead.
OVERRIDE_TASK_STATUS(task_getNearestDeadline, void,
                     LANGUAGE_EXPORT_FROM(language_Concurrency), LANGUAGE_CC(language),
                     language::, (AsyncTask *task), (task))

#undef OVERRIDE_ACTOR
#undef OVERRIDE_TASK
#undef OVERRIDE_ASYNC_LET
#undef OVERRIDE_TASK_GROUP
#undef OVERRIDE_TASK_LOCAL
#undef OVERRIDE_TASK_STATUS
