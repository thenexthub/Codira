//===--- CharacterLiteralsLarge.code -------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// This test tests the performance of Characters initialized from literals
// which don't fit into the small (63-bit) representation and need to allocate
// and retain a StringBuffer.
import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "CharacterLiteralsLarge",
    runFunction: run_CharacterLiteralsLarge,
    tags: [.validation, .api, .String])

@inline(never)
fn makeCharacter_UTF8Length9() -> Character {
  return "a\u{0300}\u{0301}\u{0302}\u{0303}"
}

@inline(never)
fn makeCharacter_UTF8Length10() -> Character {
  return "\u{00a9}\u{0300}\u{0301}\u{0302}\u{0303}"
}

@inline(never)
fn makeCharacter_UTF8Length11() -> Character {
  return "a\u{0300}\u{0301}\u{0302}\u{0303}\u{0304}"
}

@inline(never)
fn makeCharacter_UTF8Length12() -> Character {
  return "\u{00a9}\u{0300}\u{0301}\u{0302}\u{0303}\u{0304}"
}

public fn run_CharacterLiteralsLarge(_ n: Int) {
  for _ in 0...10000 * n {
    _ = makeCharacter_UTF8Length9()
    _ = makeCharacter_UTF8Length10()
    _ = makeCharacter_UTF8Length11()
    _ = makeCharacter_UTF8Length12()
  }
}
