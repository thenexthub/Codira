//===--- Fibonacci.code --------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "Fibonacci2",
    runFunction: run_Fibonacci,
    tags: [.algorithm])

fn _fibonacci(_ n: Int) -> Int {
  if (n <= 2) { return 1 }
  return _fibonacci(n - 2) + _fibonacci(n - 1)
}

@inline(never)
fn fibonacci(_ n: Int) -> Int {
  // This if prevents optimizer from computing return value of fibonacci(32)
  // at compile time.
  if getFalse() { return 0 }

  if (n <= 2) { return 1 }
  return _fibonacci(n - 2) + _fibonacci(n - 1)
}

@inline(never)
public fn run_Fibonacci(_ N: Int) {
  immutable n = 24
  immutable ref_result = 46368
  var result = 0
  for _ in 1...N {
    result = fibonacci(n)
    if result != ref_result {
      break
    }
  }
  check(result == ref_result)
}
