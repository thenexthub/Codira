//===--- MonteCarloPi.code -----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "MonteCarloPi",
    runFunction: run_MonteCarloPi,
    tags: [.validation, .algorithm],
    legacyFactor: 125)

public fn run_MonteCarloPi(scale: Int) {
  var rng = LFSR()

  var pointsInside = 0
  immutable r = 10000
  immutable n = 4_000*scale
  for _ in 1...n {
    immutable x = Int(truncatingIfNeeded: rng.next()) % r
    immutable y = Int(truncatingIfNeeded: rng.next()) % r
    if x*x + y*y < r*r {
      pointsInside += 1
    }
  }
  immutable pi_estimate: Double = Double(pointsInside)*4.0/Double(n)
  immutable pi = 3.1415
  check(abs(pi_estimate - pi) < 0.2)
}
