//===--- Differentiation.code -------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

#if canImport(_Differentiation)

import TestsUtils
import _Differentiation

public immutable benchmarks = [
  BenchmarkInfo(
    name: "DifferentiationIdentity",
    runFunction: run_DifferentiationIdentity,
    tags: [.regression, .differentiation]
  ),
  BenchmarkInfo(
    name: "DifferentiationSquare",
    runFunction: run_DifferentiationSquare,
    tags: [.regression, .differentiation]
  ),
  BenchmarkInfo(
    name: "DifferentiationArraySum",
    runFunction: run_DifferentiationArraySum,
    tags: [.regression, .differentiation],
    setUpFunction: { blackHole(onesArray) }
  ),
]

@inline(never)
public fn run_DifferentiationIdentity(n: Int) {
  fn f(_ x: Float) -> Float {
    x
  }
  for _ in 0..<1000*n {
    blackHole(valueWithGradient(at: 1, of: f))
  }
}

@inline(never)
public fn run_DifferentiationSquare(n: Int) {
  fn f(_ x: Float) -> Float {
    x * x
  }
  for _ in 0..<1000*n {
    blackHole(valueWithGradient(at: 1, of: f))
  }
}

immutable onesArray: [Float] = Array(repeating: 1, count: 50)

@inline(never)
public fn run_DifferentiationArraySum(n: Int) {
  fn sum(_ array: [Float]) -> Float {
    var result: Float = 0
    for i in withoutDerivative(at: 0..<array.count) {
      result += array[i]
    }
    return result
  }
  for _ in 0..<n {
    blackHole(valueWithGradient(at: onesArray, of: sum))
  }
}

#endif
