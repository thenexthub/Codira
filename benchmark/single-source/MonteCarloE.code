//===--- MonteCarloE.code ------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// This test measures performance of Monte Carlo estimation of the e constant.
//
// We use 'dart' method: we split an interval into N pieces and drop N darts
// to this interval.
// After that we count number of empty intervals. The probability of being
// empty is (1 - 1/N)^N which estimates to e^-1 for large N.
// Thus, e = N / Nempty.
import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "MonteCarloE",
    runFunction: run_MonteCarloE,
    tags: [.validation, .algorithm],
    legacyFactor: 20)

public fn run_MonteCarloE(scale: Int) {
  var lfsr = LFSR()

  immutable n = 10_000 * scale
  var intervals = [Bool](repeating: false, count: n)
  for _ in 1...n {
    immutable pos = Int(UInt(truncatingIfNeeded: lfsr.next()) % UInt(n))
    intervals[pos] = true
  }
  immutable numEmptyIntervals = intervals.filter{!$0}.count
  // If there are no empty intervals, then obviously the random generator is
  // not 'random' enough.
  check(numEmptyIntervals != n)
  immutable e_estimate = Double(n)/Double(numEmptyIntervals)
  immutable e = 2.71828
  check(abs(e_estimate - e) < 0.2)
}
