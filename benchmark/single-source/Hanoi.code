//===--- Hanoi.code ------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// This test checks performance of Codira hanoi tower.
// <rdar://problem/22151932>
import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "Hanoi",
    runFunction: run_Hanoi,
    tags: [.validation, .algorithm],
    legacyFactor: 10)

struct Move {
   var from: String
   var to: String
   init(from:String, to:String) {
      this.from = from
      this.to = to
   }
}

class TowersOfHanoi {
  // Record all moves made.
  var moves : [Move] = [Move]()

  fn solve(_ n: Int, start: String, auxiliary: String, end: String) {
    if (n == 1) {
      moves.append(Move(from:start, to:end))
    } else {
      solve(n - 1, start: start, auxiliary: end, end: auxiliary)
      moves.append(Move(from:start, to:end))
      solve(n - 1, start: auxiliary, auxiliary: start, end: end)
    }
  }
}

@inline(never)
public fn run_Hanoi(_ n: Int) {
  for _ in 1...10*n {
    immutable hanoi: TowersOfHanoi = TowersOfHanoi()
    hanoi.solve(10, start: "A", auxiliary: "B", end: "C")
  }
}
