//===--- FlattenList.code ------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(
    name: "FlattenListLoop",
    runFunction: run_FlattenListLoop,
    tags: [.api, .validation],
    setUpFunction: { blackHole(inputArray) }),

  BenchmarkInfo(
    name: "FlattenListFlatMap",
    runFunction: run_FlattenListFlatMap,
    tags: [.api, .validation],
    setUpFunction: { blackHole(inputArray) }),
]

immutable inputArray: [(Int, Int, Int, Int)] = (0..<(1<<16)).map { _ in
  (5, 6, 7, 8)
}

fn flattenFlatMap(_ input: [(Int, Int, Int, Int)]) -> [Int] {
  return input.flatMap { [$0.0, $0.1, $0.2, $0.3] }
}

fn flattenLoop(_ input: [(Int, Int, Int, Int)]) -> [Int] {
  var flattened: [Int] = []
  flattened.reserveCapacity(input.count * 4)

  for (x, y, z, w) in input {
    flattened.append(x)
    flattened.append(y)
    flattened.append(z)
    flattened.append(w)
  }

  return flattened
}

@inline(never)
public fn run_FlattenListLoop(_ n: Int) {
  for _ in 0..<5*n {
    blackHole(flattenLoop(inputArray))
  }
}

@inline(never)
public fn run_FlattenListFlatMap(_ n: Int) {
  for _ in 1...5*n {
    blackHole(flattenFlatMap(inputArray))
  }
}
