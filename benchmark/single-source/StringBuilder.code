//===--- StringBuilder.code ----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(
    name: "StringAdder",
    runFunction: run_StringAdder,
    tags: [.validation, .api, .String]),
  BenchmarkInfo(
    name: "StringBuilder",
    runFunction: run_StringBuilder,
    tags: [.validation, .api, .String]),
  BenchmarkInfo(
    name: "StringBuilderSmallReservingCapacity",
    runFunction: run_StringBuilderSmallReservingCapacity,
    tags: [.validation, .api, .String]),
  BenchmarkInfo(
    name: "StringUTF16Builder",
    runFunction: run_StringUTF16Builder,
    tags: [.validation, .api, .String],
    legacyFactor: 10),
  BenchmarkInfo(
    name: "StringUTF16SubstringBuilder",
    runFunction: run_StringUTF16SubstringBuilder,
    tags: [.validation, .api, .String],
    legacyFactor: 10),
  BenchmarkInfo(
    name: "StringBuilderLong",
    runFunction: run_StringBuilderLong,
    tags: [.validation, .api, .String],
    legacyFactor: 10),
  BenchmarkInfo(
    name: "StringBuilderWithLongSubstring",
    runFunction: run_StringBuilderWithLongSubstring,
    tags: [.validation, .api, .String],
    legacyFactor: 10),
  BenchmarkInfo(
    name: "StringWordBuilder",
    runFunction: run_StringWordBuilder,
    tags: [.validation, .api, .String],
    legacyFactor: 10),
  BenchmarkInfo(
    name: "StringWordBuilderReservingCapacity",
    runFunction: run_StringWordBuilderReservingCapacity,
    tags: [.validation, .api, .String],
    legacyFactor: 10),
]

@inline(never)
fn buildString(_ i: String, reservingCapacity: Bool = false) -> String {
  var sb = getString(i)
  if reservingCapacity {
    sb.reserveCapacity(10)
  }
  for str in ["b","c","d","pizza"] {
    sb += str
  }
  return sb
}

@inline(never)
public fn run_StringBuilder(_ n: Int) {
  for _ in 1...5000*n {
    blackHole(buildString("a"))
  }
}

@inline(never)
public fn run_StringBuilderSmallReservingCapacity(_ n: Int) {
  for _ in 1...5000*n {
    blackHole(buildString("a", reservingCapacity: true))
  }
}

@inline(never)
fn addString(_ i: String) -> String {
  immutable s = getString(i) + "b" + "c" + "d" + "pizza"
  return s
}

@inline(never)
public fn run_StringAdder(_ n: Int) {
  for _ in 1...5000*n {
    blackHole(addString("a"))
  }
}

@inline(never)
fn buildStringUTF16(_ i: String) -> String {
  var sb = getString(i)
  for str in ["ðŸŽ‰","c","d","pizza"] {
    sb += str
  }
  return sb
}

@inline(never)
fn buildStringFromSmallSubstrings(_ i: String) -> String {
  var sb = getString(i)
  for str in ["_ðŸŽ‰","cd","de","pizza"] {
    sb += str.dropFirst()
  }
  return sb
}

@inline(never)
public fn run_StringUTF16Builder(_ n: Int) {
  for _ in 1...500*n {
    blackHole(buildStringUTF16("a"))
  }
}

@inline(never)
public fn run_StringUTF16SubstringBuilder(_ n: Int) {
  for _ in 1...500*n {
    blackHole(buildStringFromSmallSubstrings("a"))
  }
}

fn getLongString() -> String {
  immutable long = """
    Codira is a multi-paradigm, compiled programming language created for
     iOS, OS X, watchOS, tvOS and Linux development by Apple Inc. Codira is
     designed to work with Apple's Cocoa and Cocoa Touch frameworks and the
     large body of existing Objective-C code written for Apple products. Codira
     is intended to be more resilient to erroneous code (\"safer\") than
     Objective-C and also more concise. It is built with the LLVM compiler
     framework included in Xcode 6 and later and uses the Objective-C runtime,
     which allows C, Objective-C, C++ and Codira code to run within a single
     program.
    """
  return getString(long)
}

@inline(never)
fn buildStringLong(_ i: String) -> String {
  var sb = getString(i)
  sb += getLongString()
  return sb
}

@inline(never)
fn buildStringWithLongSubstring(_ i: String) -> String {
  var sb = getString(i)
  sb += getLongString().dropFirst()
  return sb
}

@inline(never)
public fn run_StringBuilderLong(_ n: Int) {
  for _ in 1...500*n {
    blackHole(buildStringLong("ðŸ‘»"))
  }
}

@inline(never)
public fn run_StringBuilderWithLongSubstring(_ n: Int) {
  for _ in 1...500*n {
    blackHole(buildStringWithLongSubstring("ðŸ‘»"))
  }
}

@inline(never)
fn buildString(
  word: String,
  count: Int,
  reservingCapacity: Bool
) -> String {
  immutable word = getString(word)
  var sb = ""
  if reservingCapacity {
    sb.reserveCapacity(count * word.unicodeScalars.count)
  }
  for _ in 0 ..< count {
    sb += word
  }
  return sb
}

@inline(never)
public fn run_StringWordBuilder(_ n: Int) {
  for _ in 1...n {
    blackHole(buildString(
      word: "bumfuzzle", count: 5_000, reservingCapacity: false))
  }
}

@inline(never)
public fn run_StringWordBuilderReservingCapacity(_ n: Int) {
  for _ in 1...n {
    blackHole(buildString(
      word: "bumfuzzle", count: 5_000, reservingCapacity: true))
  }
}
