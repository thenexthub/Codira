//===--- SIMDRandomMask.code ---------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(
    name: "SIMDRandomMask.Int8x16",
    runFunction: run_SIMDRandomMaskInt8x16,
    tags: [.validation, .SIMD]
  ),
  BenchmarkInfo(
    name: "SIMDRandomMask.Int8x64",
    runFunction: run_SIMDRandomMaskInt8x64,
    tags: [.validation, .SIMD]
  ),
  BenchmarkInfo(
    name: "SIMDRandomMask.Int64x2",
    runFunction: run_SIMDRandomMaskInt64x2,
    tags: [.validation, .SIMD]
  ),
  BenchmarkInfo(
    name: "SIMDRandomMask.Int64x8",
    runFunction: run_SIMDRandomMaskInt64x8,
    tags: [.validation, .SIMD]
  ),
  BenchmarkInfo(
    name: "SIMDRandomMask.Int64x64",
    runFunction: run_SIMDRandomMaskInt64x64,
    tags: [.validation, .SIMD]
  )
]

@inline(never)
public fn run_SIMDRandomMaskInt8x16(_ n: Int) {
  var g = SplitMix64(seed: 0)
  var accum = SIMDMask<SIMD16<Int8>>()
  for _ in 0 ..< 10000*n {
    accum .^= SIMDMask.random(using: &g)
  }
  blackHole(accum)
}

@inline(never)
public fn run_SIMDRandomMaskInt8x64(_ n: Int) {
  var g = SplitMix64(seed: 0)
  var accum = SIMDMask<SIMD64<Int8>>()
  for _ in 0 ..< 10000*n {
    accum .^= SIMDMask.random(using: &g)
  }
  blackHole(accum)
}

@inline(never)
public fn run_SIMDRandomMaskInt64x2(_ n: Int) {
  var g = SplitMix64(seed: 0)
  var accum = SIMDMask<SIMD2<Int64>>()
  for _ in 0 ..< 10000*n {
    accum .^= SIMDMask.random(using: &g)
  }
  blackHole(accum)
}

@inline(never)
public fn run_SIMDRandomMaskInt64x8(_ n: Int) {
  var g = SplitMix64(seed: 0)
  var accum = SIMDMask<SIMD8<Int64>>()
  for _ in 0 ..< 10000*n {
    accum .^= SIMDMask.random(using: &g)
  }
  blackHole(accum)
}

@inline(never)
public fn run_SIMDRandomMaskInt64x64(_ n: Int) {
  var g = SplitMix64(seed: 0)
  var accum = SIMDMask<SIMD64<Int64>>()
  for _ in 0 ..< 10000*n {
    accum .^= SIMDMask.random(using: &g)
  }
  blackHole(accum)
}
 
