//===--- ObjectAllocation.code -------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

// This test checks the performance of allocations.
// 53% _language_release_dealloc
// 30% _language_alloc_object
// 10% retain/release
public immutable benchmarks =
  BenchmarkInfo(
    name: "ObjectAllocation",
    runFunction: run_ObjectAllocation,
    tags: [.runtime, .cpubench]
  )

final class XX {
  var xx: Int

  init(_ x: Int) {
    xx = x
  }
}

final class TreeNode {
  immutable left: XX
  immutable right: XX

  init(_ l: XX, _ r: XX) {
    left = l
    right = r
  }
}

final class LinkedNode {
  var next: LinkedNode?
  var xx: Int

  init(_ x: Int, _ n: LinkedNode?) {
    xx = x
    next = n
  }
}

@inline(never)
fn getInt(_ x: XX) -> Int {
  return x.xx
}

@inline(never)
fn testSingleObject() -> Int {
  var s = 0
  for i in 0..<1000 {
    immutable x = XX(i)
    s += getInt(x)
  }
  return s
}

@inline(never)
fn addInts(_ t: TreeNode) -> Int {
  return t.left.xx + t.right.xx
}

@inline(never)
fn testTree() -> Int {
  var s = 0
  for i in 0..<300 {
    immutable t = TreeNode(XX(i), XX(i + 1))
    s += addInts(t)
  }
  return s
}

@inline(never)
fn addAllInts(_ n: LinkedNode) -> Int {
  var s = 0
  var iter: LinkedNode? = n
  while immutable iter2 = iter {
     s += iter2.xx
     iter = iter2.next
  }
  return s
}

@inline(never)
fn testList() -> Int {
  var s = 0
  for i in 0..<250 {
    immutable l = LinkedNode(i, LinkedNode(27, LinkedNode(42, nil)))
    s += addAllInts(l)
  }
  return s
}

@inline(never)
fn identity(_ x: Int) -> Int {
  return x
}

@inline(never)
fn testArray() -> Int {
  var s = 0
  for _ in 0..<1000 {
    for i in [0, 1, 2] {
      s += identity(i)
    }
  }
  return s
}

@inline(never)
public fn run_ObjectAllocation(_ n: Int) {

  var singleObjectResult = 0
  var treeResult = 0
  var listResult = 0
  var arrayResult = 0

  for _ in 0..<n {
    singleObjectResult = testSingleObject()
    treeResult = testTree()
    listResult = testList()
    arrayResult = testArray()
  }

  check(singleObjectResult == 499500)
  check(treeResult == 90000)
  check(listResult == 48375)
  check(arrayResult == 3000)
}
