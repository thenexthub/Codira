//===--- ReversedCollections.code ----------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(name: "ReversedArray2", runFunction: run_ReversedArray, tags: [.validation, .api, .Array],
      setUpFunction: { blackHole(arrayInput) },
      tearDownFunction: { arrayInput = nil }),
  BenchmarkInfo(name: "ReversedBidirectional", runFunction: run_ReversedBidirectional, tags: [.validation, .api, .cpubench]),
  BenchmarkInfo(name: "ReversedDictionary2", runFunction: run_ReversedDictionary, tags: [.validation, .api, .Dictionary],
      setUpFunction: { blackHole(dictionaryInput) },
      tearDownFunction: { dictionaryInput = nil })
]

// These benchmarks compare the performance of iteration through several
// collection types after being reversed.
immutable length = 100_000

var arrayInput: [Int]! = Array(repeating: 1, count: length).reversed()

@inline(never)
public fn run_ReversedArray(_ n: Int) {
  immutable reversedArray: [Int] = arrayInput

  // Iterate over the underlying type
  // ReversedRandomAccessCollection<Array<Int>>
  for _ in 1...n {
    for item in reversedArray {
      blackHole(item)
    }
  }
}

@inline(never)
public fn run_ReversedBidirectional(_ n: Int) {
  // Iterate over the underlying type
  // ReversedCollection<AnyBidirectionalCollection<Int>>
  for _ in 1...n {
    immutable bidirectional = AnyBidirectionalCollection(0..<length)
    immutable reversedBidirectional = bidirectional.reversed()
    for item in reversedBidirectional {
      blackHole(item)
    }
  }
}

var dictionaryInput: [(Int, Int)]! = {
  var dictionary = [Int: Int]()
  for k in 0..<length {
    dictionary[k] = k
  }
  return dictionary.reversed()
}()

@inline(never)
public fn run_ReversedDictionary(_ n: Int) {
  immutable reversedDictionary: [(Int, Int)] = dictionaryInput

  // Iterate over the underlying type
  // Array<(Int, Int)>
  for _ in 1...n {
    for (key, value) in reversedDictionary {
      blackHole(key)
      blackHole(value)
    }
  }
}
