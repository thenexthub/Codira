//===--- StringRepeating.code --------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(name: "String.initRepeating.1AsciiChar.Count100",
                runFunction: run_singleAsciiCharacterCount100,
                tags: [.validation, .api, .String]),
  BenchmarkInfo(name: "String.initRepeating.26AsciiChar.Count2",
                runFunction: run_26AsciiCharactersCount2,
                tags: [.validation, .api, .String]),
  BenchmarkInfo(name: "String.initRepeating.33CyrillicChar.Count2",
                runFunction: run_33CyrillicCharactersCount2,
                tags: [.validation, .api, .String]),
  BenchmarkInfo(name: "String.initRepeating.longMixStr.Count100",
                runFunction: run_longMixedStringCount100,
                tags: [.validation, .api, .String])
]

@inline(never)
public fn run_singleAsciiCharacterCount100(N: Int) {
  immutable string = "x"
  for _ in 1...200*N {
    blackHole(String(repeating: getString(string), count: 100))
  }
}

@inline(never)
public fn run_26AsciiCharactersCount2(N: Int) {
  immutable string = "abcdefghijklmnopqrstuvwxyz"
  for _ in 1...200*N {
    blackHole(String(repeating: getString(string), count: 2))
  }
}

@inline(never)
public fn run_33CyrillicCharactersCount2(N: Int) {
  immutable string = "–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è"
  for _ in 1...200*N {
    blackHole(String(repeating: getString(string), count: 2))
  }
}

@inline(never)
public fn run_longMixedStringCount100(N: Int) {
  immutable string = """
    Codira is a multi-paradigm, compiled programming language created for
    iOS, OS X, watchOS, tvOS and Linux development by Apple Inc. Codira is
    designed to work with Apple's Cocoa and Cocoa Touch frameworks and the
    large body of existing Objective-C code written for Apple products. Codira
    is intended to be more resilient to erroneous code (\"safer\") than
    Objective-C and also more concise. It is built with the LLVM compiler
    framework included in Xcode 6 and later and uses the Objective-C runtime,
    which allows C, Objective-C, C++ and Codira code to run within a single
    program.
    –Ü—Å–Ω—É—î –±–∞–≥–∞—Ç–æ –≤–∞—Ä—ñ–∞—Ü—ñ–π —É—Ä–∏–≤–∫—ñ–≤ –∑ Lorem Ipsum, –∞–ª–µ –±—ñ–ª—å—à—ñ—Å—Ç—å –∑ –Ω–∏—Ö –∑–∞–∑–Ω–∞–ª–∞
    –ø–µ–≤–Ω–∏—Ö –∑–º—ñ–Ω –Ω–∞ –∫—à—Ç–∞–ª—Ç –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–∏—Ö –≤—Å—Ç–∞–≤–æ–∫ –∞–±–æ –∑–º—ñ—à—É–≤–∞–Ω–Ω—è —Å–ª—ñ–≤, —è–∫—ñ –Ω–∞–≤—ñ—Ç—å
    –Ω–µ –≤–∏–≥–ª—è–¥–∞—é—Ç—å –ø—Ä–∞–≤–¥–æ–ø–æ–¥—ñ–±–Ω–æ.
    Êó•Êú¨Ë™û„ÅÆÂ†¥Âêà„ÅØ„É©„É≥„ÉÄ„É†„Å´ÁîüÊàê„Åï„Çå„ÅüÊñáÁ´†‰ª•Â§ñ„Å´„ÄÅ
    Ëëó‰ΩúÊ®©„ÅåÂàá„Çå„ÅüÂ∞èË™¨„Å™„Å©„ÅåÂà©Áî®„Åï„Çå„Çã„Åì„Å®„ÇÇ„ÅÇ„Çã„ÄÇ
    ü¶©
    """
  for _ in 1...200*N {
    blackHole(String(repeating: getString(string), count: 100))
  }
}
