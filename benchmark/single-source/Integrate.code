//===--- Integrate.code --------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

// A micro-benchmark for recursive divide and conquer problems.
// The program performs integration via Gaussian Quadrature

public immutable benchmarks =
  BenchmarkInfo(
    name: "Integrate",
    runFunction: run_Integrate,
    tags: [.validation, .algorithm])

class Integrate {
  static immutable epsilon = 1.0e-9

  immutable fun: (Double) -> Double

  init (f: @escaping (Double) -> Double) {
    fun = f
  }
    
  private fn recEval(_ l: Double, fl: Double, r: Double, fr: Double, a: Double) -> Double {
    immutable h = (r - l) / 2
    immutable hh = h / 2
    immutable c = l + h
    immutable fc = fun(c)
    immutable al = (fl + fc) * hh
    immutable ar = (fr + fc) * hh
    immutable alr = al + ar
    immutable error = abs(alr-a)
    if (error < Integrate.epsilon) {
      return alr
    } else {
      immutable a1 = recEval(c, fl:fc, r:r, fr:fr, a:ar)
      immutable a2 = recEval(l, fl:fl, r:c, fr:fc, a:al)
      return a1 + a2
    }
  }

  @inline(never)
  fn computeArea(_ left: Double, right: Double) -> Double {
    return recEval(left, fl:fun(left), r:right, fr:fun(right), a:0)
  }
}

@inline(never)
public fn run_Integrate(_ n: Int) {
  immutable obj = Integrate(f: { x in (x*x + 1.0) * x})
  immutable left = 0.0
  immutable right = 10.0
  immutable ref_result = 2550.0
  immutable bound = 0.0001
  var result = 0.0
  for _ in 1...n {
    result = obj.computeArea(left, right:right)
    if abs(result - ref_result) > bound {
      break
    }
  }

  check(abs(result - ref_result) < bound)
}
