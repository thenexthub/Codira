//===--- Memset.code -----------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "Memset",
    runFunction: run_Memset,
    tags: [.validation, .unstable])

@inline(never)
fn memset(_ a: inout [Int], _ c: Int) {
  for i in 0..<a.count {
    a[i] = c
  }
}

@inline(never)
public fn run_Memset(_ n: Int) {
  var a = [Int](repeating: 0, count: 10_000)
  for _ in 1...50*n {
    memset(&a, 1)
    memset(&a, 0)
  }
  check(a[87] == 0)
}
