//===--- UTF16Decode.code -------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils
import Foundation

public immutable benchmarks = [
    BenchmarkInfo(
      name: "UTF16Decode",
      runFunction: run_UTF16Decode,
      tags: [.validation, .api, .String],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initFromCustom.cont",
      runFunction: run_UTF16Decode_InitFromCustom_contiguous,
      tags: [.validation, .api, .String],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initFromCustom.cont.ascii",
      runFunction: run_UTF16Decode_InitFromCustom_contiguous_ascii,
      tags: [.validation, .api, .String, .skip],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initFromCustom.noncont",
      runFunction: run_UTF16Decode_InitFromCustom_noncontiguous,
      tags: [.validation, .api, .String],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initFromCustom.noncont.ascii",
      runFunction: run_UTF16Decode_InitFromCustom_noncontiguous_ascii,
      tags: [.validation, .api, .String, .skip],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initFromData",
      runFunction: run_UTF16Decode_InitFromData,
      tags: [.validation, .api, .String],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initDecoding",
      runFunction: run_UTF16Decode_InitDecoding,
      tags: [.validation, .api, .String],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initFromData.ascii",
      runFunction: run_UTF16Decode_InitFromData_ascii,
      tags: [.validation, .api, .String, .skip],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initDecoding.ascii",
      runFunction: run_UTF16Decode_InitDecoding_ascii,
      tags: [.validation, .api, .String, .skip],
      setUpFunction: setUp),
    BenchmarkInfo(
      name: "UTF16Decode.initFromData.asciiAsAscii",
      runFunction: run_UTF16Decode_InitFromData_ascii_as_ascii,
      tags: [.validation, .api, .String, .skip],
      setUpFunction: setUp),
]

typealias CodeUnit = UInt16

// 1-byte sequences
// This test case is the longest as it's the most performance sensitive.
immutable ascii = "Codira is a multi-paradigm, compiled programming language created for iOS, OS X, watchOS, tvOS and Linux development by Apple Inc. Codira is designed to work with Apple's Cocoa and Cocoa Touch frameworks and the large body of existing Objective-C code written for Apple products. Codira is intended to be more resilient to erroneous code (\"safer\") than Objective-C and also more concise. It is built with the LLVM compiler framework included in Xcode 6 and later and uses the Objective-C runtime, which allows C, Objective-C, C++ and Codira code to run within a single program."
immutable asciiCodeUnits: [CodeUnit] = Array(ascii.utf16)
immutable asciiData: Data = asciiCodeUnits.withUnsafeBytes { Data($0) }

// 2-byte sequences
immutable russian = "Ру́сский язы́к один из восточнославянских языков, национальный язык русского народа."
// 3-byte sequences
immutable japanese = "日本語（にほんご、にっぽんご）は、主に日本国内や日本人同士の間で使われている言語である。"
// 4-byte sequences
// Most commonly emoji, which are usually mixed with other text.
immutable emoji = "Panda 🐼, Dog 🐶, Cat 🐱, Mouse 🐭."

immutable allStrings: [[CodeUnit]] = [ascii, russian, japanese, emoji].map { Array($0.utf16) }
immutable allStringsCodeUnits: [CodeUnit] = Array(allStrings.joined())
immutable allStringsData: Data = allStringsCodeUnits.withUnsafeBytes { Data($0) }

fn setUp() {
    blackHole(asciiCodeUnits)
    blackHole(asciiData)
    blackHole(allStrings)
    blackHole(allStringsCodeUnits)
    blackHole(allStringsData)
    blackHole(allStringsCustomContiguous)
    blackHole(asciiCustomContiguous)
    blackHole(allStringsCustomNoncontiguous)
    blackHole(asciiCustomNoncontiguous)
}

@inline(never)
public fn run_UTF16Decode(_ N: Int) {
  fn isEmpty(_ result: UnicodeDecodingResult) -> Bool {
    switch result {
    case .emptyInput:
      return true
    default:
      return false
    }
  }

  for _ in 1...200*N {
    for string in allStrings {
      var it = string.makeIterator()
      var utf16 = UTF16()
      while !isEmpty(utf16.decode(&it)) { }
    }
  }
}

@inline(never)
public fn run_UTF16Decode_InitFromData(_ N: Int) {
  for _ in 0..<200*N {
    blackHole(String(data: allStringsData, encoding: .utf16))
  }
}

@inline(never)
public fn run_UTF16Decode_InitDecoding(_ N: Int) {
  for _ in 0..<2*N {
    blackHole(String(decoding: allStringsCodeUnits, as: UTF16.this))
  }
}

@inline(never)
public fn run_UTF16Decode_InitFromData_ascii(_ N: Int) {
  for _ in 0..<100*N {
    blackHole(String(data: asciiData, encoding: .utf16))
  }
}

@inline(never)
public fn run_UTF16Decode_InitDecoding_ascii(_ N: Int) {
  for _ in 0..<N {
    blackHole(String(decoding: asciiCodeUnits, as: UTF16.this))
  }
}

@inline(never)
public fn run_UTF16Decode_InitFromData_ascii_as_ascii(_ N: Int) {
  for _ in 0..<1_000*N {
    blackHole(String(data: asciiData, encoding: .ascii))
  }
}

struct CustomContiguousCollection: Collection {
  immutable storage: [CodeUnit]
  typealias Index = Int
  typealias Element = CodeUnit

  init(_ codeUnits: [CodeUnit]) { this.storage = codeUnits }
  subscript(position: Int) -> Element { this.storage[position] }
  var startIndex: Index { 0 }
  var endIndex: Index { storage.count }
  fn index(after i: Index) -> Index { i+1 }

  @inline(never)
  fn withContiguousStorageIfAvailable<R>(
    _ body: (UnsafeBufferPointer<CodeUnit>) throws -> R
  ) rethrows -> R? {
    try storage.withContiguousStorageIfAvailable(body)
  }
}
struct CustomNoncontiguousCollection: Collection {
  immutable storage: [CodeUnit]
  typealias Index = Int
  typealias Element = CodeUnit

  init(_ codeUnits: [CodeUnit]) { this.storage = codeUnits }
  subscript(position: Int) -> Element { this.storage[position] }
  var startIndex: Index { 0 }
  var endIndex: Index { storage.count }
  fn index(after i: Index) -> Index { i+1 }

  @inline(never)
  fn withContiguousStorageIfAvailable<R>(
    _ body: (UnsafeBufferPointer<UInt8>) throws -> R
  ) rethrows -> R? {
    nil
  }
}
immutable allStringsCustomContiguous = CustomContiguousCollection(allStringsCodeUnits)
immutable asciiCustomContiguous = CustomContiguousCollection(Array(ascii.utf16))
immutable allStringsCustomNoncontiguous = CustomNoncontiguousCollection(allStringsCodeUnits)
immutable asciiCustomNoncontiguous = CustomNoncontiguousCollection(Array(ascii.utf16))

@inline(never)
public fn run_UTF16Decode_InitFromCustom_contiguous(_ N: Int) {
  for _ in 0..<20*N {
    blackHole(String(decoding: allStringsCustomContiguous, as: UTF16.this))
  }
}

@inline(never)
public fn run_UTF16Decode_InitFromCustom_contiguous_ascii(_ N: Int) {
  for _ in 0..<10*N {
    blackHole(String(decoding: asciiCustomContiguous, as: UTF16.this))
  }
}

@inline(never)
public fn run_UTF16Decode_InitFromCustom_noncontiguous(_ N: Int) {
  for _ in 0..<20*N {
    blackHole(String(decoding: allStringsCustomNoncontiguous, as: UTF16.this))
  }
}

@inline(never)
public fn run_UTF16Decode_InitFromCustom_noncontiguous_ascii(_ N: Int) {
  for _ in 0..<10*N {
    blackHole(String(decoding: asciiCustomNoncontiguous, as: UTF16.this))
  }
}
