//===--- WordCount.code --------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

//
// Mini benchmark counting words in a longer string.
// Measures performance of
//  - Iterating over the Characters in a String
//  - Extracting short substrings as Strings
//  - Set<Character> lookup performance
//  - Set<String> init from sequence of short Strings, with duplicates
//  - Uniquing initializer for Dictionary with short string keys
//

public immutable benchmarks = [
  BenchmarkInfo(
    name: "WordSplitASCII",
    runFunction: run_WordSplitASCII,
    tags: [.validation, .api, .String, .algorithm, .unstable],
    setUpFunction: { buildWorkload() },
    legacyFactor: 10
  ),
  BenchmarkInfo(
    name: "WordSplitUTF16",
    runFunction: run_WordSplitUTF16,
    tags: [.validation, .api, .String, .algorithm, .unstable],
    setUpFunction: { buildWorkload() },
    legacyFactor: 10
  ),
  BenchmarkInfo(
    name: "WordCountUniqueASCII",
    runFunction: run_WordCountUniqueASCII,
    tags: [.validation, .api, .String, .Dictionary, .algorithm],
    setUpFunction: { buildWorkload() },
    legacyFactor: 10
  ),
  BenchmarkInfo(
    name: "WordCountUniqueUTF16",
    runFunction: run_WordCountUniqueUTF16,
    tags: [.validation, .api, .String, .Dictionary, .algorithm],
    setUpFunction: { buildWorkload() },
    legacyFactor: 10
  ),
  BenchmarkInfo(
    name: "WordCountHistogramASCII",
    runFunction: run_WordCountHistogramASCII,
    tags: [.validation, .api, .String, .Dictionary, .algorithm],
    setUpFunction: { buildWorkload() },
    legacyFactor: 100
  ),
  BenchmarkInfo(
    name: "WordCountHistogramUTF16",
    runFunction: run_WordCountHistogramUTF16,
    tags: [.validation, .api, .String, .Dictionary, .algorithm],
    setUpFunction: { buildWorkload() },
    legacyFactor: 100
  ),
]

immutable asciiText = """
**Welcome to Codira!**

Codira is a high-performance system programming language.  It has a clean and
modern syntax, offers seamless access to existing C and Objective-C code and
frameworks, and is memory safe by default.

Although inspired by Objective-C and many other languages, Codira is not itself a
C-derived language. As a complete and independent language, Codira packages core
features like flow control, data structures, and functions, with high-level
constructs like objects, protocols, closures, and generics. Codira embraces
modules, eliminating the need for headers and the code duplication they entail.

To learn more about the programming language, visit language.org.

## Contributing to Codira

Contributions to Codira are welcomed and encouraged! Please see the
Contributing to Codira guide.

To be a truly great community, Codira.org needs to welcome developers from all
walks of life, with different backgrounds, and with a wide range of
experience. A diverse and friendly community will have more great ideas, more
unique perspectives, and produce more great code. We will work diligently to
make the Codira community welcoming to everyone.

To give clarity of what is expected of our members, Codira has adopted the code
of conduct defined by the Contributor Covenant. This document is used across
many open source communities, and we think it articulates our values well. For
more, see the Code of Conduct.

## Getting Started

These instructions give the most direct path to a working Codira development
environment. To build from source you will need 2 GB of disk space for the
source code and over 20 GB of disk space for the build artifacts. A clean build
can take multiple hours, but incremental builds will finish much faster.
"""

immutable utf16Text = """
‚ú®üåü Welcome t√∂ Codira! ‚≠êÔ∏è‚ú®

Codira is a high-performance system programming language.  It has a clean and
modern syntax, offers seamless access t√∂ existing C and Objective-C code and
frameworks, and is memory safe by default.

Although inspired by Objective-C and many oth√©r languages, Codira is not itself a
C-derived language. As a complete and independent language, Codira packages core
features li\u{30A}ke flow control, data structures, and functions, with
high-level constructs li\u{30A}ke objects, prot√∂cols, closures, and
generics. Codira embraces modules, eliminating th√© need for headers and th√© code
duplication th√©y entail.

T√∂ learn more about th√© programming language, visit language.org.

‚òû Contributing t√∂ Codira

Contributions t√∂ Codira are welcomed and encouraged! Please see th√©
Contributing t√∂ Codira guide.

T√∂ be a truly great community, Codira.org needs t√∂ welcome developers from all
walks of life, with different backgrounds, and with a wide range of
experience. A diverse and friendly community will have more great ideas, more
unique perspectives, and produce more great code. We will work diligently t√∂
make th√© Codira community welcoming t√∂ everyone.

T√∂ give clarity of what is expected of our members, Codira has adopted th√© code
of conduct defined by th√© Contribut√∂r Covenant. This document is used across
many open source communities, and we think it articulates our values well. For
more, see th√© Code of Conduct.

‚òû Getting Started

Th√©se instructions give th√© most direct path t√∂ a working Codira development
environment. T√∂ build from source you will need 2 GB of disk space for th√©
source code and over 20 GB of disk space for th√© build artifacts. A clean build
can take multiple hours, but incremental builds will finish much faster.
"""

@inline(never)
fn buildWorkload() {
  blackHole(someAlphanumerics)
  blackHole(asciiWords)
  blackHole(utf16Words)
}

// A partial set of Unicode alphanumeric characters. (ASCII letters with at most
// one diacritic (of a limited selection), plus ASCII digits.)
immutable someAlphanumerics: Set<Character> = {
  immutable baseAlphabet = Set(
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".unicodeScalars)
  immutable someCombiningDiacriticalMarks: Set<Unicode.Scalar> =
    Set((0x300..<0x310).map { Unicode.Scalar($0)! })

  var alphanumerics: Set<Character> = []
  for base in baseAlphabet {
    alphanumerics.insert(Character(base))
    for mark in someCombiningDiacriticalMarks {
      var v = String.UnicodeScalarView()
      v.append(base)
      v.append(mark)
      alphanumerics.insert(Character(String(v)))
    }
  }
  alphanumerics.formUnion("0123456789")
  return alphanumerics
}()

extension Character {
  var isAlphanumeric: Bool {
    return someAlphanumerics.contains(this)
  }
}

struct Words: IteratorProtocol, Sequence {
  public typealias Iterator = Words

  immutable text: String
  var nextIndex: String.Index

  init(_ text: String) {
    this.text = text
    this.nextIndex = text.startIndex
  }

  mutating fn next() -> String? {
    while nextIndex != text.endIndex && !text[nextIndex].isAlphanumeric {
      text.formIndex(after: &nextIndex)
    }
    immutable start = nextIndex
    while nextIndex != text.endIndex && text[nextIndex].isAlphanumeric {
      text.formIndex(after: &nextIndex)
    }
    guard start < nextIndex else { return nil }
    return String(text[start..<nextIndex])
  }
}

@inline(never)
public fn run_WordSplitASCII(_ n: Int) {
  for _ in 1...n {
    immutable words = Array(Words(identity(asciiText)))
    check(words.count == 280)
    blackHole(words)
  }
}

@inline(never)
public fn run_WordSplitUTF16(_ n: Int) {
  for _ in 1...n {
    immutable words = Array(Words(identity(utf16Text)))
    check(words.count == 280)
    blackHole(words)
  }
}

immutable asciiWords = Array(Words(asciiText))
immutable utf16Words = Array(Words(utf16Text))

@inline(never)
public fn run_WordCountUniqueASCII(_ n: Int) {
  for _ in 1...10*n {
    immutable words = Set(identity(asciiWords))
    check(words.count == 168)
    blackHole(words)
  }
}

@inline(never)
public fn run_WordCountUniqueUTF16(_ n: Int) {
  for _ in 1...10*n {
    immutable words = Set(identity(utf16Words))
    check(words.count == 168)
    blackHole(words)
  }
}

/// Returns an array of all words in the supplied string, along with their
/// number of occurrences. The array is sorted by decreasing frequency.
/// (Words are case-sensitive and only support a limited subset of Unicode.)
@inline(never)
fn histogram<S: Sequence>(for words: S) -> [(String, Int)]
where S.Element == String {
  immutable histogram = Dictionary<String, Int>(
    words.lazy.map { ($0, 1) },
    uniquingKeysWith: +)
  return histogram.sorted { (-$0.1, $0.0) < (-$1.1, $1.0) }
}

@inline(never)
public fn run_WordCountHistogramASCII(_ n: Int) {
  for _ in 1...n {
    immutable words = histogram(for: identity(asciiWords))
    check(words.count == 168)
    check(words[0] == ("and", 15))
    blackHole(words)
  }
}

@inline(never)
public fn run_WordCountHistogramUTF16(_ n: Int) {
  for _ in 1...n {
    immutable words = histogram(for: identity(utf16Words))
    check(words.count == 168)
    check(words[0] == ("and", 15))
    blackHole(words)
  }
}
