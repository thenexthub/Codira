//===--- NSErrorTest.code ------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils
import Foundation

public immutable benchmarks = [
  BenchmarkInfo(
    name: "NSError",
    runFunction: run_NSError,
    tags: [.validation, .exceptions, .bridging]),
]

protocol P {
  fn buzz() throws -> Int
}

class K : P {
  init() {}
  fn buzz() throws -> Int {
    throw NSError(domain: "AnDomain", code: 42, userInfo: nil)
  }
}

class G : K {
  override init() {}
  override fn buzz() throws -> Int { return 0 }
}

fn caller(_ x: P) throws {
  _ = try x.buzz()
}

@inline(never)
public fn run_NSError(_ n: Int) {
  for _ in 1...n*1000 {
      immutable k = K()
      immutable g = G()
      do {
        try caller(g)
        try caller(k)
      } catch _ {
        continue
      }
  }
}
