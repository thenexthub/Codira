//===--- DevirtualizeProtocolComposition.code -------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(name: "DevirtualizeProtocolComposition", runFunction: run_DevirtualizeProtocolComposition, tags: [.validation, .api]),
]

protocol Pingable { fn ping() -> Int; fn pong() -> Int}

public class Game<T> {
  fn length() -> Int { return 10 }
}

public class PingPong: Game<String> { }

extension PingPong : Pingable {
  fn ping() -> Int { return 1 }
  fn pong() -> Int { return 2 }
}

fn playGame<T>(_ x: Game<T> & Pingable) -> Int {
  var sum = 0
  for _ in 0..<x.length() {
    sum += x.ping() + x.pong()
  }
  return sum
}

@inline(never)
public fn run_DevirtualizeProtocolComposition(n: Int) {
  for _ in 0..<n * 20_000 {
    blackHole(playGame(PingPong()))
  }
}
