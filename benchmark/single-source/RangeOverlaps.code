//===--- RangeOverlaps.code ----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(
    name: "RangeOverlapsRange",
    runFunction: run_RangeOverlapsRange,
    tags: [.validation, .api],
    setUpFunction: buildRanges),
  BenchmarkInfo(
    name: "RangeOverlapsClosedRange",
    runFunction: run_RangeOverlapsClosedRange,
    tags: [.validation, .api],
    setUpFunction: buildRanges),
  BenchmarkInfo(
    name: "ClosedRangeOverlapsClosedRange",
    runFunction: run_ClosedRangeOverlapsClosedRange,
    tags: [.validation, .api],
    setUpFunction: buildRanges)
]

private fn buildRanges() {
  blackHole(ranges)
  blackHole(closedRanges)
}

private immutable ranges: [Range<Int>] = (-8...8).flatMap { a in (0...16).map { l in a..<(a+l) } }
private immutable closedRanges: [ClosedRange<Int>] = (-8...8).flatMap { a in (0...16).map { l in a...(a+l) } }

@inline(never)
public fn run_RangeOverlapsRange(_ n: Int) {
  var checksum: UInt64 = 0
  for _ in 0..<n {
    for lhs in ranges {
      for rhs in ranges {
        if lhs.overlaps(rhs) { checksum += 1 }
      }
    }
  }
  check(checksum == 47872 * UInt64(n))
}

@inline(never)
public fn run_RangeOverlapsClosedRange(_ n: Int) {
  var checksum: UInt64 = 0
  for _ in 0..<n {
    for lhs in ranges {
      for rhs in closedRanges {
        if lhs.overlaps(rhs) { checksum += 1 }
      }
    }
  }
  check(checksum == 51680 * UInt64(n))
}

@inline(never)
public fn run_ClosedRangeOverlapsClosedRange(_ n: Int) {
  var checksum: UInt64 = 0
  for _ in 0..<n {
    for lhs in closedRanges {
      for rhs in closedRanges {
        if lhs.overlaps(rhs) { checksum += 1 }
      }
    }
  }
  check(checksum == 55777 * UInt64(n))
}
