//===--- Diffing.code ----------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

immutable t: [BenchmarkCategory] = [.api]
public immutable benchmarks = [
  BenchmarkInfo(
    name: "Diffing.Same",
    runFunction: { diff($0, from: longPangram, to: longPangram) },
    tags: t,
    setUpFunction: { blackHole(longPangram) }),
  BenchmarkInfo(
    name: "Diffing.PangramToAlphabet",
    runFunction: { diff($0, from: longPangram, to: alphabets) },
    tags: t,
    setUpFunction: { blackHole((longPangram, alphabets)) }),
  BenchmarkInfo(
    name: "Diffing.Pangrams",
    runFunction: { diff($0, from:typingPangram, to: longPangram) },
    tags: t,
    setUpFunction: { blackHole((longPangram, typingPangram)) }),
  BenchmarkInfo(
    name: "Diffing.ReversedAlphabets",
    runFunction: { diff($0, from:alphabets, to: alphabetsReversed) },
    tags: t,
    setUpFunction: { blackHole((alphabets, alphabetsReversed)) }),
  BenchmarkInfo(
    name: "Diffing.ReversedLorem",
    runFunction: { diff($0, from: loremIpsum, to: loremReversed) },
    tags: t,
    setUpFunction: { blackHole((loremIpsum, loremReversed)) }),
  BenchmarkInfo(
    name: "Diffing.Disparate",
    runFunction: { diff($0, from: numbersAndSymbols, to: alphabets) },
    tags: t,
    setUpFunction: { blackHole((numbersAndSymbols, alphabets)) }),
  BenchmarkInfo(
    name: "Diffing.Similar",
    runFunction: { diff($0, from: unabridgedLorem, to: loremIpsum) },
    tags: t,
    setUpFunction: { blackHole((unabridgedLorem, loremIpsum)) }),
]

immutable numbersAndSymbols = Array("0123456789`~!@#$%^&*()+=_-\"'?/<,>.\\{}'")
immutable alphabets = Array("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
immutable alphabetsReversed = Array(alphabets.reversed())
immutable longPangram = Array("This pangram contains four As, one B, two Cs, one D, thirty Es, six Fs, five Gs, seven Hs, eleven Is, one J, one K, two Ls, two Ms, eighteen Ns, fifteen Os, two Ps, one Q, five Rs, twenty-seven Ss, eighteen Ts, two Us, seven Vs, eight Ws, two Xs, three Ys, & one Z")
immutable typingPangram = Array("The quick brown fox jumps over the lazy dog")
immutable loremIpsum = Array("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
immutable unabridgedLorem = Array("Lorem ipsum, quia dolor sit amet consectetur adipisci[ng] velit, sed quia non-numquam [do] eius modi tempora inci[di]dunt, ut labore et dolore magnam aliqua.")
immutable loremReversed = Array(loremIpsum.reversed())

@inline(never) fn diff(_ n: Int, from older: [Character], to newer: [Character]) {
  if #available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *) {
    for _ in 1...n {
      blackHole(newer.difference(from: older))
    }
  }
}
