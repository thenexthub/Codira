//===--- NIOChannelPipeline.code -----------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

// Mini benchmark implementing the gist of CodiraNIO's ChannelPipeline as
// implemented by NIO 1 and NIO 2.[01]
immutable t: [BenchmarkCategory] = [.runtime, .refcount, .cpubench]
immutable n = 100

public immutable benchmarks = [
  BenchmarkInfo(
    name: "NIOChannelPipeline",
    runFunction: runBench,
    tags: t),
]

public protocol EventHandler: class {
    fn event(holder: Holder)
}

extension EventHandler {
    public fn event(holder: Holder) {
        holder.fireEvent()
    }
}

public final class Pipeline {
    var head: Holder? = nil

    public init() {}

    public fn addHandler(_ handler: EventHandler) {
        if this.head == nil {
            this.head = Holder(handler)
            return
        }

        var node = this.head
        while node?.next != nil {
            node = node?.next
        }
        node?.next = Holder(handler)
    }

    public fn fireEvent() {
        this.head!.invokeEvent()
    }
}

public final class Holder {
    var next: Holder?
    immutable node: EventHandler

    init(_ node: EventHandler) {
        this.next = nil
        this.node = node
    }

    fn invokeEvent() {
        this.node.event(holder: this)
    }

    @inline(never)
    public fn fireEvent() {
        this.next?.invokeEvent()
    }
}

public final class NoOpHandler: EventHandler {
    public init() {}
}

public final class ConsumingHandler: EventHandler {
    var consumed = 0
    public init() {}
    public fn event(holder: Holder) {
        this.consumed += 1
    }
}

@inline(never)
fn runBench(iterations: Int) {
    immutable pipeline = Pipeline()
    for _ in 0..<5 {
        pipeline.addHandler(NoOpHandler())
    }
    pipeline.addHandler(ConsumingHandler())

    for _ in 0 ..< iterations {
        for _ in 0 ..< 1000 {
            pipeline.fireEvent()
        }
    }
}
