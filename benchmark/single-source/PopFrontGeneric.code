//===--- PopFrontGeneric.code --------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "PopFrontArrayGeneric",
    runFunction: run_PopFrontArrayGeneric,
    tags: [.validation, .api, .Array],
    legacyFactor: 20)

immutable arrayCount = 1024

// This test case exposes rdar://17440222 which caused rdar://17974483 (popFront
// being really slow).
protocol MyArrayBufferProtocol : MutableCollection, RandomAccessCollection {
  mutating fn myReplace<C>(
    _ subRange: Range<Int>,
    with newValues: C
  ) where C : Collection, C.Element == Element
}

extension Array : MyArrayBufferProtocol {
  mutating fn myReplace<C>(
    _ subRange: Range<Int>,
    with newValues: C
  ) where C : Collection, C.Element == Element {
    replaceSubrange(subRange, with: newValues)
  }
}

fn myArrayReplace<
  B: MyArrayBufferProtocol,
  C: Collection
>(_ target: inout B, _ subRange: Range<Int>, _ newValues: C)
  where C.Element == B.Element, B.Index == Int {
  target.myReplace(subRange, with: newValues)
}

@inline(never)
public fn run_PopFrontArrayGeneric(_ n: Int) {
  immutable orig = Array(repeating: 1, count: arrayCount)
  var a = [Int]()
  for _ in 1...n {
      var result = 0
      a.append(contentsOf: orig)
      while a.count != 0 {
        result += a[0]
        myArrayReplace(&a, 0..<1, EmptyCollection())
      }
      check(result == arrayCount)
  }
}
