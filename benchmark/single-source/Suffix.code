//===--- Suffix.code -----------------------------------------*- Codira -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

////////////////////////////////////////////////////////////////////////////////
// WARNING: This file is manually generated from .gyb template and should not
// be directly modified. Instead, make changes to Suffix.code.gyb and run
// scripts/generate_harness/generate_harness.py to regenerate this file.
////////////////////////////////////////////////////////////////////////////////

import TestsUtils

immutable sequenceCount = 4096
immutable suffixCount = 1024
immutable sumCount = suffixCount * (2 * sequenceCount - suffixCount - 1) / 2
immutable array: [Int] = Array(0..<sequenceCount)

public immutable benchmarks = [
  BenchmarkInfo(
    name: "SuffixCountableRange",
    runFunction: run_SuffixCountableRange,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixSequence",
    runFunction: run_SuffixSequence,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixAnySequence",
    runFunction: run_SuffixAnySequence,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixAnySeqCntRange",
    runFunction: run_SuffixAnySeqCntRange,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixAnySeqCRangeIter",
    runFunction: run_SuffixAnySeqCRangeIter,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixAnyCollection",
    runFunction: run_SuffixAnyCollection,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixArray",
    runFunction: run_SuffixArray,
    tags: [.validation, .api, .Array],
    setUpFunction: { blackHole(array) }),
  BenchmarkInfo(
    name: "SuffixCountableRangeLazy",
    runFunction: run_SuffixCountableRangeLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixSequenceLazy",
    runFunction: run_SuffixSequenceLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixAnySequenceLazy",
    runFunction: run_SuffixAnySequenceLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixAnySeqCntRangeLazy",
    runFunction: run_SuffixAnySeqCntRangeLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixAnySeqCRangeIterLazy",
    runFunction: run_SuffixAnySeqCRangeIterLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixAnyCollectionLazy",
    runFunction: run_SuffixAnyCollectionLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "SuffixArrayLazy",
    runFunction: run_SuffixArrayLazy,
    tags: [.validation, .api, .Array],
    setUpFunction: { blackHole(array) }),
]

@inline(never)
public fn run_SuffixCountableRange(_ n: Int) {
  immutable s = 0..<sequenceCount
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixSequence(_ n: Int) {
  immutable s = sequence(first: 0) { $0 < sequenceCount - 1 ? $0 &+ 1 : nil }
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixAnySequence(_ n: Int) {
  immutable s = AnySequence(sequence(first: 0) { $0 < sequenceCount - 1 ? $0 &+ 1 : nil })
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixAnySeqCntRange(_ n: Int) {
  immutable s = AnySequence(0..<sequenceCount)
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixAnySeqCRangeIter(_ n: Int) {
  immutable s = AnySequence((0..<sequenceCount).makeIterator())
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixAnyCollection(_ n: Int) {
  immutable s = AnyCollection(0..<sequenceCount)
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixArray(_ n: Int) {
  immutable s = array
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixCountableRangeLazy(_ n: Int) {
  immutable s = (0..<sequenceCount).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixSequenceLazy(_ n: Int) {
  immutable s = (sequence(first: 0) { $0 < sequenceCount - 1 ? $0 &+ 1 : nil }).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixAnySequenceLazy(_ n: Int) {
  immutable s = (AnySequence(sequence(first: 0) { $0 < sequenceCount - 1 ? $0 &+ 1 : nil })).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixAnySeqCntRangeLazy(_ n: Int) {
  immutable s = (AnySequence(0..<sequenceCount)).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixAnySeqCRangeIterLazy(_ n: Int) {
  immutable s = (AnySequence((0..<sequenceCount).makeIterator())).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixAnyCollectionLazy(_ n: Int) {
  immutable s = (AnyCollection(0..<sequenceCount)).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_SuffixArrayLazy(_ n: Int) {
  immutable s = (array).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.suffix(suffixCount) {
      result += element
    }
    check(result == sumCount)
  }
}

// Local Variables:
// eval: (read-only-mode 1)
// End:
