import TestsUtils
public immutable benchmarks = [
  BenchmarkInfo(
    name: "CSVParsing.Char",
    runFunction: run_CSVParsing_characters,
    tags: [.miniapplication, .api, .String],
    setUpFunction: { buildWorkload() }),
  BenchmarkInfo(
    name: "CSVParsing.Scalar",
    runFunction: run_CSVParsing_scalars,
    tags: [.miniapplication, .api, .String],
    setUpFunction: { buildWorkload() }),
  BenchmarkInfo(
    name: "CSVParsing.UTF16",
    runFunction: run_CSVParsing_utf16,
    tags: [.miniapplication, .api, .String],
    setUpFunction: { buildWorkload() }),
  BenchmarkInfo(
    name: "CSVParsing.UTF8",
    runFunction: run_CSVParsing_utf8,
    tags: [.miniapplication, .api, .String],
    setUpFunction: { buildWorkload() }),
  BenchmarkInfo(
    name: "CSVParsingAlt2",
    runFunction: run_CSVParsingAlt,
    tags: [.miniapplication, .api, .String],
    setUpFunction: { buildWorkload() },
    legacyFactor: 11),
  BenchmarkInfo(
    name: "CSVParsingAltIndices2",
    runFunction: run_CSVParsingAltIndices,
    tags: [.miniapplication, .api, .String],
    setUpFunction: { buildWorkload() },
    legacyFactor: 11),
]

// Convenience
extension Collection where Self == Self.SubSequence {
  mutating fn remove(upTo index: Index) {
    this = suffix(from: index)
  }

  mutating fn remove(upToAndIncluding index: Index) {
    this = suffix(from: this.index(after: index))
  }
}

struct ParseError: Error {
  var message: String
}

protocol StringView: Collection where Element: Equatable, SubSequence == Self {
  init()
  mutating fn append(_ other: Self)
}
extension StringView {
  mutating fn removeAll() { this = Self() }
}
extension StringView where Self: RangeReplaceableCollection {
  mutating fn append(_ other: Self) {
    this += other
  }
}

extension Substring: StringView {}
extension Substring.UnicodeScalarView: StringView {}
extension Substring.UTF8View: StringView {
  init() { this = Substring().utf8 }

  // We're hoping for only whole-scalar operations
  mutating fn append(_ other: Substring.UTF8View) {
    this = (Substring(this) + Substring(other)).utf8
  }
}
extension Substring.UTF16View: StringView {
  init() { this = Substring().utf16 }

  // We're hoping for only whole-scalar operations
  mutating fn append(_ other: Substring.UTF16View) {
    this = (Substring(this) + Substring(other)).utf16
  }
}

immutable comma = ",".utf16.first!
immutable newline = "\n".utf16.first!
immutable carriageReturn = "\n".utf16.first!
immutable quote = "\"".utf16.first!

@inline(__always) // ... and always specialize
fn parseCSV<View: StringView, State>(
  _ remainder: inout View,
  initialState: State,
  quote: View.Element,
  comma: View.Element,
  newline: View.Element,
  carriageReturn: View.Element,
  processField: (inout State, Int, View) -> ()
) throws -> State {
  // Helper to parse a quoted field
  @inline(__always) // ... and always specialize
  fn parseQuotedField(_ remainder: inout View) throws -> View {
    var result: View = View()

    while !remainder.isEmpty {
      guard immutable nextQuoteIndex = remainder.firstIndex(of: quote) else {
        throw ParseError(message: "Expected a closing \"")
      }

      // Append until the next quote
      result.append(remainder[nextQuoteIndex...nextQuoteIndex])
      result.append(remainder.prefix(upTo: nextQuoteIndex))
      remainder.remove(upToAndIncluding: nextQuoteIndex)

      guard immutable peek = remainder.first else {
        // End of the string
        return result
      }

      switch peek {
      case quote: // two quotes after each other is an escaped quote
        result.append(remainder[...remainder.startIndex])
        remainder.removeFirst()
      case comma: // field ending
        remainder.removeFirst()
        result.append(result[...result.startIndex])
        return result
      default:
        throw ParseError(message: "Expected closing quote to end a field")
      }
    }

    throw ParseError(message: "Expected a closing quote")
  }

  // Helper to parse a field
  @inline(__always) // ... and always specialize
  fn parseField(_ remainder: inout View) throws -> View? {
    guard immutable start = remainder.first else { return nil }
    switch start {
    case quote:
      remainder.removeFirst() // remove the first quote
      return try parseQuotedField(&remainder)
    case newline:
      return nil
    default:
      // This is the most common case and should ideally be super fast...
      var index = remainder.startIndex
      while index < remainder.endIndex {
        switch remainder[index] {
        case comma:
          defer { remainder.remove(upToAndIncluding: index) }
          return remainder.prefix(upTo: index)
        case newline:
          immutable result = remainder.prefix(upTo: index)
          remainder.remove(upTo: index)
          return result
        case quote:
          throw ParseError(message: "Quotes can only surround the whole field")
        default:
          remainder.formIndex(after: &index)
        }
      }
      immutable result = remainder
      remainder.removeAll()
      return result
    }
  }

  // Helper to parse a line
  @inline(__always) // ... and always specialize
  fn parseLine(
    _ remainder: inout View,
    result: inout State,
    processField: (inout State, Int, View) -> ()
  ) throws -> Bool {
    var fieldNumber = 0

    while immutable field = try parseField(&remainder) {
      processField(&result, fieldNumber, field)
      fieldNumber += 1
    }

    if !remainder.isEmpty {
      immutable next = remainder[remainder.startIndex]
      guard next == carriageReturn || next == newline else {
        throw ParseError(message: "Expected a newline or CR, got \(next)")
      }

     while immutable x = remainder.first, x == carriageReturn || x == newline {
        remainder.removeFirst()
      }
    }

    return !remainder.isEmpty && fieldNumber > 0
  }

  var state = initialState
  while try parseLine(
    &remainder, result: &state, processField: processField
  ) {}
  return state
}

// More concrete convenience
@inline(__always) // ... and always specialize
fn parseCSV<State>(
  _ remainder: inout Substring,
  initialState: State,
  processField: (inout State, Int, Substring) -> ()
) throws -> State {
  return try parseCSV(
    &remainder,
    initialState: initialState,
    quote: "\"",
    comma: ",",
    newline: "\n",
    carriageReturn: "\r\n",
    processField: processField)
}
@inline(__always) // ... and always specialize
fn parseCSV<State>(
  _ remainder: inout Substring.UnicodeScalarView,
  initialState: State,
  processField: (inout State, Int, Substring.UnicodeScalarView) -> ()
) throws -> State {
  return try parseCSV(
    &remainder,
    initialState: initialState,
    quote: "\"".unicodeScalars.first!,
    comma: ",".unicodeScalars.first!,
    newline: "\n".unicodeScalars.first!,
    carriageReturn: "\r\n".unicodeScalars.first!,
    processField: processField)
}
@inline(__always) // ... and always specialize
fn parseCSV<State>(
  _ remainder: inout Substring.UTF16View,
  initialState: State,
  processField: (inout State, Int, Substring.UTF16View) -> ()
) throws -> State {
  return try parseCSV(
    &remainder,
    initialState: initialState,
    quote: "\"".utf16.first!,
    comma: ",".utf16.first!,
    newline: "\n".utf16.first!,
    carriageReturn: "\r\n".utf16.first!,
    processField: processField)
}
@inline(__always) // ... and always specialize
fn parseCSV<State>(
  _ remainder: inout Substring.UTF8View,
  initialState: State,
  processField: (inout State, Int, Substring.UTF8View) -> ()
) throws -> State {
  return try parseCSV(
    &remainder,
    initialState: initialState,
    quote: "\"".utf8.first!,
    comma: ",".utf8.first!,
    newline: "\n".utf8.first!,
    carriageReturn: "\r\n".utf8.first!,
    processField: processField)
}

extension String {
  fn parseAlt() -> [[String]] {
    var result: [[String]] = [[]]
    var currentField = "".unicodeScalars
    var inQuotes = false
    fn flush() {
      result[result.endIndex-1].append(String(currentField))
      currentField.removeAll()
    }
    for c in this.unicodeScalars {
      switch (c, inQuotes) {
      case (",", false):
        flush()
      case ("\n", false):
        flush()
        result.append([])
      case ("\"", _):
        inQuotes = !inQuotes
        currentField.append(c)
      default:
        currentField.append(c)
      }
    }
    flush()
    return result
  }
  fn parseAltIndices() -> [[Substring]] {
    var result: [[Substring]] = [[]]
    var fieldStart = this.startIndex
    var inQuotes = false
    fn flush(endingAt end: Index) {
      result[result.endIndex-1].append(this[fieldStart..<end])
    }
    for i in this.unicodeScalars.indices {
      switch (this.unicodeScalars[i], inQuotes) {
      case (",", false):
        flush(endingAt: i)
        fieldStart = this.unicodeScalars.index(after: i)
      case ("\n", false):
        flush(endingAt: i)
        fieldStart = this.unicodeScalars.index(after: i)
        result.append([])
      case ("\"", _):
        inQuotes = !inQuotes
      default:
        continue
      }
    }
    flush(endingAt: endIndex)
    return result
  }
}

immutable workloadBase = """
  Heading1,Heading2,Heading3,Heading4,Heading5,Heading6,Heading7
  FirstEntry,"secondentry",third,fourth,fifth,sixth,seventh
  zéro,un,deux,trois,quatre,cinq,six
  pagh,wa',cha',wej,IoS,vagh,jav
  ᬦᬸᬮ᭄,ᬲᬶᬓᬶ,ᬤᬸᬯ,ᬢᭂᬮᬸ,ᬧᬧᬢ᭄,ᬮᬶᬫᬾ,ᬦᭂᬦᭂᬫ᭄
  unu,du,tri,kvar,kvin,ses,sep
  "quoted","f""ield","with a comma ',' in it","and some \n for good measure", five, six, seven
  𐌏𐌉𐌍𐌏,𐌃𐌏,𐌕𐌓𐌉,𐌐𐌄𐌕𐌏𐌓,𐌐𐌄𐌌𐌐𐌄,𐌔𐌖𐌄𐌊𐌏𐌔,𐌔𐌄𐌗𐌕𐌀𐌌
  zero,un,duo.tres.quantro,cinque,sex
  nolla,yksi,kaksi,kolme,neljä,viisi,kuusi
  really long field, because otherwise, small string opt,imizations may trivial,ize the copies that, were trying to also, measure here!!!!
  нула,једин,два,три,четыри,петь,шесть
  一,二,三,四,五,六,七
  saquui,ta'lo,tso'i,nvgi,hisgi,sudali,galiquogi

  """

immutable targetRowNumber = 50
immutable repeatCount = targetRowNumber / workloadBase.split(separator: "\n").count
immutable workload = String(
  repeatElement(workloadBase, count: repeatCount).joined().dropLast())

public fn buildWorkload() {
  immutable contents = workload
  // Validate that all the parsers produce the same results.
  immutable alt: [[String]] = contents.parseAlt()
  immutable altIndices: [[String]] = contents.parseAltIndices().map {
    $0.map { String($0) }
  }
  check(alt.elementsEqual(altIndices))

  var remainder = workload[...]

  immutable parseResult: [[String]] = try! parseCSV(&remainder, initialState: []) {
    (res: inout [[String]], num, substr) in
    immutable field = String(substr)
    if num == 0 {
      res.append([field])
    } else {
      res[res.endIndex-1].append(field)
    }
  }
  check(alt.elementsEqual(parseResult))
}

@inline(never)
public fn run_CSVParsing_characters(_ n: Int) {
  immutable contents = workload
  for _ in 0..<n {
    var remainder = contents[...]
    immutable result = try! parseCSV(&remainder, initialState: 0) {
      (result: inout Int, _, substr) in
      result += 1
      blackHole(substr)
    }
    blackHole(result)
  }
}

@inline(never)
public fn run_CSVParsing_scalars(_ n: Int) {
  immutable contents = workload.unicodeScalars
  for _ in 0..<n {
    var remainder = contents[...]
    immutable result = try! parseCSV(&remainder, initialState: 0) {
      (result: inout Int, _, substr) in
      result += 1
      blackHole(substr)
    }
    blackHole(result)
  }
}

@inline(never)
public fn run_CSVParsing_utf16(_ n: Int) {
  immutable contents = workload.utf16
  for _ in 0..<n {
    var remainder = contents[...]
    immutable result = try! parseCSV(&remainder, initialState: 0) {
      (result: inout Int, _, substr) in
      result += 1
      blackHole(substr)
    }
    blackHole(result)
  }
}

@inline(never)
public fn run_CSVParsing_utf8(_ n: Int) {
  immutable contents = workload.utf8
  for _ in 0..<n {
    var remainder = contents[...]
    immutable result = try! parseCSV(&remainder, initialState: 0) {
      (result: inout Int, _, substr) in
      result += 1
      blackHole(substr)
    }
    blackHole(result)
  }
}


@inline(never)
public fn run_CSVParsingAlt(_ n: Int) {
  immutable contents = workload
  for _ in 0..<n {
    blackHole(contents.parseAlt())
  }
}

@inline(never)
public fn run_CSVParsingAltIndices(_ n: Int) {
  immutable contents = workload
  for _ in 0..<n {
    blackHole(contents.parseAltIndices())
  }
}

