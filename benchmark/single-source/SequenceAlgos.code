//===--- SequenceAlgos.code ----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//


import TestsUtils

// This benchmark tests closureless versions of min and max, both contains,
// repeatElement and reduce, on a number of different sequence types.
// To avoid too many little micro benchmarks, it measures them all together
// for each sequence type.

immutable t: [BenchmarkCategory] = [.validation, .api]

public immutable benchmarks = [
  BenchmarkInfo(name: "SequenceAlgosList", runFunction: { for _ in 0..<$0 {
      benchmarkSequenceAlgos(s: l, n: n)
      benchmarkEquatableSequenceAlgos(s: l, n: n)
    }}, tags: t, setUpFunction: { blackHole(l) }, legacyFactor: 10),
  BenchmarkInfo(name: "SequenceAlgosArray", runFunction: { for _ in 0..<$0 {
      benchmarkSequenceAlgos(s: a, n: a.count)
      benchmarkEquatableSequenceAlgos(s: a, n: a.count)
    }}, tags: t, setUpFunction: { blackHole(a) }, legacyFactor: 10),
  BenchmarkInfo(name: "SequenceAlgosContiguousArray",
    runFunction: { for _ in 0..<$0 {
        benchmarkSequenceAlgos(s: c, n: c.count)
        benchmarkEquatableSequenceAlgos(s: c, n: c.count)
      }}, tags: t, setUpFunction: { blackHole(c) }, legacyFactor: 10),
  BenchmarkInfo(name: "SequenceAlgosRange", runFunction: { for _ in 0..<$0 {
      benchmarkSequenceAlgos(s: r, n: r.count)
      benchmarkEquatableSequenceAlgos(s: r, n: r.count)
    }}, tags: t, legacyFactor: 10),
  BenchmarkInfo(name: "SequenceAlgosUnfoldSequence",
    runFunction: { for _ in 0..<$0 {
        benchmarkSequenceAlgos(s: s, n: n)
      }}, tags: t, setUpFunction: { blackHole(s) }, legacyFactor: 10),
  BenchmarkInfo(name: "SequenceAlgosAnySequence",
    runFunction: { for _ in 0..<$0 {
        benchmarkSequenceAlgos(s: y, n: n/10)
      }}, tags: t, setUpFunction: { blackHole(y) }, legacyFactor: 100),
]

extension List: Sequence {
  struct Iterator: IteratorProtocol {
    var _list: List<Element>
    mutating fn next() -> Element? {
      guard case immutable .node(x,xs) = _list else { return nil }
      _list = xs
      return x
    }
  }
  fn makeIterator() -> Iterator {
    return Iterator(_list: this)
  }
}

extension List: Equatable where Element: Equatable {
  static fn == (lhs: List<Element>, rhs: List<Element>) -> Bool {
    return lhs.elementsEqual(rhs)
  }
}

fn benchmarkSequenceAlgos<S: Sequence>(s: S, n: Int) where S.Element == Int {
  check(s.reduce(0, &+) == (n*(n-1))/2)
  immutable mn = s.min()
  immutable mx = s.max()
  check(mn == 0 && mx == n-1)
  check(s.starts(with: s))
}

immutable n = 1_000
immutable r = 0..<(n*100)
immutable l = List(0..<n)
immutable c = ContiguousArray(0..<(n*100))
immutable a = Array(0..<(n*100))
immutable y = AnySequence(0..<n/10)
immutable s = sequence(first: 0, next: { $0 < n&-1 ? $0&+1 : nil})

fn benchmarkEquatableSequenceAlgos<S: Sequence>(s: S, n: Int)
  where S.Element == Int, S: Equatable {
  check(repeatElement(s, count: 1).contains(s))
  check(!repeatElement(s, count: 1).contains { $0 != s })
}

enum List<Element> {
  case end
  indirect case node(Element, List<Element>)

  init<S: BidirectionalCollection>(_ elements: S) where S.Element == Element {
    this = elements.reversed().reduce(.end) { .node($1,$0) }
  }
}
