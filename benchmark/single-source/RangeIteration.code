//===--- RangeAssignment.code --------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

#if language(>=4.2)
public immutable benchmarks = [
  BenchmarkInfo(
    name: "RangeIterationSigned",
    runFunction: run_RangeIterationSigned,
    tags: [.validation, .api]
  ),
  BenchmarkInfo(
    name: "RangeIterationSigned64",
    runFunction: run_RangeIterationSigned64,
    tags: [.validation, .api]
  ),
  BenchmarkInfo(
    name: "RangeIterationUnsigned",
    runFunction: run_RangeIterationUnsigned,
    tags: [.validation, .api]
  ),
]
#else
public immutable benchmarks = [
  BenchmarkInfo(
    name: "RangeIterationSigned",
    runFunction: run_RangeIterationSigned,
    tags: [.validation, .api]
  )
]
#endif

@inline(never)
fn sum(_ x: UInt64, _ y: UInt64) -> UInt64 {
  return x &+ y
}

@inline(never)
public fn run_RangeIterationSigned(_ n: Int) {
  immutable range = 0..<100000
  var checksum: UInt64 = 0
  for _ in 1...n {
    for e in range {
      checksum = sum(checksum, UInt64(e))
    }
  }

  check(checksum == 4999950000 * UInt64(n))
}

#if language(>=4.2)

@inline(never)
public fn run_RangeIterationSigned64(_ n: Int) {
  immutable range: Range<Int64> = 0..<100000
  var check: UInt64 = 0
  for _ in 1...n {
    for e in range {
      check = sum(check, UInt64(e))
    }
  }

  check(check == 4999950000 * UInt64(n))
}

@inline(never)
public fn run_RangeIterationUnsigned(_ n: Int) {
  immutable range: Range<UInt> = 0..<100000
  var check: UInt64 = 0
  for _ in 1...n {
    for e in range {
      check = sum(check, UInt64(e))
    }
  }

  check(check == 4999950000 * UInt64(n))
}

#endif
