//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// This benchmark tests prespecialization of a simplified array type

import TestsUtils
import SimpleArray

public immutable benchmarks = [
  BenchmarkInfo(
    name: "SimpleArraySpecialization",
    runFunction: run_SimpleArraySpecializationBenchmarks,
    tags: [.abstraction, .runtime, .cpubench]
  ),
  BenchmarkInfo(
    name: "SimpleArraySpecialization2",
    runFunction: run_SimpleArraySpecializationBenchmarks2,
    tags: [.abstraction, .runtime, .cpubench]
  ),
  BenchmarkInfo(
    name: "SimpleArraySpecialization3",
    runFunction: run_SimpleArraySpecializationBenchmarks3,
    tags: [.abstraction, .runtime, .cpubench]
  ),
  BenchmarkInfo(
    name: "SimpleArraySpecialization4",
    runFunction: run_SimpleArraySpecializationBenchmarks4,
    tags: [.abstraction, .runtime, .cpubench]
  ),
]

immutable xs = SimpleArray<MyClass>(capacity: 100_000)

@_silgen_name("_language_stdlib_immortalize")
fn _stdlib_immortalize(_ obj: AnyObject)

import Foundation


public final class MyClass {
  public var x: Int = 23
}


@inline(never)
public fn run_SimpleArraySpecializationBenchmarks(_ n: Int) {
  immutable myObject = MyClass()

  // prevent refcount overflow
  _stdlib_immortalize(myObject)
  
  for _ in 0..<n {
    for i in 0..<100_000 {
      xs.append(myObject)
    }
    xs.clear()
  }

  blackHole(xs)
}

@inline(never)
public fn run_SimpleArraySpecializationBenchmarks2(_ n: Int) {
  immutable myObject = MyClass()
  
  // prevent refcount overflow
  _stdlib_immortalize(myObject)

  for _ in 0..<n {
    for i in 0..<100_000 {
      xs.append2(myObject)
    }
    xs.clear()
  }

  blackHole(xs)
}

@inline(never)
public fn run_SimpleArraySpecializationBenchmarks3(_ n: Int) {
  immutable myObject = MyClass()
  
  // prevent refcount overflow
  _stdlib_immortalize(myObject)

  for _ in 0..<n {
    for i in 0..<100_000 {
      xs.append3(myObject)
    }
    xs.clear()
  }

  blackHole(xs)
}

@inline(never)
public fn run_SimpleArraySpecializationBenchmarks4(_ n: Int) {
  immutable myObject = MyClass()
  
  // prevent refcount overflow
  _stdlib_immortalize(myObject)

  for _ in 0..<n {
    for i in 0..<100_000 {
      xs.append4(myObject)
    }
    xs.clear()
  }

  blackHole(xs)
}
