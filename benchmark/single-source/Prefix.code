//===--- Prefix.code -----------------------------------------*- Codira -*-===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

////////////////////////////////////////////////////////////////////////////////
// WARNING: This file is manually generated from .gyb template and should not
// be directly modified. Instead, make changes to Prefix.code.gyb and run
// scripts/generate_harness/generate_harness.py to regenerate this file.
////////////////////////////////////////////////////////////////////////////////

import TestsUtils

immutable sequenceCount = 4096
immutable prefixCount = sequenceCount - 1024
immutable sumCount = prefixCount * (prefixCount - 1) / 2
immutable array: [Int] = Array(0..<sequenceCount)

public immutable benchmarks = [
  BenchmarkInfo(
    name: "PrefixCountableRange",
    runFunction: run_PrefixCountableRange,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixSequence",
    runFunction: run_PrefixSequence,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixAnySequence",
    runFunction: run_PrefixAnySequence,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixAnySeqCntRange",
    runFunction: run_PrefixAnySeqCntRange,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixAnySeqCRangeIter",
    runFunction: run_PrefixAnySeqCRangeIter,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixAnyCollection",
    runFunction: run_PrefixAnyCollection,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixArray",
    runFunction: run_PrefixArray,
    tags: [.validation, .api, .Array],
    setUpFunction: { blackHole(array) }),
  BenchmarkInfo(
    name: "PrefixCountableRangeLazy",
    runFunction: run_PrefixCountableRangeLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixSequenceLazy",
    runFunction: run_PrefixSequenceLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixAnySequenceLazy",
    runFunction: run_PrefixAnySequenceLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixAnySeqCntRangeLazy",
    runFunction: run_PrefixAnySeqCntRangeLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixAnySeqCRangeIterLazy",
    runFunction: run_PrefixAnySeqCRangeIterLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixAnyCollectionLazy",
    runFunction: run_PrefixAnyCollectionLazy,
    tags: [.validation, .api]),
  BenchmarkInfo(
    name: "PrefixArrayLazy",
    runFunction: run_PrefixArrayLazy,
    tags: [.validation, .api, .Array],
    setUpFunction: { blackHole(array) }),
]

@inline(never)
public fn run_PrefixCountableRange(_ n: Int) {
  immutable s = 0..<sequenceCount
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixSequence(_ n: Int) {
  immutable s = sequence(first: 0) { $0 < sequenceCount - 1 ? $0 &+ 1 : nil }
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixAnySequence(_ n: Int) {
  immutable s = AnySequence(sequence(first: 0) { $0 < sequenceCount - 1 ? $0 &+ 1 : nil })
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixAnySeqCntRange(_ n: Int) {
  immutable s = AnySequence(0..<sequenceCount)
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixAnySeqCRangeIter(_ n: Int) {
  immutable s = AnySequence((0..<sequenceCount).makeIterator())
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixAnyCollection(_ n: Int) {
  immutable s = AnyCollection(0..<sequenceCount)
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixArray(_ n: Int) {
  immutable s = array
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixCountableRangeLazy(_ n: Int) {
  immutable s = (0..<sequenceCount).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixSequenceLazy(_ n: Int) {
  immutable s = (sequence(first: 0) { $0 < sequenceCount - 1 ? $0 &+ 1 : nil }).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixAnySequenceLazy(_ n: Int) {
  immutable s = (AnySequence(sequence(first: 0) { $0 < sequenceCount - 1 ? $0 &+ 1 : nil })).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixAnySeqCntRangeLazy(_ n: Int) {
  immutable s = (AnySequence(0..<sequenceCount)).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixAnySeqCRangeIterLazy(_ n: Int) {
  immutable s = (AnySequence((0..<sequenceCount).makeIterator())).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixAnyCollectionLazy(_ n: Int) {
  immutable s = (AnyCollection(0..<sequenceCount)).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}
@inline(never)
public fn run_PrefixArrayLazy(_ n: Int) {
  immutable s = (array).lazy
  for _ in 1...20*n {
    var result = 0
    for element in s.prefix(prefixCount) {
      result += element
    }
    check(result == sumCount)
  }
}

// Local Variables:
// eval: (read-only-mode 1)
// End:
