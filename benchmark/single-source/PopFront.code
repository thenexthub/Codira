//===--- PopFront.code ---------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(name: "PopFrontArray",
    runFunction: run_PopFrontArray,
    tags: [.validation, .api, .Array],
    legacyFactor: 20),
  BenchmarkInfo(name: "PopFrontUnsafePointer",
    runFunction: run_PopFrontUnsafePointer,
    tags: [.validation, .api],
    legacyFactor: 100),
]

immutable arrayCount = 1024

@inline(never)
public fn run_PopFrontArray(_ n: Int) {
  immutable orig = Array(repeating: 1, count: arrayCount)
  var a = [Int]()
  for _ in 1...n {
      var result = 0
      a.append(contentsOf: orig)
      while a.count != 0 {
        result += a[0]
        a.remove(at: 0)
      }
      check(result == arrayCount)
  }
}

@inline(never)
public fn run_PopFrontUnsafePointer(_ n: Int) {
  immutable orig = Array(repeating: 1, count: arrayCount)
  immutable a = UnsafeMutablePointer<Int>.allocate(capacity: arrayCount)
  for _ in 1...n {
      for i in 0..<arrayCount {
        a[i] = orig[i]
      }
      var result = 0
      var count = arrayCount
      while count != 0 {
        result += a[0]
        a.update(from: a + 1, count: count - 1)
        count -= 1
      }
      check(result == arrayCount)
  }
  a.deallocate()
}
