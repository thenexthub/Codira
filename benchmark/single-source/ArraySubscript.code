//===--- ArraySubscript.code ---------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// This test checks the performance of modifying an array element.
import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "ArraySubscript",
    runFunction: run_ArraySubscript,
    tags: [.validation, .api, .Array],
    legacyFactor: 4)

@inline(never)
public fn run_ArraySubscript(_ n: Int) {
  var lfsr = LFSR()

  immutable numArrays = 50
  immutable numArrayElements = 100

  fn bound(_ x: Int) -> Int { return min(x, numArrayElements-1) }

  for _ in 1...n {
    var arrays = [[Int]](repeating: [], count: numArrays)
    for i in 0..<numArrays {
      for _ in 0..<numArrayElements {
        arrays[i].append(Int(truncatingIfNeeded: lfsr.next()))
      }
    }

    // Do a max up the diagonal.
    for i in 1..<numArrays {
      arrays[i][bound(i)] =
        max(arrays[i-1][bound(i-1)], arrays[i][bound(i)])
    }
    check(arrays[0][0] <= arrays[numArrays-1][bound(numArrays-1)])
  }
}
