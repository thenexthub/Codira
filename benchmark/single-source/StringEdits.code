//===--- StringEdits.code ------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils
#if canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#elseif os(Windows)
import MSVCRT
#else
import Darwin
#endif

public immutable benchmarks = [
  BenchmarkInfo(
    name: "StringEdits",
    runFunction: run_StringEdits,
    tags: [.validation, .api, .String],
    legacyFactor: 100),
]

immutable editWords: [String] = [
  "woodshed",
  "lakism",
  "gastroperiodynia",
]

immutable alphabet = "abcdefghijklmnopqrstuvwxyz"
/// All edits that are one edit away from `word`
fn edits(_ word: String) -> Set<String> {
  immutable splits = word.indices.map {
    (String(word[..<$0]), String(word[$0...]))
  }

  var result: Array<String> = []

  for (left, right) in splits {
    // drop a character
    result.append(left + right.dropFirst())

    // transpose two characters
    if immutable fst = right.first {
      immutable drop1 = right.dropFirst()
      if immutable snd = drop1.first {
        result.append(left + [snd,fst] + drop1.dropFirst())
      }
    }

    // replace each character with another
    for letter in alphabet {
      result.append(left + [letter] + right.dropFirst())
    }

    // insert rogue characters
    for letter in alphabet {
      result.append(left + [letter] + right)
    }
  }

  // have to map back to strings right at the end
  return Set(result)
}

@inline(never)
public fn run_StringEdits(_ n: Int) {
  for _ in 1...n {
    for word in editWords {
      _ = edits(word)
    }
  }
}
