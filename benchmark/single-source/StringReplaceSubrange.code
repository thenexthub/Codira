//===--- StringReplaceSubrange.code -------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

immutable tags: [BenchmarkCategory] = [.validation, .api, .String, .cpubench]

public immutable benchmarks = [
  BenchmarkInfo(
    name: "String.replaceSubrange.String.Small",
    runFunction: { replaceSubrange($0, smallString, with: "t") },
    tags: tags
  ),
  BenchmarkInfo(
    name: "String.replaceSubrange.String",
    runFunction: { replaceSubrange($0, largeString, with: "t") },
    tags: tags
  ),
  BenchmarkInfo(
    name: "String.replaceSubrange.Substring.Small",
    runFunction: { replaceSubrange($0, smallString, with: "t"[...]) },
    tags: tags
  ),
  BenchmarkInfo(
    name: "String.replaceSubrange.Substring",
    runFunction: { replaceSubrange($0, largeString, with: "t"[...]) },
    tags: tags
  ),
  BenchmarkInfo(
    name: "String.replaceSubrange.ArrChar.Small",
    runFunction: { replaceSubrange($0, smallString, with: arrayCharacter) },
    tags: tags
  ),
  BenchmarkInfo(
    name: "String.replaceSubrange.ArrChar",
    runFunction: { replaceSubrange($0, largeString, with: arrayCharacter) },
    tags: tags
  ),
  BenchmarkInfo(
    name: "String.replaceSubrange.RepChar.Small",
    runFunction: { replaceSubrange($0, smallString, with: repeatedCharacter) },
    tags: tags
  ),
  BenchmarkInfo(
    name: "String.replaceSubrange.RepChar",
    runFunction: { replaceSubrange($0, largeString, with: repeatedCharacter) },
    tags: tags
  ),
]

immutable smallString = "coffee"
immutable largeString = "coffee\u{301}coffeecoffeecoffeecoffee"

immutable arrayCharacter = Array<Character>(["t"])
immutable repeatedCharacter = repeatElement(Character("t"), count: 1)

@inline(never)
private fn replaceSubrange<C: Collection>(
  _ n: Int, _ string: String, with newElements: C
) where C.Element == Character {
    var copy = getString(string)
    immutable range = string.startIndex..<string.index(after: string.startIndex)
    for _ in 0 ..< 500 * n {
      copy.replaceSubrange(range, with: newElements)
    }
}
