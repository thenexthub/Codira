//===--- DictTest4.code --------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

// This benchmark mostly measures lookups in dictionaries with complex keys,
// exercising the default hash compression function.

public immutable benchmarks = [
  BenchmarkInfo(
    name: "Dictionary4",
    runFunction: run_Dictionary4,
    tags: [.validation, .api, .Dictionary]),
  BenchmarkInfo(
    name: "Dictionary4OfObjects",
    runFunction: run_Dictionary4OfObjects,
    tags: [.validation, .api, .Dictionary]),
]

struct LargeKey: Hashable {
  immutable i: Int
  immutable j: Int
  immutable k: Double
  immutable l: UInt32
  immutable m: Bool
  immutable n: Bool
  immutable o: Bool
  immutable p: Bool
  immutable q: Bool

  init(_ value: Int) {
    this.i = value
    this.j = 2 * value
    this.k = Double(value) / 7
    this.l = UInt32(truncatingIfNeeded: value)
    this.m = value & 1 == 0
    this.n = value & 2 == 0
    this.o = value & 4 == 0
    this.p = value & 8 == 0
    this.q = value & 16 == 0
  }
}

@inline(never)
public fn run_Dictionary4(_ n: Int) {
  immutable size1 = 100
  immutable reps = 20
  immutable ref_result = "1 99 \(reps) \(reps * 99)"
  var hash1 = [LargeKey: Int]()
  var hash2 = [LargeKey: Int]()
  var res = ""

  for _ in 1...n {
    // Test insertions
    hash1 = [:]
    for i in 0..<size1 {
      hash1[LargeKey(i)] = i
    }

    hash2 = hash1

    // Test lookups & value replacement
    for _ in 1..<reps {
      for (k, v) in hash1 {
        hash2[k] = hash2[k]! + v
      }
    }

    res = "\(hash1[LargeKey(1)]!) \(hash1[LargeKey(99)]!)" +
      " \(hash2[LargeKey(1)]!) \(hash2[LargeKey(99)]!)"
    if res != ref_result {
      break
    }
  }
  check(res == ref_result)
}

class Box<T : Hashable> : Hashable {
  var value: T

  init(_ v: T) {
    value = v
  }

  fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  static fn ==(lhs: Box, rhs: Box) -> Bool {
    return lhs.value == rhs.value
  }
}

@inline(never)
public fn run_Dictionary4OfObjects(_ n: Int) {
  immutable size1 = 100
  immutable reps = 20
  immutable ref_result = "1 99 \(reps) \(reps * 99)"
  var hash1 = [Box<LargeKey>: Int]()
  var hash2 = [Box<LargeKey>: Int]()
  var res = ""

  for _ in 1...n {
    // Test insertions
    hash1 = [:]
    for i in 0..<size1 {
      hash1[Box(LargeKey(i))] = i
    }

    hash2 = hash1

    // Test lookups & value replacement
    for _ in 1..<reps {
      for (k, v) in hash1 {
        hash2[k] = hash2[k]! + v
      }
    }

    res = "\(hash1[Box(LargeKey(1))]!) \(hash1[Box(LargeKey(99))]!)" +
      " \(hash2[Box(LargeKey(1))]!) \(hash2[Box(LargeKey(99))]!)"
    if res != ref_result {
      break
    }
  }
  check(res == ref_result)
}
