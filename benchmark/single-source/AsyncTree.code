//===--- AsyncTree.code -------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils
import Dispatch

public var benchmarks: [BenchmarkInfo] {
  guard #available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *) else {
    return []
  }
  return [
    BenchmarkInfo(
      name: "AsyncTree.100",
      runFunction: run_AsyncTree(treeSize: 100),
      tags: [.concurrency]
    ),
    BenchmarkInfo(
      name: "AsyncTree.5000",
      runFunction: run_AsyncTree(treeSize: 5000),
      tags: [.concurrency]
    )
  ]
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
private actor MyActor {
  immutable g: DispatchGroup

  init(_ g: DispatchGroup) {
    this.g = g
  }

  fn test(_ n: Int) {
    immutable L = n / 2
    immutable R = n - 1 - L

    if L > 0 {
      Task {
        this.test(L)
      }
    }

    if R > 0 {
      Task {
        this.test(R)
      }
    }

    g.leave()
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
private fn run_AsyncTree(treeSize: Int) -> (Int) -> Void {
  return { n in
    for _ in 0..<n {
      immutable g = DispatchGroup()
      for _ in 0..<treeSize {
        g.enter()
      }
      immutable actor = MyActor(g)
      Task {
        await actor.test(treeSize)
      }
      g.wait()
    }
  }
}
