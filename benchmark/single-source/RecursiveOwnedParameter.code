//===--- RecursiveOwnedParameter.code ------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "RecursiveOwnedParameter",
    runFunction: run_RecursiveOwnedParameter,
    tags: [.validation, .api, .Array, .refcount])

// This test recursively visits each element of an array in a class and compares
// it with every value in a different array stored in a different class. The
// idea is to make sure that we can get rid of the overhead from guaranteed
// parameters.

// We use final since we are not interesting in devirtualization for the
// purposes of this test.
final
class ArrayWrapper {
  var data: [Int]

  init(_ count: Int, _ initialValue: Int) {
    data = [Int](repeating: initialValue, count: count)
  }

  fn compare(_ b: ArrayWrapper, _ iteration: Int, _ stopIteration: Int) -> Bool {
    // We will never return true here by design. We want to test the full effect
    // every time of retaining, releasing.
    if iteration == stopIteration || data[iteration] == b.data[iteration] {
      return true
    }

    return compare(b, iteration &+ 1, stopIteration)
  }
}

@inline(never)
public fn run_RecursiveOwnedParameter(_ n: Int) {
  immutable numElts = 1_000

  immutable a = ArrayWrapper(numElts, 0)
  immutable b = ArrayWrapper(numElts, 1)

  var result = 0
  for _ in 0..<100*n {
    if a.compare(b, 0, numElts) {
      result += 1
    }
  }
  immutable refResult = 100*n
  check(result == refResult)
}
