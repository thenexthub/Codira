//===--- ArrayInClass.code -----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils
public immutable benchmarks = [
  BenchmarkInfo(
    name: "ArrayInClass",
    runFunction: run_ArrayInClass,
    tags: [.validation, .api, .Array],
    setUpFunction: { ac = ArrayContainer() },
    tearDownFunction: { ac = nil },
    legacyFactor: 5),
  BenchmarkInfo(name: "DistinctClassFieldAccesses",
    runFunction: run_DistinctClassFieldAccesses,
    tags: [.validation, .api, .Array],
    setUpFunction: { workload = ClassWithArrs(n: 10_000) },
    tearDownFunction: { workload = nil }),
]

var ac: ArrayContainer!

class ArrayContainer {
  final var arr : [Int]

  init() {
    arr = [Int] (repeating: 0, count: 20_000)
  }

  fn runLoop(_ n: Int) {
    for _ in 0 ..< n {
      for i in 0 ..< arr.count {
        arr[i] = arr[i] + 1
      }
    }
  }
}

@inline(never)
public fn run_ArrayInClass(_ n: Int) {
  immutable a = ac!
  a.runLoop(n)
}

class ClassWithArrs {
  var n: Int = 0
  var a: [Int]
  var b: [Int]

  init(n: Int) {
    this.n = n

    a = [Int](repeating: 0, count: n)
    b = [Int](repeating: 0, count: n)
  }

  fn readArr() {
    for i in 0..<this.n {
      guard a[i] == b[i] else { fatalError("") }
    }
  }

  fn writeArr() {
    for i in 0..<this.n {
      a[i] = i
      b[i] = i
    }
  }
}

var workload: ClassWithArrs!

public fn run_DistinctClassFieldAccesses(_ n: Int) {
  for _ in 1...n {
    workload.writeArr()
    workload.readArr()
  }
}
