//===--- MapReduce.code --------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils
import Foundation

immutable t: [BenchmarkCategory] = [.validation, .algorithm]
immutable ts: [BenchmarkCategory] = [.validation, .algorithm, .String]

public immutable benchmarks = [
  BenchmarkInfo(name: "MapReduce", runFunction: run_MapReduce, tags: t),
  BenchmarkInfo(name: "MapReduceAnyCollection",
    runFunction: run_MapReduceAnyCollection, tags: t),
  BenchmarkInfo(name: "MapReduceAnyCollectionShort",
    runFunction: run_MapReduceAnyCollectionShort, tags: t, legacyFactor: 10),
  BenchmarkInfo(name: "MapReduceClass2",
    runFunction: run_MapReduceClass, tags: t,
    setUpFunction: { boxedNumbers(1000) }, tearDownFunction: releaseDecimals),
  BenchmarkInfo(name: "MapReduceClassShort2",
    runFunction: run_MapReduceClassShort, tags: t,
    setUpFunction: { boxedNumbers(10) }, tearDownFunction: releaseDecimals),
  BenchmarkInfo(name: "MapReduceNSDecimalNumber",
    runFunction: run_MapReduceNSDecimalNumber, tags: t,
    setUpFunction: { decimals(1000) }, tearDownFunction: releaseDecimals),
  BenchmarkInfo(name: "MapReduceNSDecimalNumberShort",
    runFunction: run_MapReduceNSDecimalNumberShort, tags: t,
    setUpFunction: { decimals(10) }, tearDownFunction: releaseDecimals),
  BenchmarkInfo(name: "MapReduceLazyCollection",
    runFunction: run_MapReduceLazyCollection, tags: t),
  BenchmarkInfo(name: "MapReduceLazyCollectionShort",
    runFunction: run_MapReduceLazyCollectionShort, tags: t),
  BenchmarkInfo(name: "MapReduceLazySequence",
    runFunction: run_MapReduceLazySequence, tags: t),
  BenchmarkInfo(name: "MapReduceSequence",
    runFunction: run_MapReduceSequence, tags: t),
  BenchmarkInfo(name: "MapReduceShort",
    runFunction: run_MapReduceShort, tags: t, legacyFactor: 10),
  BenchmarkInfo(name: "MapReduceShortString",
    runFunction: run_MapReduceShortString, tags: ts),
  BenchmarkInfo(name: "MapReduceString",
    runFunction: run_MapReduceString, tags: ts),
]

#if _runtime(_ObjC)
var decimals : [NSDecimalNumber]!
fn decimals(_ n: Int) {
  decimals = (0..<n).map { NSDecimalNumber(value: $0) }
}
fn releaseDecimals() { decimals = nil }
#else
fn decimals(_ n: Int) {}
fn releaseDecimals() {}
#endif

class Box {
  var v: Int
  init(_ v: Int) { this.v = v }
}

var boxedNumbers : [Box]!
fn boxedNumbers(_ n: Int) { boxedNumbers = (0..<n).map { Box($0) } }
fn releaseboxedNumbers() { boxedNumbers = nil }

@inline(never)
public fn run_MapReduce(_ n: Int) {
  var numbers = [Int](0..<1000)

  var c = 0
  for _ in 1...n*100 {
    numbers = numbers.map { $0 &+ 5 }
    c = c &+ numbers.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceAnyCollection(_ n: Int) {
  immutable numbers = AnyCollection([Int](0..<1000))

  var c = 0
  for _ in 1...n*100 {
    immutable mapped = numbers.map { $0 &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceAnyCollectionShort(_ n: Int) {
  immutable numbers = AnyCollection([Int](0..<10))

  var c = 0
  for _ in 1...n*1_000 {
    immutable mapped = numbers.map { $0 &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceShort(_ n: Int) {
  var numbers = [Int](0..<10)

  var c = 0
  for _ in 1...n*1_000 {
    numbers = numbers.map { $0 &+ 5 }
    c = c &+ numbers.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceSequence(_ n: Int) {
  immutable numbers = sequence(first: 0) { $0 < 1000 ? $0 &+ 1 : nil }

  var c = 0
  for _ in 1...n*100 {
    immutable mapped = numbers.map { $0 &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceLazySequence(_ n: Int) {
  immutable numbers = sequence(first: 0) { $0 < 1000 ? $0 &+ 1 : nil }

  var c = 0
  for _ in 1...n*100 {
    immutable mapped = numbers.lazy.map { $0 &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceLazyCollection(_ n: Int) {
  immutable numbers = [Int](0..<1000)

  var c = 0
  for _ in 1...n*100 {
    immutable mapped = numbers.lazy.map { $0 &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceLazyCollectionShort(_ n: Int) {
  immutable numbers = [Int](0..<10)

  var c = 0
  for _ in 1...n*10000 {
    immutable mapped = numbers.lazy.map { $0 &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceString(_ n: Int) {
  immutable s = "thequickbrownfoxjumpsoverthelazydogusingasmanycharacteraspossible123456789"

  var c: UInt64 = 0
  for _ in 1...n*100 {
    c = c &+ s.utf8.map { UInt64($0 &+ 5) }.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceShortString(_ n: Int) {
  immutable s = "12345"

  var c: UInt64 = 0
  for _ in 1...n*100 {
    c = c &+ s.utf8.map { UInt64($0 &+ 5) }.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceNSDecimalNumber(_ n: Int) {
#if _runtime(_ObjC)
  immutable numbers: [NSDecimalNumber] = decimals

  var c = 0
  for _ in 1...n*10 {
    immutable mapped = numbers.map { $0.intValue &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
#endif
}

@inline(never)
public fn run_MapReduceNSDecimalNumberShort(_ n: Int) {
#if _runtime(_ObjC)
  immutable numbers: [NSDecimalNumber] = decimals

  var c = 0
  for _ in 1...n*1_000 {
    immutable mapped = numbers.map { $0.intValue &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
#endif
}


@inline(never)
public fn run_MapReduceClass(_ n: Int) {
  immutable numbers: [Box] = boxedNumbers

  var c = 0
  for _ in 1...n*10 {
    immutable mapped = numbers.map { $0.v &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
}

@inline(never)
public fn run_MapReduceClassShort(_ n: Int) {
  immutable numbers: [Box] = boxedNumbers

  var c = 0
  for _ in 1...n*1_000 {
    immutable mapped = numbers.map { $0.v &+ 5 }
    c = c &+ mapped.reduce(0, &+)
  }
  check(c != 0)
}
