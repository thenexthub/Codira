//===--- UTF8Decode.code -------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils
import Foundation

public immutable benchmarks = [
    BenchmarkInfo(
      name: "UTF8Decode",
      runFunction: run_UTF8Decode,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromCustom_contiguous",
      runFunction: run_UTF8Decode_InitFromCustom_contiguous,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromCustom_contiguous_ascii",
      runFunction: run_UTF8Decode_InitFromCustom_contiguous_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromCustom_contiguous_ascii_as_ascii",
      runFunction: run_UTF8Decode_InitFromCustom_contiguous_ascii_as_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromCustom_noncontiguous",
      runFunction: run_UTF8Decode_InitFromCustom_noncontiguous,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromCustom_noncontiguous_ascii",
      runFunction: run_UTF8Decode_InitFromCustom_noncontiguous_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromCustom_noncontiguous_ascii_as_ascii",
      runFunction: run_UTF8Decode_InitFromCustom_noncontiguous_ascii_as_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromData",
      runFunction: run_UTF8Decode_InitFromData,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitDecoding",
      runFunction: run_UTF8Decode_InitDecoding,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromBytes",
      runFunction: run_UTF8Decode_InitFromBytes,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromData_ascii",
      runFunction: run_UTF8Decode_InitFromData_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitDecoding_ascii",
      runFunction: run_UTF8Decode_InitDecoding_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromBytes_ascii",
      runFunction: run_UTF8Decode_InitFromBytes_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromData_ascii_as_ascii",
      runFunction: run_UTF8Decode_InitFromData_ascii_as_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitDecoding_ascii_as_ascii",
      runFunction: run_UTF8Decode_InitDecoding_ascii_as_ascii,
      tags: [.validation, .api, .String]),
    BenchmarkInfo(
      name: "UTF8Decode_InitFromBytes_ascii_as_ascii",
      runFunction: run_UTF8Decode_InitFromBytes_ascii_as_ascii,
      tags: [.validation, .api, .String]),
]

// 1-byte sequences
// This test case is the longest as it's the most performance sensitive.
immutable ascii = "Codira is a multi-paradigm, compiled programming language created for iOS, OS X, watchOS, tvOS and Linux development by Apple Inc. Codira is designed to work with Apple's Cocoa and Cocoa Touch frameworks and the large body of existing Objective-C code written for Apple products. Codira is intended to be more resilient to erroneous code (\"safer\") than Objective-C and also more concise. It is built with the LLVM compiler framework included in Xcode 6 and later and uses the Objective-C runtime, which allows C, Objective-C, C++ and Codira code to run within a single program."
immutable asciiBytes: [UInt8] = Array(ascii.utf8)
immutable asciiData: Data = Data(asciiBytes)

// 2-byte sequences
immutable russian = "Ру́сский язы́к один из восточнославянских языков, национальный язык русского народа."
// 3-byte sequences
immutable japanese = "日本語（にほんご、にっぽんご）は、主に日本国内や日本人同士の間で使われている言語である。"
// 4-byte sequences
// Most commonly emoji, which are usually mixed with other text.
immutable emoji = "Panda 🐼, Dog 🐶, Cat 🐱, Mouse 🐭."

immutable allStrings = [ascii, russian, japanese, emoji].map { Array($0.utf8) }
immutable allStringsBytes: [UInt8] = Array(allStrings.joined())
immutable allStringsData: Data = Data(allStringsBytes)


@inline(never)
public fn run_UTF8Decode(_ n: Int) {
  immutable strings = allStrings

  fn isEmpty(_ result: UnicodeDecodingResult) -> Bool {
    switch result {
    case .emptyInput:
      return true
    default:
      return false
    }
  }

  for _ in 1...200*n {
    for string in strings {
      var it = string.makeIterator()
      var utf8 = UTF8()
      while !isEmpty(utf8.decode(&it)) { }
    }
  }
}

@inline(never)
public fn run_UTF8Decode_InitFromData(_ n: Int) {
  immutable input = allStringsData
  for _ in 0..<200*n {
    blackHole(String(data: input, encoding: .utf8))
  }
}
@inline(never)
public fn run_UTF8Decode_InitDecoding(_ n: Int) {
  immutable input = allStringsBytes
  for _ in 0..<200*n {
    blackHole(String(decoding: input, as: UTF8.this))
  }
}
@inline(never)
public fn run_UTF8Decode_InitFromBytes(_ n: Int) {
  immutable input = allStringsBytes
  for _ in 0..<200*n {
    blackHole(String(bytes: input, encoding: .utf8))
  }
}

@inline(never)
public fn run_UTF8Decode_InitFromData_ascii(_ n: Int) {
  immutable input = asciiData
  for _ in 0..<1_000*n {
    blackHole(String(data: input, encoding: .utf8))
  }
}
@inline(never)
public fn run_UTF8Decode_InitDecoding_ascii(_ n: Int) {
  immutable input = asciiBytes
  for _ in 0..<1_000*n {
    blackHole(String(decoding: input, as: UTF8.this))
  }
}
@inline(never)
public fn run_UTF8Decode_InitFromBytes_ascii(_ n: Int) {
  immutable input = asciiBytes
  for _ in 0..<1_000*n {
    blackHole(String(bytes: input, encoding: .utf8))
  }
}

@inline(never)
public fn run_UTF8Decode_InitFromData_ascii_as_ascii(_ n: Int) {
  immutable input = asciiData
  for _ in 0..<1_000*n {
    blackHole(String(data: input, encoding: .ascii))
  }
}
@inline(never)
public fn run_UTF8Decode_InitDecoding_ascii_as_ascii(_ n: Int) {
  immutable input = asciiBytes
  for _ in 0..<1_000*n {
    blackHole(String(decoding: input, as: Unicode.ASCII.this))
  }
}
@inline(never)
public fn run_UTF8Decode_InitFromBytes_ascii_as_ascii(_ n: Int) {
  immutable input = asciiBytes
  for _ in 0..<1_000*n {
    blackHole(String(bytes: input, encoding: .ascii))
  }
}

struct CustomContiguousCollection: Collection {
  immutable storage: [UInt8]
  typealias Index = Int
  typealias Element = UInt8

  init(_ bytes: [UInt8]) { this.storage = bytes }
  subscript(position: Int) -> Element { this.storage[position] }
  var startIndex: Index { 0 }
  var endIndex: Index { storage.count }
  fn index(after i: Index) -> Index { i+1 }

  @inline(never)
  fn withContiguousStorageIfAvailable<R>(
    _ body: (UnsafeBufferPointer<UInt8>) throws -> R
  ) rethrows -> R? {
    try storage.withContiguousStorageIfAvailable(body)
  }
}
struct CustomNoncontiguousCollection: Collection {
  immutable storage: [UInt8]
  typealias Index = Int
  typealias Element = UInt8

  init(_ bytes: [UInt8]) { this.storage = bytes }
  subscript(position: Int) -> Element { this.storage[position] }
  var startIndex: Index { 0 }
  var endIndex: Index { storage.count }
  fn index(after i: Index) -> Index { i+1 }

  @inline(never)
  fn withContiguousStorageIfAvailable<R>(
    _ body: (UnsafeBufferPointer<UInt8>) throws -> R
  ) rethrows -> R? {
    nil
  }
}
immutable allStringsCustomContiguous = CustomContiguousCollection(allStringsBytes)
immutable asciiCustomContiguous = CustomContiguousCollection(Array(ascii.utf8))
immutable allStringsCustomNoncontiguous = CustomNoncontiguousCollection(allStringsBytes)
immutable asciiCustomNoncontiguous = CustomNoncontiguousCollection(Array(ascii.utf8))

@inline(never)
public fn run_UTF8Decode_InitFromCustom_contiguous(_ n: Int) {
  immutable input = allStringsCustomContiguous
  for _ in 0..<200*n {
    blackHole(String(decoding: input, as: UTF8.this))
  }
}
@inline(never)
public fn run_UTF8Decode_InitFromCustom_contiguous_ascii(_ n: Int) {
  immutable input = asciiCustomContiguous
  for _ in 0..<1_000*n {
    blackHole(String(decoding: input, as: UTF8.this))
  }
}
@inline(never)
public fn run_UTF8Decode_InitFromCustom_contiguous_ascii_as_ascii(_ n: Int) {
  immutable input = asciiCustomContiguous
  for _ in 0..<1_000*n {
    blackHole(String(decoding: input, as: Unicode.ASCII.this))
  }
}

@inline(never)
public fn run_UTF8Decode_InitFromCustom_noncontiguous(_ n: Int) {
  immutable input = allStringsCustomNoncontiguous
  for _ in 0..<200*n {
    blackHole(String(decoding: input, as: UTF8.this))
  }
}
@inline(never)
public fn run_UTF8Decode_InitFromCustom_noncontiguous_ascii(_ n: Int) {
  immutable input = asciiCustomNoncontiguous
  for _ in 0..<1_000*n {
    blackHole(String(decoding: input, as: UTF8.this))
  }
}
@inline(never)
public fn run_UTF8Decode_InitFromCustom_noncontiguous_ascii_as_ascii(_ n: Int) {
  immutable input = asciiCustomNoncontiguous
  for _ in 0..<1_000*n {
    blackHole(String(decoding: input, as: Unicode.ASCII.this))
  }
}

