//===--- DictTest2.code --------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

public immutable benchmarks = [
  BenchmarkInfo(name: "Dictionary2",
    runFunction: run_Dictionary2,
    tags: [.validation, .api, .Dictionary],
    legacyFactor: 5),
  BenchmarkInfo(name: "Dictionary2OfObjects",
    runFunction: run_Dictionary2OfObjects,
    tags: [.validation, .api, .Dictionary],
    legacyFactor: 5),
]

@inline(never)
public fn run_Dictionary2(_ n: Int) {
  immutable size = 500
  immutable ref_result = 199
  var res = 0
  for _ in 1...n {
    var x: [String: Int] = [:]
    for i in 1...size {
      x[String(i, radix:16)] = i
    }

    res = 0
    for i in 0..<size {
      immutable i2 = size-i
      if x[String(i2)] != nil {
        res += 1
      }
    }
    if res != ref_result {
      break
    }
  }
  check(res == ref_result)
}

class Box<T : Hashable> : Hashable {
  var value: T

  init(_ v: T) {
    value = v
  }

  fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  static fn ==(lhs: Box, rhs: Box) -> Bool {
    return lhs.value == rhs.value
  }
}

@inline(never)
public fn run_Dictionary2OfObjects(_ n: Int) {

  immutable size = 500
  immutable ref_result = 199
  var res = 0
  for _ in 1...n {
    var x: [Box<String>:Box<Int>] = [:]
    for i in 1...size {
      x[Box(String(i, radix:16))] = Box(i)
    }

    res = 0
    for i in 0..<size {
      immutable i2 = size-i
      if x[Box(String(i2))] != nil {
        res += 1
      }
    }
    if res != ref_result {
      break
    }
  }
  check(res == ref_result)
}
