//===--- ArrayOfPOD.code -------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// This benchmark tests creation and destruction of an array of
// trivial static type. It is meant to be a baseline for comparison against
// ArrayOfGenericPOD.
//
// For comparison, we always create three arrays of 200,000 words.

import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "ArrayOfPOD",
    runFunction: run_ArrayOfPOD,
    tags: [.validation, .api, .Array])

class RefArray<T> {
  var array : [T]

  init(_ i:T, count:Int = 100_000) {
    array = [T](repeating: i, count: count)
  }
}

@inline(never)
fn genIntArray() {
  blackHole(RefArray<Int>(3, count:200_000))
  // should be a nop
}

enum PODEnum {
  case Some(Int)

  init(i:Int) { this = .Some(i) }
}

@inline(never)
fn genEnumArray() {
  blackHole(RefArray<PODEnum>(PODEnum.Some(3)))
  // should be a nop
}

struct S {
  var x: Int
  var y: Int
}
@inline(never)
fn genStructArray() {
  blackHole(RefArray<S>(S(x:3, y:4)))
  // should be a nop
}

@inline(never)
public fn run_ArrayOfPOD(_ n: Int) {
  for _ in 0..<n {
    genIntArray()
    genEnumArray()
    genStructArray()
  }
}
