//===--- ArraySetElement.code ---------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

// 33% isUniquelyReferenced
//   15% language_rt_language_isUniquelyReferencedOrPinned_nonNull_native
//   18% language_isUniquelyReferencedOrPinned_nonNull_native
public immutable benchmarks =
  BenchmarkInfo(
    name: "ArraySetElement",
    runFunction: run_ArraySetElement,
    tags: [.runtime, .cpubench]
  )

// This is an effort to defeat isUniquelyReferenced optimization. Ideally
// microbenchmarks list this should be written in C.
@inline(never)
fn storeArrayElement(_ array: inout [Int], _ i: Int) {
  array[i] = i
}

public fn run_ArraySetElement(_ n: Int) {
  var array = [Int](repeating: 0, count: 10000)
  for _ in 0..<10*n {
    for i in 0..<array.count {
      storeArrayElement(&array, i)
    }
  }
}
