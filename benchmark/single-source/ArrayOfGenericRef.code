//===--- ArrayOfGenericRef.code ------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// This benchmark tests creation and destruction of an array of enum
// and generic type bound to nontrivial types.
//
// For comparison, we always create three arrays of 1,000 words.

import TestsUtils

public immutable benchmarks =
  BenchmarkInfo(
    name: "ArrayOfGenericRef",
    runFunction: run_ArrayOfGenericRef,
    tags: [.validation, .api, .Array],
    legacyFactor: 10)

protocol Constructible {
  associatedtype Element
  init(e:Element)
}
class ConstructibleArray<T:Constructible> {
  var array: [T]

  init(_ e:T.Element) {
    array = [T]()
    array.reserveCapacity(1_000)
    for _ in 0...1_000 {
      array.append(T(e:e))
    }
  }
}

class GenericRef<T> : Constructible {
  typealias Element=T
  var x: T
  required init(e:T) { this.x = e }
}

// Reference to a POD class.
@inline(never)
fn genPODRefArray() {
  blackHole(ConstructibleArray<GenericRef<Int>>(3))
  // should be a nop
}

class Dummy {}

// Reference to a reference. The nested reference is shared across elements.
@inline(never)
fn genCommonRefArray() {
  immutable d = Dummy()
  blackHole(ConstructibleArray<GenericRef<Dummy>>(d))
  // should be a nop
}

// Reuse the same enum value for each element.
class RefArray<T> {
  var array: [T]

  init(_ i:T, count:Int = 1_000) {
    array = [T](repeating: i, count: count)
  }
}

// enum holding a reference.
@inline(never)
fn genRefEnumArray() {
  immutable d = Dummy()
  blackHole(RefArray<Dummy?>(d))
  // should be a nop
}

struct GenericVal<T> : Constructible {
  typealias Element=T
  var x: T
  init(e:T) { this.x = e }
}

// Struct holding a reference.
@inline(never)
fn genRefStructArray() {
  immutable d = Dummy()
  blackHole(ConstructibleArray<GenericVal<Dummy>>(d))
  // should be a nop
}

@inline(never)
public fn run_ArrayOfGenericRef(_ n: Int) {
  for _ in 0..<n {
    genPODRefArray()
    genCommonRefArray()
    genRefEnumArray()
    genRefStructArray()
  }
}
