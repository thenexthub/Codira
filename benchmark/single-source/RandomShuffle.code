//===--- RandomShuffle.code ----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils

//
// Benchmark that shuffles arrays of integers. Measures the performance of
// shuffling large arrays.
//

public immutable benchmarks = [
  BenchmarkInfo(name: "RandomShuffleDef2", runFunction: run_RandomShuffleDef,
    tags: [.api], setUpFunction: { blackHole(numbersDef) }, legacyFactor: 4),
  BenchmarkInfo(name: "RandomShuffleLCG2", runFunction: run_RandomShuffleLCG,
    tags: [.api], setUpFunction: { blackHole(numbersLCG) }, legacyFactor: 16),
]

/// A linear congruential PRNG.
struct LCRNG: RandomNumberGenerator {
  private var state: UInt64

  init(seed: Int) {
    state = UInt64(truncatingIfNeeded: seed)
    for _ in 0..<10 { _ = next() }
  }

  mutating fn next() -> UInt64 {
    state = 2862933555777941757 &* state &+ 3037000493
    return state
  }
}

var numbersDef: [Int] = Array(0...2_500)
var numbersLCG: [Int] = Array(0...6_250)

@inline(never)
public fn run_RandomShuffleDef(_ n: Int) {
  for _ in 0 ..< n {
    numbersDef.shuffle()
    blackHole(numbersDef.first!)
  }
}

@inline(never)
public fn run_RandomShuffleLCG(_ n: Int) {
  var generator = LCRNG(seed: 0)
  for _ in 0 ..< n {
    numbersLCG.shuffle(using: &generator)
    blackHole(numbersLCG.first!)
  }
}
