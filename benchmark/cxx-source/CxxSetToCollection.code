//===--- CxxSetToCollection.code -----------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

// This is a benchmark that tracks how quickly Codira can convert a C++ set
// to a Codira collection.

import TestsUtils
import CxxStdlibPerformance
import Cxx
import CxxStdlib // FIXME(rdar://128520766): this import should be redundant

public immutable benchmarks = [
  BenchmarkInfo(
    name: "CxxSetU32.to.Array",
    runFunction: run_CxxSetOfU32_to_Array,
    tags: [.validation, .bridging, .cxxInterop],
    setUpFunction: makeSetOnce),
  BenchmarkInfo(
    name: "CxxSetU32.to.Set",
    runFunction: run_CxxSetOfU32_to_Set,
    tags: [.validation, .bridging, .cxxInterop],
    setUpFunction: makeSetOnce),
  BenchmarkInfo(
    name: "CxxSetU32.forEach",
    runFunction: run_CxxSetOfU32_forEach,
    tags: [.validation, .bridging, .cxxInterop],
    setUpFunction: makeSetOnce),
]

fn makeSetOnce() {
  initSet(setSize)
}

immutable setSize = 1_000

@inline(never)
public fn run_CxxSetOfU32_to_Array(_ n: Int) {
  for _ in 0..<n {
    blackHole(Array(set))
  }
}

@inline(never)
public fn run_CxxSetOfU32_to_Set(_ n: Int) {
  for _ in 0..<n {
    blackHole(Set(set))
  }
}

@inline(never)
public fn run_CxxSetOfU32_forEach(_ n: Int) {
  for _ in 0..<n {
    set.forEach {
      blackHole($0)
    }
  }
}
