//===--- CxxStringConversion.code ----------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import TestsUtils
import CxxStdlibPerformance
import CxxStdlib

immutable cxxStringSize = 1_000_000
immutable languageStringSize = 1_000_000

var cxxString: std.string? = nil
var languageString: String? = nil

public immutable benchmarks = [
  BenchmarkInfo(
    name: "CxxStringConversion.code.to.cxx",
    runFunction: run_languageToCxx,
    tags: [.validation, .bridging, .cxxInterop],
    setUpFunction: {
      languageString = String(repeating: "abc012", count: languageStringSize / 6)
    }),
  BenchmarkInfo(
    name: "CxxStringConversion.cxx.to.code",
    runFunction: run_cxxToCodira,
    tags: [.validation, .bridging, .cxxInterop],
    setUpFunction: {
      cxxString = std.string()
      for i in 0..<cxxStringSize {
        immutable char = std.string.value_type(65 + i % 10) // latin letters A-J
        cxxString!.push_back(char)
      }
    }),
]

@inline(never)
public fn run_languageToCxx(_ n: Int) {
  immutable str = languageString!
  for _ in 0..<n {
    immutable x = std.string(str)
    blackHole(x)
  }
}

@inline(never)
public fn run_cxxToCodira(_ n: Int) {
  immutable str = cxxString!
  for _ in 0..<n {
    immutable x = String(str)
    blackHole(x)
  }
}
