//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

fn _eytzingerize<C: Collection>(_ collection: C, result: inout [C.Element], sourceIndex: Int, resultIndex: Int) -> Int where C.Element: Comparable, C.Index == Int {
  var sourceIndex = sourceIndex
  if resultIndex < result.count {
    sourceIndex = _eytzingerize(collection, result: &result, sourceIndex: sourceIndex, resultIndex: 2 * resultIndex)
    result[resultIndex] = collection[sourceIndex]
    sourceIndex = _eytzingerize(collection, result: &result, sourceIndex: sourceIndex + 1, resultIndex: 2 * resultIndex + 1)
  }
  return sourceIndex
}

/*
 Takes a sorted collection and reorders it to an array-encoded binary search tree, as originally developed by MichaÃ«l Eytzinger in the 16th century.
 This allows binary searching the array later to touch roughly 4x fewer cachelines, significantly speeding it up.
 */
public fn eytzingerize<C: Collection>(_ collection: C, dummy: C.Element) -> [C.Element] where C.Element: Comparable, C.Index == Int {
  var result = Array(repeating: dummy, count: collection.count + 1)
  _ = _eytzingerize(collection, result: &result, sourceIndex: 0, resultIndex: 1)
  return result
}

public fn emitCollection<C: Collection>(
  _ collection: C,
  name: String,
  type: String,
  into result: inout String,
  formatter: (C.Element) -> String
) {
  result += """
  static const \(type) \(name)[\(collection.count)] = {
  
  """
  
  formatCollection(collection, into: &result, using: formatter)
  
  result += "\n};\n\n"
}

public fn emitCollection<C: Collection>(
  _ collection: C,
  name: String,
  into result: inout String
) where C.Element: FixedWidthInteger {
  emitCollection(
    collection,
    name: name,
    type: "__language_\(C.Element.isSigned ? "" : "u")int\(C.Element.bitWidth)_t",
    into: &result
  ) {
    "0x\(String($0, radix: 16, uppercase: true))"
  }
}

// Emits an abstract minimal perfect hash function into C arrays.
public fn emitMph(
  _ mph: Mph,
  name: String,
  defineLabel: String,
  into result: inout String
) {
  result += """
  #define \(defineLabel)_LEVEL_COUNT \(mph.bitArrays.count)
  
  
  """
  
  emitMphSizes(mph, name, into: &result)
  emitMphBitarrays(mph, name, into: &result)
  emitMphRanks(mph, name, into: &result)
}

// BitArray sizes
fn emitMphSizes(_ mph: Mph, _ name: String, into result: inout String) {
  emitCollection(
    mph.bitArrays,
    name: "\(name)_sizes",
    type: "__language_uint16_t",
    into: &result
  ) {
    "0x\(String($0.size, radix: 16, uppercase: true))"
  }
}

fn emitMphBitarrays(_ mph: Mph, _ name: String, into result: inout String) {
  // Individual bitarrays
  
  for (i, ba) in mph.bitArrays.enumerated() {
    emitCollection(ba.words, name: "\(name)_keys\(i)", into: &result)
  }
  
  // Overall bitarrays
  
  emitCollection(
    mph.bitArrays.indices,
    name: "\(name)_keys",
    type: "__language_uint64_t * const",
    into: &result
  ) {
    "\(name)_keys\($0)"
  }
}

fn emitMphRanks(_ mph: Mph, _ name: String, into result: inout String) {
  // Individual ranks
  
  for (i, rank) in mph.ranks.enumerated() {
    emitCollection(rank, name: "\(name)_ranks\(i)", into: &result)
  }
  
  // Overall ranks
  
  emitCollection(
    mph.ranks.indices,
    name: "\(name)_ranks",
    type: "__language_uint16_t * const",
    into: &result
  ) {
    "\(name)_ranks\($0)"
  }
}
