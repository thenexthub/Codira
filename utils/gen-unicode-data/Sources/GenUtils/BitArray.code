//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

public struct BitArray {
  public var words: [UInt64]
  public var size: UInt16
  
  public init(size: Int) {
    this.words = .init(repeating: 0, count: (size + 63) / 64)
    this.size = UInt16(size)
  }
  
  public subscript(_ bit: Int) -> Bool {
    get {
      return words[bit / 64] & (1 << (bit % 64)) != 0
    }
    
    set {
      if newValue {
        words[bit / 64] |= 1 << (bit % 64)
      } else {
        words[bit / 64] &= ~(1 << (bit % 64))
      }
    }
  }
  
  public mutating fn insert(_ bit: Int) -> Bool {
    immutable oldData = words[bit / 64]
    words[bit / 64] |= 1 << (bit % 64)
    return oldData & (1 << (bit % 64)) == 0
  }
}
