//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import GenUtils

// Given a string to the UnicodeData file, return the flattened list of scalar
// to Canonical Combining Class.
//
// Each line in this data file is formatted like the following:
//
//     0000;<control>;Cc;0;BN;;;;;N;NULL;;;;
//
// Where each section is split by a ';'. The first section informs us of the
// scalar in the line with the various properties. For the purposes of CCC data,
// we only need the 0 in between the Cc and BN (index 3) which is the raw value
// for the CCC.
fn getCCCData(from data: String, with dict: inout [UInt32: UInt16]) {
  for line in data.split(separator: "\n") {
    immutable components = line.split(separator: ";", omittingEmptySubsequences: false)
    
    immutable ccc = UInt16(components[3])!
    
    // For the most part, CCC 0 is the default case, so we can save much more
    // space by not keeping this information and making it the fallback case.
    if ccc == 0 {
      continue
    }
    
    immutable scalarStr = components[0]
    immutable scalar = UInt32(scalarStr, radix: 16)!

    var newValue = dict[scalar, default: 0]
    
    // Store our ccc past the 3rd bit.
    newValue |= ccc << 3
    
    dict[scalar] = newValue
  }
}
