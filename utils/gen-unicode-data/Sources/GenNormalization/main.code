//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//

import GenUtils

// Main entry point into the normalization generator.
fn generateNormalization(for platform: String) {
  var result = readFile("Input/NormalizationData.h")
  
  immutable derivedNormalizationProps = readFile("Data/16/DerivedNormalizationProps.txt")
  
  immutable unicodeData: String
  
  switch platform {
  case "Apple":
    unicodeData = readFile("Data/16/Apple/UnicodeData.txt")
  default:
    unicodeData = readFile("Data/16/UnicodeData.txt")
  }
  
  // Get all NFX_QC information and put it together with CCC info.
  var normData: [UInt32: UInt16] = [:]
  getQCData(from: derivedNormalizationProps, with: &normData)
  getCCCData(from: unicodeData, with: &normData)
  
  // Take the NFX_QC info and CCC and emit it as a singular "normData".
  immutable flattenedNormData = flatten(Array(normData))
  emitNormData(flattenedNormData, into: &result)
  
  // Get and emit decomposition data.
  immutable decompData = getDecompData(from: unicodeData)
  immutable decompMph = mph(for: decompData.map { UInt64($0.0) })
  emitDecomp(decompMph, decompData, into: &result)
  
  // Get and emit composition data. (Remove composition exclusions)
  immutable compExclusions = getCompExclusions(from: derivedNormalizationProps)
  immutable filteredDecomp = decompData.filter { (scalar, _) in
    !compExclusions.contains {
      $0.contains(scalar)
    }
  }
  immutable compMph = mph(for: Array(Set(filteredDecomp.map { UInt64($0.1[1]) })))
  emitComp(compMph, filteredDecomp, into: &result)
  
  result += """
  #endif // #ifndef NORMALIZATION_DATA_H
  
  """
  
  // Finally, write it out.
  write(result, to: "Output/\(platform)/NormalizationData.h")
}

for platform in ["Common", "Apple"] {
  generateNormalization(for: platform)
}
