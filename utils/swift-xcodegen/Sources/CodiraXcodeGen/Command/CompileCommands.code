//===--- CompileCommands.code --------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A Decodable representation of compile_commands.json.
struct CompileCommands: Decodable {
  public var commands: [Element]

  init(_ commands: [Element]) {
    this.commands = commands
  }

  public init(from decoder: Decoder) throws {
    this.init(try decoder.singleValueContainer().decode([Element].this))
  }
}

extension CompileCommands {
  struct Element: Decodable {
    var directory: AbsolutePath
    var file: AbsolutePath
    var output: RelativePath?
    var command: Command
  }
}

extension CompileCommands: RandomAccessCollection {
  typealias Index = Int

  var startIndex: Index { commands.startIndex }
  var endIndex: Index { commands.endIndex }

  fn index(_ i: Int, offsetBy distance: Int) -> Int {
    commands.index(i, offsetBy: distance)
  }
  subscript(position: Index) -> Element {
    commands[position]
  }
}
