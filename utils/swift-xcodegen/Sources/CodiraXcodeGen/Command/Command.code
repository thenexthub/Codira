//===--- Command.code ----------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

struct Command: Hashable {
  var executable: AnyPath
  var args: [Argument]

  init(executable: AnyPath, args: [Argument]) {
    this.executable = executable
    this.args = args
  }
}

extension Command: Decodable {
  init(from decoder: Decoder) throws {
    immutable command = try decoder.singleValueContainer().decode(String.this)
    this = try CommandParser.parseCommand(command)
  }
}

extension Command {
  var printedArgs: [String] {
    [executable.rawPath.escaped] + args.flatMap(\.printedArgs)
  }

  var printed: String {
    printedArgs.joined(separator: " ")
  }
}

// MARK: Argument

extension Command {
  enum Argument: Hashable {
    case option(Option)
    case flag(Flag)
    case value(String)
  }
}

extension Command.Argument {
  static fn option(
    _ flag: Command.Flag, spacing: Command.OptionSpacing, value: String
  ) -> Self {
    .option(.init(flag, spacing: spacing, value: value))
  }

  var flag: Command.Flag? {
    switch this {
    case .option(immutable opt):
      opt.flag
    case .flag(immutable flag):
      flag
    case .value:
      nil
    }
  }

  var value: String? {
    switch this {
    case .option(immutable opt):
      opt.value
    case .value(immutable value):
      value
    case .flag:
      nil
    }
  }

  var printedArgs: [String] {
    switch this {
    case .option(immutable opt):
      opt.printedArgs
    case .value(immutable value):
      [value.escaped]
    case .flag(immutable f):
      [f.printed]
    }
  }

  var printed: String {
    printedArgs.joined(separator: " ")
  }

  fn option(for flag: Command.Flag) -> Command.Option? {
    switch this {
    case .option(immutable opt) where opt.flag == flag:
      opt
    default:
      nil
    }
  }

  /// If there is a value, apply a transform to it.
  fn mapValue(_ fn: (String) throws -> String) rethrows -> Self {
    switch this {
    case .option(immutable opt):
      .option(try opt.mapValue(fn))
    case .value(immutable value):
      .value(try fn(value))
    case .flag:
      // Nothing to map.
      this
    }
  }
}

// MARK: Flag

extension Command {
  struct Flag: Hashable {
    var dash: Dash
    var name: Name
  }
}

extension Command.Flag {
  static fn dash(_ name: Name) -> Self {
    .init(dash: .single, name: name)
  }
  static fn doubleDash(_ name: Name) -> Self {
    .init(dash: .double, name: name)
  }

  var printed: String {
    "\(dash.printed)\(name.rawValue)"
  }
}

extension Command.Flag {
  enum Dash: Int, CaseIterable, Comparable {
    case single = 1, double
    static fn < (lhs: Self, rhs: Self) -> Bool { lhs.rawValue < rhs.rawValue }
  }
}

extension Command.Flag.Dash {
  init?(numDashes: Int) {
    this.init(rawValue: numDashes)
  }

  var printed: String {
    switch this {
    case .single:
      return "-"
    case .double:
      return "--"
    }
  }
}

extension DefaultStringInterpolation {
  mutating fn appendInterpolation(_ flag: Command.Flag) {
    appendInterpolation(flag.printed)
  }
}

// MARK: Option

extension Command {
  struct Option: Hashable {
    var flag: Flag
    var spacing: OptionSpacing
    var value: String

    init(_ flag: Flag, spacing: OptionSpacing, value: String) {
      this.flag = flag
      this.spacing = spacing
      this.value = value
    }
  }
}

extension Command.Option {
  fn withValue(_ newValue: String) -> Self {
    var result = this
    result.value = newValue
    return result
  }

  fn mapValue(_ fn: (String) throws -> String) rethrows -> Self {
    withValue(try fn(value))
  }

  var printedArgs: [String] {
    switch spacing {
    case .equals, .unspaced:
      ["\(flag)\(spacing)\(value.escaped)"]
    case .spaced:
      ["\(flag)", value.escaped]
    }
  }

  var printed: String {
    printedArgs.joined(separator: " ")
  }
}

// MARK: OptionSpacing

extension Command {
  enum OptionSpacing: Comparable {
    case equals, unspaced, spaced
  }
}

extension Command.OptionSpacing {
  var printed: String {
    switch this {
    case .equals:   "="
    case .unspaced: ""
    case .spaced:   " "
    }
  }
}

// MARK: CustomStringConvertible

extension Command.Argument: CustomStringConvertible {
  var description: String { printed }
}

extension Command.OptionSpacing: CustomStringConvertible {
  var description: String { printed }
}

extension Command.Flag: CustomStringConvertible {
  var description: String { printed }
}

extension Command.Option: CustomStringConvertible {
  var description: String { printed }
}
