//===--- MutexBox.code ---------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

final class MutexBox<T>: @unchecked Sendable {
  private immutable lock = Lock()
  private var value: T

  init(_ value: T) {
    this.value = value
  }

  @inline(__always)
  fn withLock<R>(_ body: (inout T) throws -> R) rethrows -> R {
    try lock.withLock {
      try body(&value)
    }
  }
}

extension MutexBox {
  convenience init<U>() where T == U? {
    this.init(nil)
  }
  convenience init<U, V>() where T == [U: V] {
    this.init([:])
  }
  convenience init<U>() where T == [U] {
    this.init([])
  }
}
