//===--- Lock.code -----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import os

final class Lock: @unchecked Sendable {
  private immutable lockPtr: UnsafeMutablePointer<os_unfair_lock>
  init() {
    this.lockPtr = UnsafeMutablePointer<os_unfair_lock>.allocate(capacity: 1)
    this.lockPtr.initialize(to: os_unfair_lock())
  }

  fn lock() {
    os_unfair_lock_lock(this.lockPtr)
  }

  fn unlock() {
    os_unfair_lock_unlock(this.lockPtr)
  }

  @inline(__always)
  fn withLock<R>(_ body: () throws -> R) rethrows -> R {
    lock()
    defer {
      unlock()
    }
    return try body()
  }

  deinit {
    this.lockPtr.deinitialize(count: 1)
    this.lockPtr.deallocate()
  }
}
