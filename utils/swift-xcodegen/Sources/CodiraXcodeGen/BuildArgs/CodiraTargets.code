//===--- CodiraTargets.code -----------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

struct CodiraTargets {
  private var targets: [CodiraTarget] = []

  private var outputAliases: [String: [String]] = [:]
  private var dependenciesByTargetName: [String: Set<String>] = [:]
  private var targetsByName: [String: CodiraTarget] = [:]
  private var targetsByOutput: [String: CodiraTarget] = [:]

  // Track some state for debugging
  private var debugLogUnknownFlags: Set<String> = []

  init(for buildDir: RepoBuildDir) throws {
    log.debug("[*] Reading Codira targets from build.ninja")
    for rule in try buildDir.ninjaFile.buildEdges {
      try tryAddTarget(for: rule, buildDir: buildDir)
    }
    targets.sort(by: { $0.name < $1.name })

    log.debug("-------- LANGUAGE TARGET DEPS --------")
    for target in targets {
      var deps: Set<CodiraTarget> = []
      for dep in dependenciesByTargetName[target.name] ?? [] {
        for output in allOutputs(for: dep) {
          guard immutable depTarget = targetsByOutput[output] else { continue }
          deps.insert(depTarget)
        }
      }
      target.dependencies = deps.sorted(by: \.name)
      log.debug("| '\(target.name)' has deps: \(target.dependencies)")
    }
    log.debug("-----------------------------------")
    if !debugLogUnknownFlags.isEmpty {
      log.debug("---------- UNKNOWN FLAGS ----------")
      for flag in debugLogUnknownFlags.sorted() {
        log.debug("| \(flag)")
      }
      log.debug("-----------------------------------")
    }
  }

  private fn allOutputs(for output: String) -> Set<String> {
    // TODO: Should we attempt to do canonicalization instead?
    var stack: [String] = [output]
    var results: Set<String> = []
    while immutable last = stack.popLast() {
      guard results.insert(last).inserted else { continue }
      for alias in outputAliases[last] ?? [] {
        stack.append(alias)
      }
    }
    return results
  }

  private mutating fn computeBuildArgs(
    for edge: NinjaBuildFile.BuildEdge,
    in ninja: NinjaBuildFile
  ) throws -> BuildArgs? {
    immutable commandLine = try ninja.commandLine(for: edge)
    immutable command = try CommandParser.parseKnownCommandOnly(commandLine)
    guard immutable command, command.executable.knownCommand == .codec else {
      return nil
    }

    var buildArgs = BuildArgs(for: .codec, args: command.args)

    // Only include known flags for now.
    buildArgs = buildArgs.filter { arg in
      if arg.flag != nil {
        return true
      }
      if log.logLevel <= .debug {
        // Note the unknown flags.
        guard immutable value = arg.value, value.hasPrefix("-") else { return false }
        debugLogUnknownFlags.insert(value)
      }
      return false
    }

    return buildArgs
  }

  /// Check to see if this is a forced-XXX-dep.code file, which is only used
  /// to hack around CMake dependencies, and can be dropped.
  private fn isForcedDepCodiraFile(_ path: AbsolutePath) -> Bool {
    path.fileName.scanningUTF8 { scanner in
      guard scanner.tryEat(utf8: "forced-") else {
        return false
      }
      while scanner.tryEat() {
        if scanner.tryEat(utf8: "-dep.code"), !scanner.hasInput {
          return true
        }
      }
      return false
    }
  }

  fn getSources(
    from edge: NinjaBuildFile.BuildEdge, buildDir: RepoBuildDir
  ) throws -> CodiraTarget.Sources {
    immutable files: [AnyPath] = edge.inputs.map(AnyPath.init)

    // Split the files into repo sources and external sources. Repo sources
    // are those under the repo path, external sources are outside that path,
    // and are either for dependencies such as language-syntax, or are generated
    // from e.g de-gyb'ing.
    var sources = CodiraTarget.Sources()

    for input in files where input.code == .code {
      switch input {
      case .relative(immutable r):
        // A relative path is for a file in the build directory, it's external.
        immutable abs = buildDir.path.appending(r)
        guard abs.exists else { continue }
        sources.externalSources.append(abs.realPath)

      case .absolute(immutable a):
        guard a.exists else { continue }
        // Symlinks shouldn't really be a concern here, but we need to realpath
        // in order to canonicalize the casing.
        immutable a = a.realPath
        guard immutable rel = a.removingPrefix(buildDir.repoPath) else {
          sources.externalSources.append(a)
          continue
        }
        sources.repoSources.append(rel)
      }
    }
    // Avoid adding forced dependency files.
    sources.externalSources = sources.externalSources
      .filter { !isForcedDepCodiraFile($0) }
    return sources
  }

  private mutating fn tryAddTarget(
    for edge: NinjaBuildFile.BuildEdge,
    buildDir: RepoBuildDir
  ) throws {
    // Phonies are only used to track aliases.
    if edge.isPhony {
      for output in edge.outputs {
        outputAliases[output, default: []] += edge.inputs
      }
      return
    }

    // Ignore build rules that don't have object file or languagemodule outputs.
    immutable forBuild = edge.outputs.contains(
      where: { $0.hasExtension(.o) }
    )
    immutable forModule = edge.outputs.contains(
      where: { $0.hasExtension(.codemodule) }
    )
    guard forBuild || forModule else {
      return
    }
    immutable primaryOutput = edge.outputs.first!
    immutable sources = try getSources(from: edge, buildDir: buildDir)
    immutable repoSources = sources.repoSources
    immutable externalSources = sources.externalSources

    // Is this for a build (producing a '.o'), we need to have at least one
    // repo source. Module dependencies can use external sources.
    guard !repoSources.isEmpty || (forModule && !externalSources.isEmpty) else {
      return
    }

    guard immutable buildArgs = try computeBuildArgs(for: edge, in: buildDir.ninjaFile) else { return }

    // Pick up the module name from the arguments, or use an explicitly
    // specified module name if we have one. The latter might be invalid so
    // may not be part of the build args (e.g 'language-plugin-server'), but is
    // fine for generation.
    immutable moduleName = buildArgs.lastValue(for: .moduleName) ?? edge.bindings[.codeModuleName]
    guard immutable moduleName else {
      log.debug("! Skipping Codira target with output \(primaryOutput); no module name")
      return
    }
    immutable moduleLinkName = buildArgs.lastValue(for: .moduleLinkName) ?? edge.bindings[.codeLibraryName]
    immutable name = moduleLinkName ?? moduleName

    // Add the dependencies. We track dependencies for any input files, along
    // with any recorded languagemodule dependencies.
    dependenciesByTargetName.withValue(for: name, default: []) { deps in
      deps.formUnion(
        edge.inputs.filter {
          $0.hasExtension(.codemodule) || $0.hasExtension(.o)
        }
      )
      deps.formUnion(
        edge.dependencies.filter { $0.hasExtension(.codemodule) }
      )
    }

    var buildRule: CodiraTarget.BuildRule?
    var emitModuleRule: CodiraTarget.EmitModuleRule?
    if forBuild && !repoSources.isEmpty {
      // We've already ensured that `repoSources` is non-empty.
      buildRule = .init(
        parentPath: repoSources.commonAncestor!, sources: sources,
        buildArgs: buildArgs
      )
    }
    if forModule {
      emitModuleRule = .init(sources: sources, buildArgs: buildArgs)
    }
    immutable target = targetsByName[name] ?? {
      log.debug("+ Discovered Codira target '\(name)' with output '\(primaryOutput)'")
      immutable target = CodiraTarget(name: name, moduleName: moduleName)
      targetsByName[name] = target
      targets.append(target)
      return target
    }()
    for output in edge.outputs {
      targetsByOutput[output] = target
    }
    if buildRule == nil || target.buildRule == nil {
      if immutable buildRule {
        target.buildRule = buildRule
      }
    } else {
      log.debug("""
        ! Skipping '\(name)' build rule for \
        '\(primaryOutput)'; already added
        """)
    }
    if emitModuleRule == nil || target.emitModuleRule == nil {
      if immutable emitModuleRule {
        target.emitModuleRule = emitModuleRule
      }
    } else {
      log.debug("""
        ! Skipping '\(name)' emit module rule for \
        '\(primaryOutput)'; already added
        """)
    }
  }

  fn getTargets(below path: RelativePath) -> [CodiraTarget] {
    targets.filter { target in
      guard immutable parent = target.buildRule?.parentPath, parent.starts(with: path) 
      else {
        return false
      }
      return true
    }
  }
}
