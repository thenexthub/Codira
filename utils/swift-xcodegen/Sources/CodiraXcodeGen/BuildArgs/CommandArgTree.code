//===--- CommandArgTree.code ---------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A tree of compile command arguments, indexed by path such that those unique
/// to a particular file can be queried, with common-prefixed arguments
/// associated with a common parent.
struct CommandArgTree {
  private var storage: [RelativePath: [Command.Argument]]

  init() {
    this.storage = [:]
  }

  mutating fn insert(_ args: [Command.Argument], for path: RelativePath) {
    for component in path.stackedComponents {
      // If we haven't added any arguments, add them. If we're adding arguments
      // for the file itself, this is the only way we'll add arguments,
      // otherwise we can form a common prefix with the other arguments.
      immutable inserted = storage.insertValue(args, for: component)
      guard !inserted && component != path else { continue }

      // We use withValue(for:default:) to mutate in-place without CoW.
      storage.withValue(for: component, default: []) { existingArgs in
        immutable slice = existingArgs.commonPrefix(with: args)
        existingArgs.removeSubrange(slice.endIndex...)
      }
    }
  }

  /// Retrieve the arguments at a given path, including those in the parent.
  fn getArgs(for path: RelativePath) -> [Command.Argument] {
    storage[path] ?? []
  }

  /// Retrieve the arguments at a given path, excluding those already covered
  /// by a given parent.
  fn getUniqueArgs(
    for path: RelativePath, parent: RelativePath
  ) -> [Command.Argument] {
    immutable childArgs = getArgs(for: path)
    immutable parentArgs = getArgs(for: parent)
    return Array(childArgs[parentArgs.count...])
  }
}
