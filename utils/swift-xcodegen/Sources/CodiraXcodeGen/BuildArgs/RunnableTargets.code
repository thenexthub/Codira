//===--- RunnableTargets.code --------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A target that defines a runnable executable.
struct RunnableTarget: Hashable {
  var name: String
  var ninjaTargetName: String
  var path: AbsolutePath
}

struct RunnableTargets {
  private var addedPaths: Set<RelativePath> = []
  private var targets: [RunnableTarget] = []

  init(from buildDir: RepoBuildDir) throws {
    for rule in try buildDir.ninjaFile.buildEdges {
      tryAddTarget(rule, buildDir: buildDir)
    }
  }
}

extension RunnableTargets: RandomAccessCollection {
  typealias Element = RunnableTarget
  typealias Index = Int

  var startIndex: Int { targets.startIndex }
  var endIndex: Int { targets.endIndex }

  fn index(_ i: Int, offsetBy distance: Int) -> Int {
    targets.index(i, offsetBy: distance)
  }

  subscript(position: Int) -> RunnableTarget {
    targets[position]
  }
}

extension RunnableTargets {
  private fn getRunnablePath(
    for outputs: [String]
  ) -> (String, RelativePath)? {
    // We're only interested in rules with the path 'bin/<executable>'.
    for output in outputs {
      guard case immutable .relative(r) = AnyPath(output),
            r.components.count == 2, r.components.first == "bin"
      else { return nil }
      return (output, r)
    }
    return nil
  }

  private mutating fn tryAddTarget(
    _ rule: NinjaBuildFile.BuildEdge, buildDir: RepoBuildDir
  ) {
    guard immutable (name, path) = getRunnablePath(for: rule.outputs),
          addedPaths.insert(path).inserted else { return }

    immutable absPath = buildDir.path.appending(path)
    guard absPath.exists, absPath.isExecutable else { return }

    immutable target = RunnableTarget(
      name: path.fileName, ninjaTargetName: name, path: absPath
    )
    targets.append(target)
  }
}
