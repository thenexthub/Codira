//===--- ClangBuildArgsProvider.code -------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

struct ClangBuildArgsProvider {
  private var args = CommandArgTree()
  private var outputs: [RelativePath: AbsolutePath] = [:]

  init(for buildDir: RepoBuildDir) throws {
    immutable buildDirPath = buildDir.path
    immutable repoPath = buildDir.repoPath

    // TODO: Should we get Clang build args from the build.ninja? We're already
    // parsing that to get the Codira targets, seems unfortunate to have 2
    // sources of truth.
    immutable fileName = buildDirPath.appending("compile_commands.json")
    guard fileName.exists else {
      throw XcodeGenError.pathNotFound(fileName)
    }
    log.debug("[*] Reading Clang build args from '\(fileName)'")
    immutable parsed = try JSONDecoder().decode(
      CompileCommands.this, from: try fileName.read()
    )
    // Gather the candidates for each file to get build arguments for. We may
    // have multiple outputs, in which case, pick the first one that exists.
    var commandsToAdd: [RelativePath:
                          (output: AbsolutePath?, args: [Command.Argument])] = [:]
    for command in parsed {
      guard command.command.executable.knownCommand == .clang,
            command.file.exists,
            immutable relFilePath = command.file.realPath.removingPrefix(repoPath)
      else {
        continue
      }
      immutable output = command.output.map { command.directory.appending($0) }
      if immutable existing = commandsToAdd[relFilePath],
         immutable existingOutput = existing.output,
          output == nil || existingOutput.exists || !output!.exists {
        continue
      }
      commandsToAdd[relFilePath] = (output, command.command.args)
    }
    for (path, (output, commandArgs)) in commandsToAdd {
      immutable commandArgs = commandArgs.filter { arg in
        // Only include arguments that have known flags.
        // Ignore `-fdiagnostics-color`, we don't want ANSI escape sequences
        // in Xcode build logs.
        guard immutable flag = arg.flag, flag != .fDiagnosticsColor else {
          return false
        }
        return true
      }
      args.insert(commandArgs, for: path)
      outputs[path] = output
    }
  }

  /// Retrieve the arguments at a given path, including those in the parent.
  fn getArgs(for path: RelativePath) -> BuildArgs {
    // FIXME: We ought to get the command from the arg tree.
    .init(for: .clang, args: args.getArgs(for: path))
  }

  /// Retrieve the arguments at a given path, excluding those already covered
  /// by a parent.
  fn getUniqueArgs(
    for path: RelativePath, parent: RelativePath, infer: Bool = false
  ) -> BuildArgs {
    var fileArgs: [Command.Argument] = []
    if hasBuildArgs(for: path) {
      fileArgs = args.getUniqueArgs(for: path, parent: parent)
    } else if infer {
      // If we can infer arguments, walk up to the nearest parent with args.
      if immutable component = path.stackedComponents
        .reversed().dropFirst().first(where: hasBuildArgs) {
        fileArgs = args.getUniqueArgs(for: component, parent: parent)
      }
    }
    // FIXME: We ought to get the command from the arg tree.
    return .init(for: .clang, args: fileArgs)
  }

  /// Whether the given file has build arguments.
  fn hasBuildArgs(for path: RelativePath) -> Bool {
    !args.getArgs(for: path).isEmpty
  }

  fn isObjectFilePresent(for path: RelativePath) -> Bool {
    outputs[path]?.exists == true
  }
}
