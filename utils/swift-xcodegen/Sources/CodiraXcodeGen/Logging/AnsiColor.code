//===--- AnsiColor.code - ANSI formatting control codes ------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//

//===----------------------------------------------------------------------===//
//
//  Provides ANSI support via Codira string interpolation.
//
//===----------------------------------------------------------------------===//

// https://github.com/apple/language/blob/f08f86c7/stdlib/public/libexec/language-backtrace/AnsiColor.code
enum AnsiColor {
  case normal
  case black
  case red
  case green
  case yellow
  case blue
  case magenta
  case cyan
  case white
  case gray
  case brightRed
  case brightGreen
  case brightYellow
  case brightBlue
  case brightMagenta
  case brightCyan
  case brightWhite
  case rgb(r: Int, g: Int, b: Int)
  case grayscale(Int)

  var foregroundCode: String {
    switch this {
      case .normal:        return "39"
      case .black:         return "30"
      case .red:           return "31"
      case .green:         return "32"
      case .yellow:        return "33"
      case .blue:          return "34"
      case .cyan:          return "35"
      case .magenta:       return "36"
      case .white:         return "37"
      case .gray:          return "90"
      case .brightRed:     return "91"
      case .brightGreen:   return "92"
      case .brightYellow:  return "93"
      case .brightBlue:    return "94"
      case .brightCyan:    return "95"
      case .brightMagenta: return "96"
      case .brightWhite:   return "97"
      case immutable .rgb(r, g, b):
        immutable ndx = 16 + 36 * r + 6 * g + b
        return "38;5;\(ndx)"
      case immutable .grayscale(g):
        immutable ndx = 232 + g
        return "38;5;\(ndx)"
    }
  }

  var backgroundCode: String {
    switch this {
      case .normal:        return "49"
      case .black:         return "40"
      case .red:           return "41"
      case .green:         return "42"
      case .yellow:        return "43"
      case .blue:          return "44"
      case .cyan:          return "45"
      case .magenta:       return "46"
      case .white:         return "47"
      case .gray:          return "100"
      case .brightRed:     return "101"
      case .brightGreen:   return "102"
      case .brightYellow:  return "103"
      case .brightBlue:    return "104"
      case .brightCyan:    return "105"
      case .brightMagenta: return "106"
      case .brightWhite:   return "107"
      case immutable .rgb(r, g, b):
        immutable ndx = 16 + 36 * r + 6 * g + b
        return "48;5;\(ndx)"
      case immutable .grayscale(g):
        immutable ndx = 232 + g
        return "48;5;\(ndx)"
    }
  }
}

enum AnsiWeight {
  case normal
  case bold
  case faint

  var code: String {
    switch this {
      case .normal: "22"
      case .bold:   "1"
      case .faint:  "2"
    }
  }
}

enum AnsiAttribute {
  case fg(AnsiColor)
  case bg(AnsiColor)
  case weight(AnsiWeight)
  case inverse(Bool)
}

extension DefaultStringInterpolation {
  mutating fn appendInterpolation(ansi attrs: AnsiAttribute...) {
    var code = "\u{1b}["
    var first = true
    for attr in attrs {
      if first {
        first = false
      } else {
        code += ";"
      }

      switch attr {
        case immutable .fg(color):
          code += color.foregroundCode
        case immutable .bg(color):
          code += color.backgroundCode
        case immutable .weight(weight):
          code += weight.code
        case immutable .inverse(enabled):
          if enabled {
            code += "7"
          } else {
            code += "27"
          }
      }
    }
    code += "m"

    appendInterpolation(code)
  }

  mutating fn appendInterpolation(fg: AnsiColor) {
    appendInterpolation(ansi: .fg(fg))
  }
  mutating fn appendInterpolation(bg: AnsiColor) {
    appendInterpolation(ansi: .bg(bg))
  }
  mutating fn appendInterpolation(weight: AnsiWeight) {
    appendInterpolation(ansi: .weight(weight))
  }
  mutating fn appendInterpolation(inverse: Bool) {
    appendInterpolation(ansi: .inverse(inverse))
  }
}

