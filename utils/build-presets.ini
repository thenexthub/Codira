#===--- build-presets.ini - Option presets for building Codira --------------===#
#
## This source file is part of the Codira.org open source project
##
## Copyright (c) 2014 - 2017 Apple Inc. and the Codira project authors
## Licensed under Apache License v2.0 with Runtime Library Exception
##
## See https://language.org/LICENSE.txt for license information
## See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
#
#===------------------------------------------------------------------------===#

#===------------------------------------------------------------------------===#
# Buildbots for Darwin OSes
#===------------------------------------------------------------------------===#
[preset: mixin_buildbot_install_components]
language-install-components=back-deployment;compiler;clang-builtin-headers;libexec;stdlib;sdk-overlay;static-mirror-lib;editor-integration;tools;toolchain-tools;testsuite-tools;sourcekit-xpc-service;sourcekit-inproc;language-remote-mirror;language-remote-mirror-headers

[preset: mixin_buildbot_install_components_with_clang]

language-install-components=autolink-driver;back-deployment;compiler;clang-resource-dir-symlink;libexec;stdlib;sdk-overlay;static-mirror-lib;toolchain-tools;license;sourcekit-xpc-service;sourcekit-inproc;language-remote-mirror;language-remote-mirror-headers
toolchain-install-components=toolchain-ar;toolchain-nm;toolchain-ranlib;toolchain-cov;toolchain-profdata;toolchain-objdump;toolchain-objcopy;toolchain-symbolizer;IndexStore;clang;clang-resource-headers;builtins;runtimes;clangd;libclang;dsymutil;LTO;clang-features-file;lld

[preset: mixin_buildbot_trunk_base]
# Build standard library and SDK overlay for iOS device and simulator.
ios
tvos
watchos
test
validation-test
lit-args=-v
compiler-vendor=apple

verbose-build
build-ninja

build-language-stdlib-unittest-extra

build-embedded-stdlib-cross-compiling

install-toolchain
install-static-linux-config
install-language
install-languagesyntax

skip-test-cmark

# Path to the root of the installation filesystem.
install-destdir=%(install_destdir)s

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

# If someone uses this for incremental builds, force reconfiguration.
reconfigure

[preset: buildbot,tools=RA,stdlib=RD,test=no]
mixin-preset=
    mixin_buildbot_trunk_base
    mixin_buildbot_install_components

# Build Release without debug info, because it is faster to build.
release
assertions

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=false

# Disable osx tests.
skip-test-osx

# Disable non-x86.
skip-build-ios
skip-test-ios
skip-build-tvos
skip-test-tvos
skip-build-watchos
skip-test-watchos
skip-build-xros
skip-test-xros
stdlib-deployment-targets=macosx-x86_64
language-primary-variant-sdk=OSX
language-primary-variant-arch=x86_64

[preset: mixin_buildbot_tools_RA_stdlib_RDA]
mixin-preset=
    mixin_buildbot_trunk_base
    mixin_buildbot_install_components

# Build Release without debug info, because it is faster to build.
release
assertions
# Also run tests in optimized modes.
test-optimized
test-optimize-for-size

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=true

enable-array-cow-checks

# This is a release non-incremental build. Run sil-verify-all.
sil-verify-all

[preset: mixin_buildbot_tools_RDA_stdlib_RDA]
mixin-preset=
    mixin_buildbot_trunk_base
    mixin_buildbot_install_components

# Build Release without debug info, because it is faster to build.
release-debuginfo
assertions
# Also run tests in optimized modes.
test-optimized

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=true

enable-array-cow-checks

# This is a release non-incremental build. Run sil-verify-all.
sil-verify-all

[preset: mixin_buildbot_tools_RA_stdlib_RD]
mixin-preset=
    mixin_buildbot_trunk_base
    mixin_buildbot_install_components

# Build Release without debug info, because it is faster to build.
release
assertions
# Also run tests in optimized modes.
test-optimized
test-optimize-for-size

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=false

[preset: mixin_buildbot_tools_R_stdlib_RD]
mixin-preset=
    mixin_buildbot_trunk_base
    mixin_buildbot_install_components

# Build Release without debug info, because it is faster to build.
release
no-assertions

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=false

[preset: mixin_buildbot_tools_RA_stdlib_DA]
mixin-preset=
    mixin_buildbot_trunk_base
    mixin_buildbot_install_components

# Build Release without debug info, because it is faster to build.
release
assertions

language-stdlib-build-type=Debug
language-stdlib-enable-assertions=true

enable-array-cow-checks


[preset: buildbot,tools=RA,stdlib=DA]
mixin-preset=
    mixin_buildbot_tools_RA_stdlib_DA

# Don't run host tests for iOS, tvOS and watchOS platforms to make the build
# faster.
skip-test-ios-host
skip-test-tvos-host
skip-test-watchos-host
skip-test-xros-host


[preset: buildbot,tools=RA,stdlib=DA,test=non_executable]
mixin-preset=
     mixin_buildbot_tools_RA_stdlib_DA

only-non-executable-test

skip-test-osx
skip-test-ios-simulator
skip-test-tvos-simulator
skip-test-watchos-simulator
skip-test-xros-simulator

[preset: buildbot,tools=RA,stdlib=RD]
mixin-preset=
    mixin_buildbot_tools_RA_stdlib_RD

# Don't run host tests for iOS, tvOS and watchOS platforms to make the build
# faster.
skip-test-ios-host
skip-test-tvos-host
skip-test-watchos-host
skip-test-xros-host

[preset: buildbot,tools=RA,stdlib=RD,test=non_executable]
mixin-preset=
     mixin_buildbot_tools_RA_stdlib_RD

only-non-executable-test

skip-test-osx
skip-test-ios-simulator
skip-test-tvos-simulator
skip-test-watchos-simulator
skip-test-xros-simulator

[preset: buildbot,tools=R,stdlib=RD]
mixin-preset=
    mixin_buildbot_tools_R_stdlib_RD

# Don't run host tests for iOS, tvOS and watchOS platforms to make the build
# faster.
skip-test-ios-host
skip-test-tvos-host
skip-test-watchos-host
skip-test-xros-host
check-incremental-compilation

[preset: buildbot,tools=R,stdlib=RD,test=non_executable]
mixin-preset=
     mixin_buildbot_tools_R_stdlib_RD

only-non-executable-test

skip-test-osx
skip-test-ios-simulator
skip-test-tvos-simulator
skip-test-watchos-simulator
skip-test-xros-simulator

[preset: buildbot,tools=RA,stdlib=RDA]
mixin-preset=
    mixin_buildbot_tools_RA_stdlib_RDA

# Don't run host tests for iOS, tvOS and watchOS platforms to make the build
# faster.
skip-test-ios-host
skip-test-tvos-host
skip-test-watchos-host
skip-test-xros-host

[preset: buildbot,tools=RA,stdlib=RDA,test=non_executable]
mixin-preset=
     mixin_buildbot_tools_RA_stdlib_RDA

only-non-executable-test

skip-test-osx
skip-test-ios-simulator
skip-test-tvos-simulator
skip-test-watchos-simulator
skip-test-xros-simulator

[preset: buildbot,tools=RA,stdlib=RDA,long_test]
mixin-preset=
    mixin_buildbot_tools_RA_stdlib_RDA

test=0
validation-test=0
long-test=1
stress-test=1
test-optimized=0


[preset: buildbot,tools=RA-flto,stdlib=RDA]
mixin-preset=
    mixin_buildbot_tools_RA_stdlib_RDA

lto

# Don't run host tests for iOS, tvOS and watchOS platforms to make the build
# faster.
skip-test-ios-host
skip-test-tvos-host
skip-test-watchos-host
skip-test-xros-host

[preset: buildbot,tools=RDA-flto,stdlib=RDA]
mixin-preset=
    mixin_buildbot_tools_RDA_stdlib_RDA

lto

# Don't run host tests for iOS, tvOS and watchOS platforms to make the build
# faster.
skip-test-ios-host
skip-test-tvos-host
skip-test-watchos-host
skip-test-xros-host

# This is a mixin preset which builds and smoke-tests lldb.
[preset: lldb-smoketest,tools=RA]
# Build libcxx for tests
libcxx
# Build LLDB
lldb

# Use the system debugserver to run the lldb language tests
lldb-use-system-debugserver
lldb-build-type=Release
lldb-test-language-only
lldb-assertions

[preset: lldb-pull-request]
# Build libcxx for tests
libcxx
lldb
lit-args=-v

lldb-use-system-debugserver
release-debuginfo
test
no-language-stdlib-assertions
skip-build-benchmarks
skip-test-language
skip-test-cmark

#===------------------------------------------------------------------------===#
# Incremental buildbots for Darwin OSes
#===------------------------------------------------------------------------===#

[preset: buildbot_incremental_base]
test
validation-test
lit-args=-v --time-tests

# Set the vendor to apple
compiler-vendor=apple

# On buildbots, always force a reconfiguration to make sure we pick up changes
# in the build-script and build-presets.ini.
reconfigure

# We want to always perform a verbose build
verbose-build

# Build ninja while we are at it
build-ninja

skip-test-cmark

build-embedded-stdlib-cross-compiling

[preset: buildbot_incremental_base_all_platforms]
mixin-preset=buildbot_incremental_base

# Build standard library and SDK overlay for iOS device and simulator.

ios
tvos
watchos

[preset: buildbot_incremental,tools=RA,stdlib=RA]
mixin-preset=
    buildbot_incremental_base_all_platforms
    mixin_buildbot_install_components_with_clang

build-subdir=buildbot_incremental

# Build Release without debug info, because it is faster to build.
release
assertions

enable-array-cow-checks

build-language-stdlib-unittest-extra

libcxx

# Build llbuild & languagepm here
llbuild
languagepm
language-driver
indexstore-db
sourcekit-lsp
# Failing to build in CI: rdar://78408440
# language-inspect
languagesyntax
languageformat
language-testing
language-testing-macros

skstresstester

# Build Playground support
playgroundsupport
skip-test-playgroundsupport

# Only run OS X tests to make the build cycle faster.
# We still build the iOS standard library though -- it is free given the
# parallelism.
skip-test-ios
skip-test-tvos
skip-test-watchos
skip-test-xros

install-toolchain
install-static-linux-config
install-language
install-llbuild
install-languagepm
install-language-driver
install-languagesyntax
install-languageformat
install-language-testing
install-language-testing-macros

[preset: buildbot_incremental,tools=RA,stdlib=RA,apple_silicon]
mixin-preset=buildbot_incremental,tools=RA,stdlib=RA

# This preset is used by CI to test language-corelibs-xctest.
[preset: buildbot_incremental,tools=RA,stdlib=RA,XCTest]
# We don't use buildbot_incremental_base_all_platforms because we don't need to
# build for iOS/tvOS.
mixin-preset=buildbot_incremental_base

# Build and test XCTest. On Linux, the build script is aware of the dependency
# on Foundation, so that is built as well. On OS X, Foundation is built as part
# of the XCTest Xcode project.
xctest
language-testing
language-testing-macros

build-language-stdlib-unittest-extra

# This preset is meant to test XCTest, not Codira or Foundation. We don't
# want stochastic failures in those test suites to prevent XCTest tests from
# being run.
skip-test-language
skip-test-libdispatch
skip-test-foundation

# This preset may be used by language-corelibs-xctest contributors when building
# locally. It takes less time than the CI preset, but is less reliable at
# clearing out cached build products.
[preset: corelibs-xctest]
release
assertions
xctest
language-testing
language-testing-macros
test

skip-test-cmark
skip-test-language
skip-test-foundation
skip-build-benchmarks

[preset: buildbot_incremental_asan,tools=RDA,stdlib=RDA]
mixin-preset=buildbot_incremental_base_all_platforms

build-subdir=buildbot_incremental_asan

# Build Release with debug info, so that we can symbolicate backtraces.
release-debuginfo
assertions

build-language-stdlib-unittest-extra

# FIXME: Codira/ASan does not support iOS yet.
skip-build-ios
skip-test-ios

# FIXME: Codira/ASan does not support tvos yet.
skip-build-tvos
skip-test-tvos

# FIXME: Codira/ASan does not support watchos yet.
skip-build-watchos
skip-test-watchos

# FIXME: Codira/ASan does not support xros yet.
skip-build-xros
skip-test-xros

enable-asan

[preset: buildbot_incremental_tsan,tools=RDA,stdlib=RDA]
mixin-preset=buildbot_incremental_base_all_platforms

build-subdir=buildbot_incremental_tsan

# Build Release with debug info, so that we can symbolicate backtraces.
release-debuginfo
assertions
enable-tsan

build-language-stdlib-unittest-extra

skip-build-ios
skip-test-ios
skip-build-tvos
skip-test-tvos
skip-build-watchos
skip-test-watchos
skip-build-xros
skip-test-xros

[preset: buildbot_incremental_asan_ubsan,tools=RDA,stdlib=RDA]
mixin-preset=buildbot_incremental_base_all_platforms

build-subdir=buildbot_incremental_asan_ubsan

# Build Release with debug info, so that we can symbolicate backtraces.
release-debuginfo
assertions

build-language-stdlib-unittest-extra

# FIXME: Codira/UBSan does not support mac os x yet.
skip-build-osx
skip-test-osx

# FIXME: Codira/ASan does not support iOS yet.
skip-build-ios
skip-test-ios

# FIXME: Codira/ASan does not support tvos yet.
skip-build-tvos
skip-test-tvos

# FIXME: Codira/ASan does not support watchos yet.
skip-build-watchos
skip-test-watchos

# FIXME: Codira/ASan does not support xros yet.
skip-build-xros
skip-test-xros

enable-asan
enable-ubsan

[preset: buildbot_incremental,lldb_asan_ubsan]
mixin-preset=buildbot_incremental_base

build-subdir=buildbot_incremental_lldb_asan_ubsan

# Standalone tests require newly built libcxx
libcxx
# Build a sanitized lldb. Don't build a sanitized clang/language.
lldb
lldb-extra-cmake-args=-DTOOLCHAIN_USE_SANITIZER=Address;Undefined
lldb-use-system-debugserver

# Build Release with debug info, so that we can symbolicate backtraces.
release-debuginfo
assertions

# Disable non-x86 building/testing.
skip-build-ios
skip-test-ios
skip-build-tvos
skip-test-tvos
skip-build-watchos
skip-test-watchos
skip-build-xros
skip-test-xros
stdlib-deployment-targets=macosx-x86_64
language-primary-variant-sdk=OSX
language-primary-variant-arch=x86_64
skip-test-language
skip-test-languagepm
skip-test-language-driver
skip-test-llbuild
skip-test-playgroundsupport
skip-test-languagesyntax
skip-test-skstresstester
indexstore-db=0
sourcekit-lsp=0

[preset: buildbot_incremental_asan,tools=DA,stdlib=RDA]
mixin-preset=buildbot_incremental_base_all_platforms

build-subdir=buildbot_incremental_asan_debug

# Build Release with debug info, so that we can symbolicate backtraces.
assertions

build-language-stdlib-unittest-extra

# FIXME: Codira/ASan does not support iOS yet.
skip-build-ios
skip-test-ios

# FIXME: Codira/ASan does not support tvos yet.
skip-build-tvos
skip-test-tvos

# FIXME: Codira/ASan does not support watchos yet.
skip-build-watchos
skip-test-watchos

# FIXME: Codira/ASan does not support xros yet.
skip-build-xros
skip-test-xros

enable-asan

language-stdlib-build-type=RelWithDebInfo

# Don't do bootstrapping to speed up the build
# TODO: use bootstrapping=hosttools


[preset: buildbot_incremental,tools=RA,stdlib=RD,smoketest=macosx]
mixin-preset=
    buildbot_incremental_base
    lldb-smoketest,tools=RA
    mixin_buildbot_install_components_with_clang
build-subdir=buildbot_incremental

# We build release+asserts.
release
assertions

toolchain-targets-to-build=X86;ARM;AArch64;PowerPC;RISCV;AVR

libcxx
llbuild
languagepm
languagesyntax
languageformat
language-driver
indexstore-db
sourcekit-lsp
language-testing
language-testing-macros
# Failing to build in CI: rdar://78408440
# language-inspect
install-toolchain
install-static-linux-config
install-language
install-llbuild
install-languagepm
install-languagesyntax
install-language-driver
install-languageformat
install-language-testing
install-language-testing-macros

# We need to build the unittest extras so we can test
build-language-stdlib-unittest-extra

# Make sure our stdlib is RA.
language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=true

# Disable non-x86 building/testing.
skip-build-ios
skip-test-ios
skip-build-tvos
skip-test-tvos
skip-build-watchos
skip-test-watchos
skip-build-xros
skip-test-xros
stdlib-deployment-targets=macosx-x86_64
language-primary-variant-sdk=OSX
language-primary-variant-arch=x86_64

# Don't build the benchmarks
skip-build-benchmarks

# Skip playground tests
skip-test-playgroundsupport

# Skip downstream project tests
skip-test-languagesyntax
skip-test-indexstore-db
skip-test-sourcekit-lsp
skip-test-languagepm
skip-test-llbuild

enable-new-runtime-build

# Escalate certain C++ warnings to errors for Codira.
extra-language-cmake-options=
   -DCMAKE_CXX_FLAGS="-Werror=unused"

[preset: buildbot_incremental,tools=RA,stdlib=RD,smoketest=macosx,flto]
mixin-preset=buildbot_incremental,tools=RA,stdlib=RD,smoketest=macosx
build-subdir=buildbot_incremental

lto

[preset: ncgenerics,smoketest=macosx]
mixin-preset=buildbot_incremental,tools=RA,stdlib=RD,smoketest=macosx
build-subdir=buildbot_incremental

[preset: buildbot_incremental,tools=RA,toolchain-only]
build-subdir=buildbot_incremental_toolchainonly

# Build Release without debug info, because it is faster to build.
release-debug
assertions
test=0
lit-args=-v

compiler-vendor=apple

toolchain-include-tests
reconfigure
verbose-build
build-ninja

# TODO: remove when we will transition from TOOLCHAIN_TOOL_COMPILER_RT_BUILD
# to TOOLCHAIN_USE_RUNTIMES to build compiler-rt (#60993), so we can leverage
# the value for SANITIZER_MIN_OSX_VERSION set in cmake_product.py
extra-cmake-options=
  -DCLANG_COMPILER_RT_CMAKE_ARGS:STRING="-DSANITIZER_MIN_OSX_VERSION:STRING=13.0"

# Do not build language or cmark
skip-build-language
skip-build-cmark

[preset: buildbot_incremental_lldb]
lldb
release
test

lit-args=-v --time-tests
skip-build-benchmarks
no-language-stdlib-assertions
lldb-use-system-debugserver

skip-test-language
skip-test-cmark



#===------------------------------------------------------------------------===#
# A setting to run a buildbot that passes extra language args when compiling
# modules that match regexp.
#
# This is currently used to run non-default pass orderings to stress the
# optimizer. See utils/pass-pipeline.
#===------------------------------------------------------------------------===#

[preset: buildbot_incremental_extra_language_args,tools=RA,stdlib=RD]
build-subdir=buildbot_incremental_extra_language_args
# Build standard library and SDK overlay for iOS device and simulator.
test
validation-test
extra-language-args=%(extra_language_args)s
release
assertions
compiler-vendor=apple

# On buildbots, always force a reconfiguration to make sure we pick up changes
# in the build-script and build-presets.ini.
reconfigure

verbose-build
build-ninja

build-language-stdlib-unittest-extra

skip-build-ios
skip-test-ios
skip-build-lldb

sil-verify-all

#===------------------------------------------------------------------------===#
# Convenience aliases
#
# Do not use on buildbots!
#===------------------------------------------------------------------------===#

[preset: buildbot_incremental]
mixin-preset=buildbot_incremental,tools=RA,stdlib=RA

[preset: asan]
mixin-preset=buildbot_incremental_asan,tools=RDA,stdlib=RDA

#===------------------------------------------------------------------------===#
# Special Runtime Builders
#===------------------------------------------------------------------------===#

[preset: buildbot_incremental_leaks]
compiler-vendor=apple
# Disable ios. These builders are x86 only.
skip-ios
skip-tvos
skip-watchos
# Disable x86 testing. skip-ios disables testing of ios as well.
skip-test-osx

# Always reconfigure so we pick up changes in the build-script and
# build-presets.ini.
reconfigure
verbose-build
build-ninja
build-language-stdlib-unittest-extra
language-runtime-enable-leak-checker

[preset: buildbot_incremental_leaks,tools=RA,stdlib=R]
mixin-preset=buildbot_incremental_leaks
build-subdir=buildbot_incremental_leaks_RA_R

# Build release+asserts
release
assertions

# We want our stdlib to not have assertions.
language-stdlib-enable-assertions=false

[preset: buildbot_incremental_leaks,tools=RA,stdlib=RA]
mixin-preset=buildbot_incremental_leaks
build-subdir=buildbot_incremental_leaks_RA_RA

# Build release+asserts
release
assertions

#===------------------------------------------------------------------------===#
# Package Builders
#===------------------------------------------------------------------------===#

# A mixin that enables 'lightweight' assertions that don't slow down the
# compiler significantly.
[preset: mixin_lightweight_assertions]
assertions

# FIXME: This should be:
# no-assertions
# language-assertions
# ... but our tests are expecting assertions to be either on or off everywhere.

# AST verifier slows down the compiler significantly.
language-enable-ast-verifier=0

[preset: mixin_lightweight_assertions,no-stdlib-asserts]
mixin-preset=
    mixin_lightweight_assertions

no-language-stdlib-assertions

#===------------------------------------------------------------------------===#
# Linux Builders
#===------------------------------------------------------------------------===#
[preset: mixin_linux_install_components_with_clang]

language-install-components=autolink-driver;compiler;clang-resource-dir-symlink;libexec;stdlib;language-remote-mirror;sdk-overlay;static-mirror-lib;toolchain-tools;license;sourcekit-inproc
toolchain-install-components=toolchain-ar;toolchain-ranlib;toolchain-cov;toolchain-profdata;toolchain-objdump;toolchain-objcopy;toolchain-symbolizer;IndexStore;clang;clang-resource-headers;builtins;runtimes;clangd;libclang;lld;LTO;clang-features-file

[preset: mixin_linux_installation]
mixin-preset=
    mixin_linux_install_components_with_clang

llbuild
languagepm
language-driver
language-testing
language-testing-macros
xctest
languagedocc
languageformat
wasmkit

build-ninja
install-toolchain
install-static-linux-config
install-language
install-lldb
install-llbuild
install-languagepm
install-language-driver
install-languagesyntax
install-language-testing
install-language-testing-macros
install-xctest
install-prefix=/usr
install-sourcekit-lsp
install-languageformat
install-languagedocc
install-wasmkit
build-language-static-stdlib
build-language-static-sdk-overlay
build-language-stdlib-unittest-extra
build-embedded-stdlib-cross-compiling
build-wasm-stdlib

# Executes the lit tests for the installable package that is created
# Assumes the language-integration-tests repo is checked out

test-installable-package

# Build the benchmarks against the toolchain.
toolchain-benchmarks

# Path to the root of the installation filesystem.
install-destdir=%(install_destdir)s

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

# This ensures the default module cache
# location is local to this run, allowing
# to schedule multiple builds safely
# in Linux CI bots
relocate-xdg-cache-home-under-build-subdir


[preset: buildbot_linux_base]
mixin-preset=
    mixin_linux_installation
build-subdir=buildbot_linux
lldb
release
test
validation-test
long-test
stress-test
test-optimized
foundation
libdispatch
indexstore-db
sourcekit-lsp
languagedocc
lit-args=-v --time-tests
foundation-tests-build-type=Debug

# rdar://problem/31454823
lldb-test-language-only

install-foundation
install-libdispatch
install-languageformat
reconfigure

# gcc version on amazon linux 2 is too old to configure and build tablegen.
# Use the clang that we install in the path for macros
toolchain-cmake-options=
  -DCROSS_TOOLCHAIN_FLAGS_TOOLCHAIN_NATIVE='-DCMAKE_C_COMPILER=clang;-DCMAKE_CXX_COMPILER=clang++'
  -DCLANG_DEFAULT_LINKER=gold

[preset: buildbot_linux]
mixin-preset=
    mixin_lightweight_assertions,no-stdlib-asserts
    buildbot_linux_base

skip-test-languagedocc

[preset: buildbot_linux,release_foundation_tests]
mixin-preset=buildbot_linux

foundation-tests-build-type=Release

[preset: buildbot_linux_crosscompile_wasm]
mixin-preset=buildbot_linux

toolchain-targets-to-build=X86;ARM;AArch64;WebAssembly
wasmkit
install-wasmkit
build-wasm-stdlib
# FIXME(katei): Test fails on a specific CI node.
# https://github.com/apple/language/issues/70980
skip-test-lldb

[preset: buildbot_linux,no_assertions]
mixin-preset=buildbot_linux_base

no-assertions


[preset: mixin_buildbot_linux,no_test]
skip-test-cmark
skip-test-lldb
skip-test-language
skip-test-llbuild
skip-test-languagepm
skip-test-language-driver
skip-test-xctest
skip-test-foundation
skip-test-libdispatch
skip-test-playgroundsupport
skip-test-indexstore-db
skip-test-sourcekit-lsp
skip-test-languagedocc
skip-test-wasm-stdlib
skip-test-languageformat

# Linux package with out test
[preset: buildbot_linux,no_test]
mixin-preset=
    buildbot_linux
    mixin_buildbot_linux,no_test

[preset: buildbot_linux,no_assertions,no_test]
mixin-preset=
    buildbot_linux,no_assertions
    mixin_buildbot_linux,no_test


[preset: buildbot_linux_crosscompile_android,tools=RA,stdlib=RD,build]
mixin-preset=
    mixin_lightweight_assertions,no-stdlib-asserts
    mixin_linux_install_components_with_clang
build-subdir=buildbot_linux

release
test
validation-test
long-test
stress-test
test-optimized
lit-args=-v --time-tests

build-ninja

android
android-ndk=%(ndk_path)s
android-api-level=21
build-language-stdlib-unittest-extra

# Path to the root of the installation filesystem.
install-destdir=%(install_destdir)s

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

host-test

install-prefix=/usr
install-toolchain
install-language
install-languagesyntax

skip-test-linux
skip-build-benchmarks

reconfigure

[preset: buildbot_linux_crosscompile_android,tools=RA,stdlib=RD,build,aarch64]
mixin-preset=buildbot_linux_crosscompile_android,tools=RA,stdlib=RD,build

android-arch=aarch64

[preset: buildbot_linux_crosscompile_android,tools=RA,stdlib=RD,build,x86_64]
mixin-preset=buildbot_linux_crosscompile_android,tools=RA,stdlib=RD,build

android-arch=x86_64

# Ubuntu 18.04 preset for backwards compat and future customizations.
[preset: buildbot_linux_1804]
mixin-preset=buildbot_linux

# Ubuntu 18.04 preset that skips all tests except for integration testing of the
# package.
[preset: buildbot_linux_1804,notest]
mixin-preset=
    buildbot_linux_1804
    mixin_buildbot_linux,no_test

# Ubuntu 16.10 preset for backwards compat and future customizations.
[preset: buildbot_linux_1610]
mixin-preset=buildbot_linux

# Ubuntu 16.10 preset that skips all tests except for integration testing of the
# package.
[preset: buildbot_linux_1610,notest]
mixin-preset=
    buildbot_linux_1610
    mixin_buildbot_linux,no_test

# Ubuntu 16.04 preset for backwards compat and future customizations.
[preset: buildbot_linux_1604]
mixin-preset=buildbot_linux

# Ubuntu 16.04 preset that skips all tests except for integration testing of the
# package.
[preset: buildbot_linux_1604,notest]
mixin-preset=
    buildbot_linux_1604
    mixin_buildbot_linux,no_test

# Ubuntu 15.10 preset for backwards compat and future customizations.
[preset: buildbot_linux_1510]
mixin-preset=buildbot_linux

# Ubuntu 15.10 preset that skips all tests except for integration testing of the
# package.
[preset: buildbot_linux_1510,notest]
mixin-preset=
    buildbot_linux_1510
    mixin_buildbot_linux,no_test

[preset: buildbot_linux,smoketest]
mixin-preset=
    mixin_lightweight_assertions,no-stdlib-asserts
    mixin_linux_installation
build-subdir=buildbot_linux
lldb
release
test
validation-test
foundation
libdispatch
indexstore-db
sourcekit-lsp
lit-args=-v

install-foundation
install-libdispatch
install-languageformat
reconfigure
test-optimized
skip-test-languagedocc
lldb-test-language-only
foundation-tests-build-type=Debug

# gcc version on amazon linux 2 is too old to configure and build tablegen.
# Use the clang that we install in the path for macros
toolchain-cmake-options=
  -DCROSS_TOOLCHAIN_FLAGS_TOOLCHAIN_NATIVE='-DCMAKE_C_COMPILER=clang;-DCMAKE_CXX_COMPILER=clang++'
  -DCLANG_DEFAULT_LINKER=gold

[preset: buildbot_linux_1404_no_lldb]
mixin-preset=buildbot_incremental_linux
build-subdir=buildbot_linux
release
test
validation-test
long-test
stress-test
foundation
lit-args=-v
indexstore-db=0
sourcekit-lsp=0

[preset: buildbot_linux_armv7]
release
llbuild
lldb
# Not all tests pass, currently
#test
foundation
languagepm
language-driver
language-testing
language-testing-macros
xctest

build-subdir=buildbot_linux

install-toolchain
install-static-linux-config
install-language
install-lldb
install-llbuild
install-foundation
install-languagepm
install-language-driver
install-languagesyntax
install-language-testing
install-language-testing-macros
install-xctest
install-prefix=/usr
language-install-components=autolink-driver;compiler;clang-builtin-headers;libexec;stdlib;language-remote-mirror;sdk-overlay;dev
build-language-static-stdlib
build-language-static-sdk-overlay

skip-test-lldb

# Executes the lit tests for the installable package that is created
# Assumes the language-package-tests repo is checked out
# FIXME: Disabled until a home for the language-snapshot-tests can be found.
#test-installable-package

# Make sure we can build the benchmarks against the toolchain.
toolchain-benchmarks

# Path to the root of the installation filesystem.
install-destdir=%(install_destdir)s

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

[preset: buildbot_incremental_linux_base]
assertions
release

enable-array-cow-checks

verbose-build

test
validation-test
lit-args=-v

build-ninja
reconfigure

# This ensures the default module cache
# location is local to this run, allowing
# to schedule multiple builds safely
# in Linux CI bots
relocate-xdg-cache-home-under-build-subdir

toolchain-cmake-options=
  -DCLANG_DEFAULT_LINKER=gold

build-embedded-stdlib-cross-compiling

[preset: buildbot_incremental_linux]
mixin-preset=
    buildbot_incremental_linux_base
    mixin_linux_install_components_with_clang
build-subdir=buildbot_incremental

llbuild
languagepm
language-driver
xctest
language-testing
language-testing-macros
foundation
libdispatch
languagesyntax
languageformat
indexstore-db
sourcekit-lsp
foundation-tests-build-type=Debug

install-toolchain
install-static-linux-config
install-language
install-llbuild
install-languagepm
install-language-driver
install-languagesyntax
install-foundation
install-libdispatch
install-xctest
install-language-testing
install-language-testing-macros
install-languageformat

[preset: buildbot_incremental_linux,long_test]
mixin-preset=buildbot_incremental_linux

test=0
validation-test=0
long-test=1
stress-test=1
test-optimized=0

[preset: buildbot_incremental_linux,toolchain-only]
mixin-preset=buildbot_incremental_linux_base
build-subdir=buildbot_incremental_toolchainonly

test=0
validation-test=0
long-test=0
stress-test=0
test-optimized=0

skip-build-language
skip-build-cmark
toolchain-include-tests


[preset: buildbot_incremental_linux,tsan-libdispatch-test]
mixin-preset=buildbot_incremental_linux,toolchain-only
build-subdir=buildbot_incremental_tsan_libdispatch_test

toolchain-cmake-options=-DTOOLCHAIN_INSTALL_UTILS=ON
toolchain-install-components=all
install-toolchain
install-static-linux-config

libdispatch-cmake-options=-DENABLE_LANGUAGE=OFF
libdispatch
install-libdispatch

tsan-libdispatch-test


[preset: buildbot_incremental_linux,asan]
mixin-preset=buildbot_incremental_linux
build-subdir=buildbot_incremental_asan

enable-asan
indexstore-db=0
sourcekit-lsp=0

# This does not currently pass due to leakers in the optimizer.
[preset: buildbot_incremental_linux,lsan,tools=RDA,stdlib=RDA,test=no]
build-subdir=buildbot_incremental_lsan

language-enable-backtracing=0

# Reduce the size of the final toolchain, limit debug info
extra-cmake-options=
   -DCMAKE_C_FLAGS="-gline-tables-only"
   -DCMAKE_CXX_FLAGS="-gline-tables-only"

release-debuginfo
assertions
enable-lsan

build-ninja
reconfigure

[preset: buildbot_incremental_linux,lsan,tools=RDA,stdlib=DA,test=no]
build-subdir=buildbot_incremental_lsan

language-enable-backtracing=0

# Reduce the size of the final toolchain, limit debug info
extra-cmake-options=
   -DCMAKE_C_FLAGS="-gline-tables-only"
   -DCMAKE_CXX_FLAGS="-gline-tables-only"

toolchain-cmake-options=-DTOOLCHAIN_PARALLEL_LINK_JOBS=12
language-cmake-options=-DLANGUAGE_PARALLEL_LINK_JOBS=12

release-debuginfo
assertions
enable-lsan
debug-language-stdlib
debug-libdispatch

build-ninja
reconfigure

[preset: buildbot_incremental_linux_1404]
mixin-preset=buildbot_incremental_linux
indexstore-db=0
sourcekit-lsp=0

[preset: buildbot_incremental_linux_1404,long_test]
mixin-preset=buildbot_incremental_linux,long_test
indexstore-db=0
sourcekit-lsp=0

# TODO: This does not build stdlib for wasm32 for now.
# Enable stdlib cross-compile after build-script will support it.
[preset: buildbot_incremental_linux_crosscompile_wasm]
mixin-preset=buildbot_linux
toolchain-targets-to-build=X86;ARM;AArch64;WebAssembly

#===------------------------------------------------------------------------===#
# OS X Package Builders
#===------------------------------------------------------------------------===#
[preset: mixin_osx_package_base]
mixin-preset=mixin_buildbot_install_components_with_clang
ios
tvos
watchos
xros

lldb
llbuild
languagepm
language-driver
# Failing to build in CI: rdar://78408440
# language-inspect
languagesyntax
language-testing
language-testing-macros
languageformat
playgroundsupport
indexstore-db
sourcekit-lsp
languagedocc
wasmkit

# Build with debug info, this allows us to symbolicate crashes from
# production builds.
release-debuginfo
compiler-vendor=apple

# Cross compile for Apple Silicon
infer-cross-compile-hosts-on-darwin

lldb-use-system-debugserver
lldb-build-type=Release
build-ninja
build-language-stdlib-unittest-extra

build-embedded-stdlib-cross-compiling

# Don't build the benchmarks
skip-build-benchmarks

# When building for an Xcode toolchain, don't copy the Codira Resource/ directory
# into the LLDB.framework. LLDB.framework will be installed alongside a Codira
# compiler, so LLDB should use its resource directory directly.
# Also, to reduce the size of the final toolchain, limit debug info to be
# line-tables only.
extra-cmake-options=
   -DLLDB_FRAMEWORK_COPY_LANGUAGE_RESOURCES=0
   -DCMAKE_C_FLAGS="-gline-tables-only"
   -DCMAKE_CXX_FLAGS="-gline-tables-only"

extra-dsymutil-args="--verify-dwarf=none"

install-toolchain
install-static-linux-config
install-language
install-lldb
install-llbuild
install-languagepm
install-language-driver
install-languagesyntax
install-language-testing
install-language-testing-macros
install-playgroundsupport
install-sourcekit-lsp
install-languageformat
install-languagedocc
install-wasmkit

install-destdir=%(install_destdir)s

darwin-install-extract-symbols

# Path where debug symbols will be installed.
install-symroot=%(install_symroot)s

# Path where the compiler, the runtime and the standard libraries will be
# installed.
install-prefix=%(install_toolchain_dir)s/usr

# Executes the lit tests for the installable package that is created
# Assumes the language-integration-tests repo is checked out

test-installable-package

# Make sure that we can build the benchmarks with languagepm against the toolchain
toolchain-benchmarks

# If someone uses this for incremental builds, force reconfiguration.
reconfigure

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

# Path to the .tar.gz symbols package
symbols-package=%(symbols_package)s

# Info.plist
darwin-toolchain-bundle-identifier=%(darwin_toolchain_bundle_identifier)s
darwin-toolchain-display-name=%(darwin_toolchain_display_name)s
darwin-toolchain-display-name-short=%(darwin_toolchain_display_name_short)s
darwin-toolchain-name=%(darwin_toolchain_xctoolchain_name)s
darwin-toolchain-version=%(darwin_toolchain_version)s
darwin-toolchain-alias=%(darwin_toolchain_alias)s
darwin-toolchain-require-use-os-runtime=0

[preset: mixin_osx_package_test]
build-subdir=buildbot_osx

ios
tvos
watchos
test
validation-test
long-test
stress-test

lldb-test-language-only

lit-args=-v --time-tests

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

[preset: mixin_osx_package,use_os_runtime]:
darwin-toolchain-require-use-os-runtime=1

[preset: mixin_osx_package,macos_only]:
skip-build-ios
skip-test-ios
skip-build-tvos
skip-test-tvos
skip-build-watchos
skip-test-watchos
skip-build-xros
skip-test-xros

[preset: buildbot_osx_package]
mixin-preset=
    mixin_osx_package_base
    mixin_osx_package_test
    mixin_lightweight_assertions,no-stdlib-asserts

# SKIP LLDB TESTS (67923799)
skip-test-lldb
skip-test-playgroundsupport

# Don't configure LLDB tests either since that
# would require us to build libcxx (rdar://109774179)
lldb-configure-tests=0

[preset: buildbot_osx_package,use_os_runtime]
mixin-preset=
    buildbot_osx_package
    mixin_osx_package,use_os_runtime

[preset: buildbot_osx_package,macos_only]
mixin-preset=
    buildbot_osx_package
    mixin_osx_package,macos_only

[preset: buildbot_osx_package,no_assertions]
mixin-preset=
    mixin_osx_package_base
    mixin_osx_package_test

no-assertions

[preset: buildbot_osx_package,no_assertions,use_os_runtime]
mixin-preset=
    buildbot_osx_package,no_assertions
    mixin_osx_package,use_os_runtime

[preset: buildbot_osx_package,no_assertions,lto]
mixin-preset=buildbot_osx_package,no_assertions

lto

[preset: buildbot_osx_package,no_assertions,lto,use_os_runtime]
mixin-preset=
    buildbot_osx_package,no_assertions,lto
    mixin_osx_package,use_os_runtime

[preset: buildbot_osx_package,no_assertions,no_test]
mixin-preset=
    buildbot_osx_package,no_assertions

skip-test-language
skip-test-languagepm
skip-test-language-driver
skip-test-llbuild
skip-test-lldb
skip-test-cmark
skip-test-playgroundsupport
skip-test-languagesyntax
skip-test-languageformat
skip-test-skstresstester
skip-test-languagedocc

[preset: buildbot_osx_package,no_assertions,no_test,use_os_runtime]
mixin-preset=
    buildbot_osx_package,no_assertions,no_test
    mixin_osx_package,use_os_runtime

# Debug version of the compilers, release version of the stdlib.
[preset: buildbot_osx_package,tools=DA,stdlib=R]
mixin-preset=buildbot_osx_package

build-subdir=buildbot_osx_debug

release-debuginfo
assertions
debug-toolchain
debug-language
no-language-stdlib-assertions

# Don't do bootstrapping to speed up the build
# TODO: use bootstrapping=hosttools


[preset: buildbot_osx_package,tools=DA,stdlib=R,use_os_runtime]
mixin-preset=
    buildbot_osx_package,tools=DA,stdlib=R
    mixin_osx_package,use_os_runtime

[preset: mixin_buildbot_osx_package,no_test]
skip-test-language
skip-test-languagepm
skip-test-language-driver
skip-test-llbuild
skip-test-lldb
skip-test-cmark
skip-test-playgroundsupport
skip-test-languagesyntax
skip-test-languageformat
skip-test-skstresstester
skip-test-languagedocc
skip-test-sourcekit-lsp
skip-test-indexstore-db

# macOS package with out test
[preset: buildbot_osx_package,no_test]
mixin-preset=
    buildbot_osx_package
    mixin_buildbot_osx_package,no_test

# macOS package with out test
[preset: buildbot_osx_package,no_test,macos_only]
mixin-preset=
    buildbot_osx_package
    mixin_buildbot_osx_package,no_test
    mixin_osx_package,macos_only

# macOS package without test that when linked against uses the OS runtime
# instead of the toolchain runtime.
[preset: buildbot_osx_package,no_test,use_os_runtime]
mixin-preset=
    buildbot_osx_package
    mixin_buildbot_osx_package,no_test
    mixin_osx_package,use_os_runtime

#===------------------------------------------------------------------------===#
# LLDB build configurations
#
# Use to build the compiler sources nested in LLDB.
#
# This is only used from Xcode, and expects the following configuration:
## an argument, language_install_destdir=[path for Codira installed products]
## an environment variable, LANGUAGE_SOURCE_ROOT=[parent of language/]
## an environment variable, LANGUAGE_BUILD_ROOT=[parent of Codira build directory]
#===------------------------------------------------------------------------===#

[preset: LLDB_Nested]
skip-build-benchmarks
install-destdir=%(language_install_destdir)s
toolchain-targets-to-build=X86;ARM;AArch64;PowerPC;SystemZ;Mips;RISCV

[preset: LLDB_Codira_DebugAssert]
mixin-preset=
    LLDB_Nested

assertions

[preset: LLDB_Codira_DebugAssert_asan]
mixin-preset=
    LLDB_Codira_DebugAssert

enable-asan

[preset: LLDB_Codira_DebugAssert_with_devices]
mixin-preset=
    LLDB_Codira_DebugAssert

ios
tvos
watchos
language-stdlib-build-type=Release

[preset: LLDB_Codira_ReleaseAssert]
mixin-preset=
    LLDB_Nested

release-debuginfo
assertions

[preset: LLDB_Codira_ReleaseAssert_asan]
mixin-preset=
    LLDB_Codira_ReleaseAssert

enable-asan

[preset: LLDB_Codira_ReleaseAssert_with_devices]
mixin-preset=
    LLDB_Codira_ReleaseAssert

ios
tvos
watchos
language-stdlib-build-type=Release

#===------------------------------------------------------------------------===#
# Test Codira/LLVM Project only on macOS and iOS
#===------------------------------------------------------------------------===#

[preset: buildbot,tools=RA,stdlib=RA,platforms=macOS_iOS]
mixin-preset=
    buildbot_incremental_base_all_platforms
    lldb-smoketest,tools=RA
    mixin_buildbot_install_components_with_clang

build-subdir=buildbot_incremental

# Skip watchOS and tvOS
skip-build-watchos
skip-build-tvos
skip-build-xros

# Build Release without debug info, because it is faster to build.
release
assertions

build-language-stdlib-unittest-extra

libcxx

# Install language and libcxx
install-toolchain
install-static-linux-config
install-language
install-languagesyntax

# Build Playground support
playgroundsupport

# Run the SIL verifier after each transform when building language files
sil-verify-all

# Don't run host tests for iOS, tvOS and watchOS platforms to make the build
# faster.
skip-test-ios-host


#===------------------------------------------------------------------------===#
# Test all platforms on OS X builder
#===------------------------------------------------------------------------===#

[preset: buildbot_all_platforms,tools=RA,stdlib=RA]
mixin-preset=
    buildbot_incremental_base_all_platforms
    lldb-smoketest,tools=RA
    mixin_buildbot_install_components_with_clang

build-subdir=buildbot_incremental

# Build Release without debug info, because it is faster to build.
release
assertions

build-language-stdlib-unittest-extra

libcxx

# Build llbuild & languagepm here
llbuild
languagepm
# Failing to build in CI: rdar://78408440
# language-inspect
language-driver
languagesyntax
language-testing
language-testing-macros
languageformat
languagedocc

build-minimal-stdlib

# Don't generate the CodiraSyntax gyb files. Instead verify that up-to-date ones
# are checked in.
languagesyntax-verify-generated-files

# Build sourcekit-lsp & indexstore-db
indexstore-db
sourcekit-lsp
install-toolchain
install-static-linux-config
install-language
install-llbuild
install-languagepm
install-language-driver
install-languagesyntax
install-language-testing
install-language-testing-macros
install-languagedocc
install-languageformat

# Build the stress tester
skstresstester

# Build Playground support
playgroundsupport

# Skip Playground tests
skip-test-playgroundsupport

# Skip build and test for tvOS
skip-build-tvos
skip-test-tvos
skip-test-tvos-host

# Run the SIL verifier after each transform when building language files
sil-verify-all-macos-only

# Don't run host tests for iOS, tvOS and watchOS platforms to make the build
# faster.
skip-test-ios-host
skip-test-watchos-host
skip-test-xros-host

# Skip LLBuild test until GitHub issue is fixed:
# https://github.com/apple/language-llbuild/issues/894
skip-test-llbuild

[preset: toolchain_project_pull_request]
mixin-preset=buildbot_all_platforms,tools=RA,stdlib=RA

toolchain-include-tests

# Skip downstream project tests
skip-test-watchos
skip-test-xros
skip-test-languagesyntax
skip-test-indexstore-db
skip-test-sourcekit-lsp
skip-test-languagepm
skip-test-llbuild

#===------------------------------------------------------------------------===#
# Test watchOS on OS X builder
#===------------------------------------------------------------------------===#

[preset: buildbot_watch_platform,tools=RA,stdlib=RA]
mixin-preset=buildbot_incremental_base_all_platforms

build-subdir=buildbot_incremental

# Build Release without debug info, because it is faster to build.
release
assertions

build-language-stdlib-unittest-extra

# Build llbuild & languagepm here
llbuild
languagepm

# Only run watchOS tests
skip-test-ios
skip-test-tvos
skip-test-osx


#===------------------------------------------------------------------------===#
# PR testing presets
#===------------------------------------------------------------------------===#

[preset: pr_apple_toolchain_project_linux]

toolchain-cmake-options=-DCLANG_DEFAULT_LINKER=gold

foundation
libdispatch
test

release

lldb
lldb-test-language-only

skip-test-cmark
skip-test-language
skip-test-foundation

#===------------------------------------------------------------------------===#
# Mixins for LLBuild, CodiraPM and downstream package project PR tests.
#===------------------------------------------------------------------------===#
# Base of CodiraPM and packages
[preset: mixin_languagepm_base]
mixin-preset=
    buildbot_incremental_base
    mixin_buildbot_install_components_with_clang
build-subdir=buildbot_incremental

libcxx
llbuild
languagepm

install-toolchain
install-static-linux-config
install-language
install-llbuild
install-languagepm
install-languagesyntax
language-testing
language-testing-macros
install-language-testing
install-language-testing-macros

skip-test-language

# CodiraPM base
[preset: mixin_languagepm_macos_platform]
mixin-preset=mixin_languagepm_base

infer-cross-compile-hosts-on-darwin

# CodiraPM base
[preset: mixin_languagepm_linux_platform]
mixin-preset=mixin_languagepm_base

libdispatch
foundation
xctest
libcxx=false

install-foundation
install-libdispatch
install-xctest

skip-test-foundation
skip-test-libdispatch
skip-test-xctest

toolchain-cmake-options=
  -DCLANG_DEFAULT_LINKER=gold

# CodiraPM package base
[preset: mixin_languagepm_package_macos_platform]
mixin-preset=mixin_languagepm_base

# We don't need to build the benchmark if we just want CodiraPM
skip-build-benchmarks

# We don't need these platforms. Skip them
skip-ios
skip-tvos
skip-watchos

skip-test-llbuild
skip-test-languagepm

# CodiraPM package base
[preset: mixin_languagepm_package_linux_platform]
mixin-preset=mixin_languagepm_base

libdispatch
foundation
xctest
libcxx=false

install-foundation
install-libdispatch
install-xctest

skip-test-foundation
skip-test-libdispatch
skip-test-xctest
skip-test-llbuild
skip-test-languagepm

toolchain-cmake-options=
  -DCLANG_DEFAULT_LINKER=gold

#===------------------------------------------------------------------------===#
# Test languagePM on macOS builder
#===------------------------------------------------------------------------===#

[preset: buildbot_languagepm_macos_platform,tools=RA,stdlib=RA]
mixin-preset=mixin_languagepm_macos_platform

# Build Release without debug info, because it is faster to build.
release
assertions

# Downstream projects that import llbuild+CodiraPM.
sourcekit-lsp
languageformat
install-languageformat

toolchain-benchmarks
skip-test-toolchain-benchmarks

skip-test-llbuild

#===------------------------------------------------------------------------===#
# Test languagePM on Linux builder
#===------------------------------------------------------------------------===#

[preset: buildbot_languagepm_linux_platform,tools=RA,stdlib=RA]
mixin-preset=mixin_languagepm_linux_platform

# Build Release without debug info, because it is faster to build.
release
assertions

# Downstream projects that import llbuild+CodiraPM.
sourcekit-lsp
languageformat
install-languageformat

toolchain-benchmarks
skip-test-toolchain-benchmarks

skip-test-llbuild

#===------------------------------------------------------------------------===#
# Test llbuild on macOS builder
#===------------------------------------------------------------------------===#

[preset: buildbot_llbuild_macos_platform,tools=RA,stdlib=RA]
mixin-preset=mixin_languagepm_macos_platform

# Build Release without debug info, because it is faster to build.
release
assertions

# Downstream projects that import llbuild+CodiraPM.
sourcekit-lsp
languageformat
install-languageformat

#===------------------------------------------------------------------------===#
# Test llbuild on Linux builder
#===------------------------------------------------------------------------===#

[preset: buildbot_llbuild_linux_platform,tools=RA,stdlib=RA]
mixin-preset=mixin_languagepm_linux_platform

# Build Release without debug info, because it is faster to build.
release
assertions

# Downstream projects that import llbuild+CodiraPM.
sourcekit-lsp
languageformat
install-languageformat

#===------------------------------------------------------------------------===#
# Test Codira Driver (new)
#===------------------------------------------------------------------------===#

[preset: buildbot_language-driver_macos]
mixin-preset=mixin_languagepm_package_macos_platform
release
assertions
language-driver

[preset: buildbot_language-driver_linux]
mixin-preset=mixin_languagepm_package_linux_platform
release
assertions
language-driver

#===------------------------------------------------------------------------===#
# Test Codira Syntax
#===------------------------------------------------------------------------===#

[preset: buildbot_languagesyntax_macos]
mixin-preset=mixin_languagepm_package_macos_platform
release
assertions
languagesyntax
languagesyntax-enable-rawsyntax-validation
languagesyntax-enable-test-fuzzing
languagesyntax-verify-generated-files
languageformat
skstresstester
sourcekit-lsp
install-languageformat
skip-test-language=false

[preset: buildbot_languagesyntax_linux]
mixin-preset=mixin_languagepm_package_linux_platform
release
assertions
languagesyntax
languagesyntax-enable-rawsyntax-validation
languagesyntax-enable-test-fuzzing
sourcekit-lsp
languageformat
install-languageformat

#===------------------------------------------------------------------------===#
# Test Codira Format
#===------------------------------------------------------------------------===#

[preset: buildbot_languageformat_macos]
mixin-preset=mixin_languagepm_package_macos_platform
release
assertions
languagesyntax
languageformat
install-languageformat
sourcekit-lsp-lint

[preset: buildbot_languageformat_linux]
mixin-preset=mixin_languagepm_package_linux_platform
release
assertions
languagesyntax
languageformat

#===------------------------------------------------------------------------===#
# Test Codira Stress Tester
#===------------------------------------------------------------------------===#

[preset: buildbot_skstresstester_macos]
mixin-preset=mixin_languagepm_package_macos_platform
release
assertions
skstresstester
install-skstresstester

#===------------------------------------------------------------------------===#
# Test SourceKit-LSP
#===------------------------------------------------------------------------===#

[preset: buildbot_sourcekitlsp_macos,no_sanitize]
mixin-preset=mixin_languagepm_package_macos_platform
release
assertions
sourcekit-lsp
languageformat
install-languageformat
sourcekit-lsp-lint
sourcekit-lsp-verify-generated-files

[preset: buildbot_sourcekitlsp_linux,no_sanitize]
mixin-preset=mixin_languagepm_package_linux_platform
release
assertions
sourcekit-lsp
languageformat
install-languageformat

[preset: buildbot_sourcekitlsp_macos,sanitize]
mixin-preset=buildbot_sourcekitlsp_macos,no_sanitize
test-sourcekit-lsp-sanitize-all

[preset: buildbot_sourcekitlsp_linux,sanitize]
mixin-preset=buildbot_sourcekitlsp_linux,no_sanitize
test-sourcekit-lsp-sanitize-all

# Default: no sanitizers
[preset: buildbot_sourcekitlsp_macos]
mixin-preset=buildbot_sourcekitlsp_macos,no_sanitize

# Default: no sanitizers
[preset: buildbot_sourcekitlsp_linux]
mixin-preset=buildbot_sourcekitlsp_linux,no_sanitize

#===------------------------------------------------------------------------===#
# Test IndexStore-DB
#===------------------------------------------------------------------------===#

[preset: buildbot_indexstoredb_macos,no_sanitize]
mixin-preset=mixin_languagepm_package_macos_platform
release
assertions
indexstore-db
sourcekit-lsp
languageformat
install-languageformat

[preset: buildbot_indexstoredb_linux,no_sanitize]
mixin-preset=mixin_languagepm_package_linux_platform
release
assertions
indexstore-db
sourcekit-lsp
languageformat
install-languageformat

[preset: buildbot_indexstoredb_macos,sanitize]
mixin-preset=buildbot_indexstoredb_macos,no_sanitize
test-indexstore-db-sanitize-all

[preset: buildbot_indexstoredb_linux,sanitize]
mixin-preset=buildbot_indexstoredb_linux,no_sanitize
test-indexstore-db-sanitize-all

# Default: sanitize-all
[preset: buildbot_indexstoredb_macos]
mixin-preset=buildbot_indexstoredb_macos,sanitize

# Default: sanitize-all
[preset: buildbot_indexstoredb_linux]
mixin-preset=buildbot_indexstoredb_linux,sanitize

#===------------------------------------------------------------------------===#
# Test Codira Corelibs XCTest
#===------------------------------------------------------------------------===#

[preset: buildbot_xctest_linux]
mixin-preset=
    mixin_linux_install_components_with_clang

llbuild
languagepm
xctest
language-testing
language-testing-macros
foundation
libdispatch
indexstore-db
sourcekit-lsp
languageformat

release
validation-test
reconfigure

install-foundation
install-libdispatch
install-libcxx
install-toolchain
install-static-linux-config
install-language
install-llbuild
install-languagepm
install-languagesyntax
install-xctest
install-language-testing
install-language-testing-macros
install-sourcekit-lsp
install-languageformat

skip-test-cmark
skip-test-language
skip-test-libdispatch
skip-test-foundation

toolchain-cmake-options=
  -DCLANG_DEFAULT_LINKER=gold

#===------------------------------------------------------------------------===#
# Remote Mirror Library
#===------------------------------------------------------------------------===#

[preset: mixin_remote_mirror_base]
no-assertions
language-assertions

clang-user-visible-version=9.1.0

compiler-vendor=apple
build-ninja
release-debuginfo
reconfigure
language-install-components=language-remote-mirror
install-destdir=%(install_destdir)s
install-symroot=%(install_symroot)s
darwin-install-extract-symbols=1
skip-build-cmark
skip-build-toolchain
skip-build-llbuild
skip-build-benchmarks
install-toolchain
install-static-linux-config
install-language
install-languagesyntax
install-prefix=%(install_toolchain_dir)s/usr
build-language-examples=0
build-language-tools=0
build-language-static-stdlib=0
build-language-dynamic-stdlib=0
build-language-static-sdk-overlay=0
build-language-dynamic-sdk-overlay=0
build-language-remote-mirror=1
language-include-tests=0
toolchain-include-tests=0

[preset: remote_mirror_ios_customization]

darwin-xcrun-toolchain=ios
darwin-deployment-version-ios=11.0
skip-build-osx
skip-test-osx
skip-build-tvos
skip-test-tvos
skip-build-watchos
skip-test-watchos
skip-build-xros
skip-test-xros
language-sdks=IOS
language-primary-variant-sdk=IOS
language-primary-variant-arch=arm64
build-subdir=language_remote_mirror_ios

[preset: remote_mirror_ios]
mixin-preset=
    mixin_remote_mirror_base
    remote_mirror_ios_customization

[preset: remote_mirror_watchos_customization]

darwin-xcrun-toolchain=watchos
darwin-deployment-version-watchos=4.0
skip-build-osx
skip-test-osx
skip-build-tvos
skip-test-tvos
skip-build-ios
skip-test-ios
language-sdks=WATCHOS
language-primary-variant-sdk=WATCHOS
language-primary-variant-arch=armv7k
build-subdir=language_remote_mirror_watchos

[preset: remote_mirror_watchos]
mixin-preset=
    mixin_remote_mirror_base
    remote_mirror_watchos_customization

[preset: remote_mirror_tvos_customization]

darwin-xcrun-toolchain=tvos
darwin-deployment-version-tvos=11.0
skip-build-osx
skip-test-osx
skip-build-watchos
skip-test-watchos
skip-build-xros
skip-test-xros
skip-build-ios
skip-test-ios
language-sdks=TVOS
language-primary-variant-sdk=TVOS
language-primary-variant-arch=arm64
build-subdir=language_remote_mirror_tvos

[preset: remote_mirror_tvos]
mixin-preset=
    mixin_remote_mirror_base
    remote_mirror_tvos_customization


#===------------------------------------------------------------------------===#
# Mixin for buildbots for CI
#===------------------------------------------------------------------------===#
[preset: mixin_buildbot_incremental,build]
build-subdir=buildbot_incremental
compiler-vendor=apple

# Build standard library and SDK overlay for iOS device and simulator.

ios
tvos
watchos

# On buildbots, always force a reconfiguration to make sure we pick up changes
# in the build-script and build-presets.ini.
reconfigure

verbose-build
build-ninja
build-language-stdlib-unittest-extra
skip-build-benchmarks

# This is needed to avoid needless rebuild
# (in particolar compiler-rt) if we run
# presets focused on testing like
# buildbot_incremental,*,test=*
# after buildbot_incremental,*,build
lit-args=-v

[preset: mixin_buildbot_incremental,test=macOS,type=device]

test
validation-test
lit-args=-v

skip-test-ios
skip-test-tvos
skip-test-watchos
skip-test-xros
skip-reconfigure

[preset: mixin_buildbot_incremental,test=iOS,type=simulator]

test
validation-test
lit-args=-v

skip-test-osx
skip-test-tvos
skip-test-watchos
skip-test-xros
skip-reconfigure

[preset: mixin_buildbot_incremental,test=tvOS,type=simulator]
test
validation-test
lit-args=-v

skip-test-osx
skip-test-watchos
skip-test-xros
skip-test-ios
skip-reconfigure

[preset: mixin_buildbot_incremental,test=watchOS,type=simulator]

test
validation-test
lit-args=-v

skip-test-osx
skip-test-tvos
skip-test-ios
skip-reconfigure

#===------------------------------------------------------------------------===#
# Codira Preset
# Tools: Release and Assertions
# stdlib: Release and DebInfo
#===------------------------------------------------------------------------===#
[preset: buildbot_incremental,tools=RA,stdlib=RD,build]
mixin-preset=mixin_buildbot_incremental,build

# Build Release without debug info, because it is faster to build.
release
assertions

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=false

[preset: buildbot_incremental,tools=RA,stdlib=RD,test=macOS,type=device]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RD,build
    mixin_buildbot_incremental,test=macOS,type=device

[preset: buildbot_incremental,tools=RA,stdlib=RD,test=iOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RD,build
    mixin_buildbot_incremental,test=iOS,type=simulator

[preset: buildbot_incremental,tools=RA,stdlib=RD,test=tvOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RD,build
    mixin_buildbot_incremental,test=tvOS,type=simulator

[preset: buildbot_incremental,tools=RA,stdlib=RD,test=watchOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RD,build
    mixin_buildbot_incremental,test=watchOS,type=simulator

#===------------------------------------------------------------------------===#
# Codira Preset
# Tools: Release and Assertions
# stdlib: Release, DebInfo and Assertions
#===------------------------------------------------------------------------===#
[preset: buildbot_incremental,tools=RA,stdlib=RDA,build]
mixin-preset=mixin_buildbot_incremental,build

# Build Release without debug info, because it is faster to build.
release
assertions

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=true

# This is a release non-incremental build. Run sil-verify-all.
sil-verify-all

[preset: buildbot_incremental,tools=RA,stdlib=RDA,test=macOS,type=device]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RDA,build
    mixin_buildbot_incremental,test=macOS,type=device

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=RDA,test=iOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RDA,build
    mixin_buildbot_incremental,test=iOS,type=simulator

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=RDA,test=tvOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RDA,build
    mixin_buildbot_incremental,test=tvOS,type=simulator

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=RDA,test=watchOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RDA,build
    mixin_buildbot_incremental,test=watchOS,type=simulator

test-optimized

#===------------------------------------------------------------------------===#
# Codira Preset
# Tools: Release and Assertions
# stdlib: DebInfo and Assertions
#===------------------------------------------------------------------------===#
[preset: buildbot_incremental,tools=RA,stdlib=DA,build]
mixin-preset=mixin_buildbot_incremental,build

# Build Release without debug info, because it is faster to build.
release
assertions

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=false

[preset: buildbot_incremental,tools=RA,stdlib=DA,test=macOS,type=device]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=DA,build
    mixin_buildbot_incremental,test=macOS,type=device

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=DA,test=iOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=DA,build
    mixin_buildbot_incremental,test=iOS,type=simulator

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=DA,test=tvOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=DA,build
    mixin_buildbot_incremental,test=tvOS,type=simulator

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=DA,test=watchOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=DA,build
    mixin_buildbot_incremental,test=watchOS,type=simulator

test-optimized

#===------------------------------------------------------------------------===#
# Codira Preset
# Tools: Release and Assertions
# stdlib: Release and Assertions
#===------------------------------------------------------------------------===#
[preset: buildbot_incremental,tools=RA,stdlib=RA,build]
mixin-preset=mixin_buildbot_incremental,build

# Build Release without debug info, because it is faster to build.
release
assertions

[preset: buildbot_incremental,tools=RA,stdlib=RA,test=macOS,type=device]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RA,build
    mixin_buildbot_incremental,test=macOS,type=device

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=RA,test=iOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RA,build
    mixin_buildbot_incremental,test=iOS,type=simulator

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=RA,test=tvOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RA,build
    mixin_buildbot_incremental,test=tvOS,type=simulator

test-optimized

[preset: buildbot_incremental,tools=RA,stdlib=RA,test=watchOS,type=simulator]
mixin-preset=
    buildbot_incremental,tools=RA,stdlib=RA,build
    mixin_buildbot_incremental,test=watchOS,type=simulator

test-optimized

#===------------------------------------------------------------------------===#
# Codira Preset
# Tools: DebInfo and Assertions
# stdlib: Release and Assertions
#===------------------------------------------------------------------------===#
[preset: buildbot_incremental,tools=DA,stdlib=RA,build]
mixin-preset=mixin_buildbot_incremental,build

# Build Release without debug info, because it is faster to build.
release-debuginfo
assertions
debug-toolchain
debug-language

# Don't do bootstrapping to speed up the build
# TODO: use bootstrapping=hosttools


#===------------------------------------------------------------------------===#
# Codira Preset
# Tools: DebInfo and Assertions
# stdlib: DebInfo and Assertions
#===------------------------------------------------------------------------===#
[preset: buildbot_incremental,tools=DA,stdlib=DA,build]
mixin-preset=mixin_buildbot_incremental,build

# Build Release without debug info, because it is faster to build.
release-debuginfo
assertions
debug-toolchain
debug-language

language-stdlib-build-type=RelWithDebInfo
language-stdlib-enable-assertions=true

# Don't do bootstrapping to speed up the build
# TODO: use bootstrapping=hosttools


#===------------------------------------------------------------------------===#
# Codira Coverage Preset
#===------------------------------------------------------------------------===#

[preset: buildbot_incremental,tools=RDA,stdlib=RDA,coverage]
build-subdir=buildbot_incremental_coverage
release-debuginfo
assertions
language-analyze-code-coverage=not-merged
test
validation-test
skip-test-ios
skip-test-tvos
skip-test-watchos
skip-test-xros
skip-build-benchmark
verbose-build
lit-args=-v
reconfigure
build-ninja

#===------------------------------------------------------------------------===#
# iOS arm64 cross compiler
#===------------------------------------------------------------------------===#
[preset: buildbot_iphoneos_arm64_crosscompiler]

build-subdir=LLVMClangCodira_iphoneos
release

cross-compile-hosts=iphoneos-arm64
compiler-vendor=apple
language-primary-variant-sdk=IOS
language-primary-variant-arch=arm64
extra-cmake-options=-DTOOLCHAIN_ENABLE_BACKTRACES:BOOL=OFF

build-toolchain-only=1
build-language-static-stdlib=0
build-language-dynamic-stdlib=0
build-language-static-sdk-overlay=0
build-language-dynamic-sdk-overlay=0
build-runtime-with-host-compiler=0
skip-build-benchmarks
toolchain-include-tests=0
toolchain-enable-modules=0
build-language-examples=0
language-include-tests=0
darwin-deployment-version-ios=10.0
darwin-crash-reporter-client=1

#===------------------------------------------------------------------------===#
# Linux corelibs foundation preset
#===------------------------------------------------------------------------===#
[preset: buildbot_linux,foundation=debug]
mixin-preset=buildbot_linux

debug-foundation

[preset: buildbot_linux,foundation=release]
mixin-preset=buildbot_linux

#===------------------------------------------------------------------------===#
# Standalone Stdlib
#===------------------------------------------------------------------------===#

[preset: stdlib_base_standalone]
# We do not want to build toolchain, cmark, or benchmarks. We will still build a
# small part of toolchain and configure both toolchain/cmark.
skip-build-toolchain
skip-build-cmark
skip-build-benchmarks
skip-test-cmark

# This triggers the stdlib standalone build: don't build the native tools from
# scratch, ie the compiler.
build-language-tools=0
build-language-libexec=0
skip-early-language-driver
skip-early-languagesyntax
build-embedded-stdlib=0

# Then set the paths to our native tools. If compiling against a toolchain,
# these should all be the ./usr/bin directory.
native-language-tools-path=%(toolchain_path)s
native-toolchain-tools-path=%(toolchain_path)s
native-clang-tools-path=%(toolchain_path)s

build-ninja
lit-args=--filter=':: (stdlib/|Concurrency/)' -v
only-executable-test

[preset: stdlib_R_standalone,build]
mixin-preset=stdlib_base_standalone

release
no-assertions

verbose-build

[preset: stdlib_R_standalone,build,asan]
mixin-preset=stdlib_R_standalone,build

build-subdir=stdlib_R_standalone_asan
enable-asan

[preset: stdlib_R_standalone,build,test]
mixin-preset=stdlib_R_standalone,build

test
validation-test

[preset: stdlib_RD_standalone,build]
mixin-preset=stdlib_base_standalone

build-subdir=stdlib_RD_standalone
release-debuginfo
no-assertions

verbose-build

[preset: stdlib_RD_standalone,build,asan]
mixin-preset=stdlib_RD_standalone,build

build-subdir=stdlib_RD_standalone_asan
enable-asan

[preset: stdlib_RD_standalone,build,test]
mixin-preset=stdlib_RD_standalone,build

test
validation-test

[preset: stdlib_RA_standalone,build]
mixin-preset=stdlib_base_standalone

build-subdir=stdlib_RA_standalone
release
assertions

verbose-build

[preset: stdlib_RA_standalone,build,asan]
mixin-preset=stdlib_RA_standalone,build

build-subdir=stdlib_RA_standalone_asan
enable-asan

[preset: stdlib_RA_standalone,build,test]
mixin-preset=stdlib_RA_standalone,build

test
validation-test

[preset: stdlib_RDA_standalone,build]
mixin-preset=stdlib_base_standalone

build-subdir=stdlib_RDA_standalone
release-debuginfo
assertions

verbose-build

[preset: stdlib_RDA_standalone,build,asan]
mixin-preset=stdlib_RDA_standalone,build

build-subdir=stdlib_RDA_standalone_asan
enable-asan

[preset: stdlib_RDA_standalone,build,test]
mixin-preset=stdlib_RDA_standalone,build

test
validation-test

[preset: stdlib_DA_standalone,build]
mixin-preset=stdlib_base_standalone

build-subdir=stdlib_DA_standalone
debug
assertions

verbose-build

[preset: stdlib_DA_standalone,build,asan]
mixin-preset=stdlib_DA_standalone,build

build-subdir=stdlib_DA_standalone_asan
enable-asan

[preset: stdlib_DA_standalone,build,test]
mixin-preset=stdlib_DA_standalone,build

test
validation-test

[preset: stdlib_S_standalone,build]
mixin-preset=stdlib_base_standalone

build-subdir=stdlib_S_standalone
min-size-release
no-assertions

verbose-build

[preset: stdlib_SA_standalone,build]
mixin-preset=stdlib_base_standalone

build-subdir=stdlib_SA_standalone
min-size-release
assertions

verbose-build

[preset: mixin_stdlib_minimal]
enable-experimental-differentiable-programming=0
language-enable-experimental-string-processing=0
enable-experimental-concurrency=1
enable-experimental-distributed=0
enable-experimental-observation=0
build-language-dynamic-sdk-overlay=0
build-language-dynamic-stdlib=0
build-language-static-stdlib=1
build-language-remote-mirror=0
build-language-libexec=0
language-objc-interop=0
language-enable-dispatch=0
language-implicit-concurrency-import=0
language-stdlib-support-back-deployment=0
language-enable-backtracing=0
language-enable-reflection=0
language-stdlib-reflection-metadata=debugger-only
language-stdlib-stable-abi=0
language-stdlib-has-dladdr=0
language-stdlib-has-dlsym=0
language-stdlib-has-filesystem=0
language-stdlib-supports-backtrace-reporting=0
language-stdlib-has-darwin-libmalloc=0
language-stdlib-has-asl=0
language-stdlib-has-stdin=0
language-stdlib-has-environ=0
language-stdlib-has-locale=0
language-runtime-static-image-inspection=1
language-stdlib-tracing=0
language-stdlib-concurrency-tracing=0
language-stdlib-os-versioning=0
language-stdlib-has-commandline=0
language-stdlib-lto=full
language-stdlib-enable-prespecialization=0
language-stdlib-passthrough-metadata-allocator=1
language-stdlib-short-mangling-lookups=0
language-stdlib-enable-vector-types=0
language-stdlib-experimental-hermetic-seal-at-link=1
language-stdlib-disable-instantiation-caches=1
language-stdlib-has-type-printing=0
language-threading-package=pthreads
build-language-stdlib-unicode-data=0
build-language-stdlib-static-print=1
darwin-crash-reporter-client=0
language-stdlib-use-relative-protocol-witness-tables=1
language-stdlib-overridable-retain-release=0
language-stdlib-task-to-thread-model-concurrency=1

[preset: stdlib_S_standalone_minimal_macho_x86_64,build]
mixin-preset=
    stdlib_S_standalone,build
    mixin_stdlib_minimal

stdlib-deployment-targets=freestanding-x86_64
language-primary-variant-sdk=FREESTANDING
language-primary-variant-arch=x86_64
language-freestanding-flavor=apple
language-freestanding-sdk=macosx
# For now, until clang/languagec works correctly with "none-macho" as the OS part of target triple.
language-freestanding-triple-name=macosx11.0
language-freestanding-module-name=macos
language-freestanding-archs=x86_64

# For lit tests, we are producing dynamic executables with statically linked stdlib into the executable.
language-runtime-static-image-inspection=0

[preset: stdlib_S_standalone_minimal_macho_x86_64,build,test]
mixin-preset=stdlib_S_standalone_minimal_macho_x86_64,build

test
validation-test

[preset: stdlib_S_standalone_minimal_macho_arm64,build]
mixin-preset=stdlib_S_standalone_minimal_macho_x86_64,build
stdlib-deployment-targets=freestanding-arm64
language-primary-variant-arch=arm64
language-freestanding-archs=arm64

[preset: stdlib_S_standalone_minimal_macho_arm64,build,test]
mixin-preset=stdlib_S_standalone_minimal_macho_arm64,build

test
validation-test

[preset: stdlib_S_standalone_minimal_macho_arm64_relative_protocol_witness_table,build,test]
mixin-preset=
    stdlib_base_standalone
    mixin_stdlib_minimal

build-subdir=stdlib_S_standalone
min-size-release
no-assertions

verbose-build

language-primary-variant-sdk=FREESTANDING
language-primary-variant-arch=arm64
language-freestanding-flavor=apple
language-freestanding-sdk=macosx
stdlib-deployment-targets=freestanding-arm64

# For now, until clang/languagec works correctly with "none-macho" as the OS part of target triple.
language-freestanding-triple-name=macosx11.0
language-freestanding-module-name=macos
language-freestanding-archs=arm64

# For lit tests, we are producing dynamic executables with statically linked stdlib into the executable.
language-runtime-static-image-inspection=0

language-stdlib-experimental-hermetic-seal-at-link=1
language-stdlib-lto=full
language-enable-runtime-function-counters=0
language-stdlib-use-relative-protocol-witness-tables=1

test
validation-test

[preset: stdlib_S_standalone_minimal_macho_arm64_relative_resilient_protocol_witness_table,build,test]
mixin-preset=
    stdlib_base_standalone
    mixin_stdlib_minimal

build-subdir=stdlib_S_standalone
min-size-release
assertions
language-stdlib-enable-assertions=false

verbose-build

language-primary-variant-sdk=FREESTANDING
language-primary-variant-arch=arm64
language-freestanding-flavor=apple
language-freestanding-sdk=macosx
stdlib-deployment-targets=freestanding-arm64

# For now, until clang/languagec works correctly with "none-macho" as the OS part of target triple.
language-freestanding-triple-name=macosx11.0
language-freestanding-module-name=macos
language-freestanding-archs=arm64

# For lit tests, we are producing dynamic executables with statically linked stdlib into the executable.
language-runtime-static-image-inspection=0

language-stdlib-experimental-hermetic-seal-at-link=0
language-stdlib-lto=
language-enable-runtime-function-counters=0
language-stdlib-use-relative-protocol-witness-tables=1
language-stdlib-use-fragile-resilient-protocol-witness-tables=1
language-stdlib-stable-abi=1

test
validation-test
only-non-executable-test

[preset: stdlib_S_standalone_darwin_x86_64,build]
mixin-preset=
    stdlib_S_standalone,build

build-subdir=stdlib_S_standalone_darwin
enable-experimental-differentiable-programming=0
enable-experimental-concurrency=0
enable-experimental-distributed=0
enable-experimental-observation=0

stdlib-deployment-targets=freestanding-x86_64
language-primary-variant-sdk=FREESTANDING
language-primary-variant-arch=x86_64
language-freestanding-flavor=apple
language-freestanding-sdk=macosx
language-freestanding-is-darwin=1
language-freestanding-triple-name=macosx11.0
language-freestanding-module-name=macos
language-freestanding-archs=x86_64
build-language-private-stdlib=0

[preset: stdlib_S_standalone_darwin_x86_64,build,test]
mixin-preset=stdlib_S_standalone_darwin_x86_64,build

build-language-private-stdlib=1
test
validation-test

#===----------------------------------------------------------------------===#
# Preset for Source Compatibility Suite
#===----------------------------------------------------------------------===#

[preset: source_compat_suite_base]
build-ninja
llbuild
languagepm
language-driver
language-testing
language-testing-macros
install-llbuild
install-toolchain
install-static-linux-config
install-language
install-languagepm
install-language-driver
install-languagesyntax
install-language-testing
install-language-testing-macros
reconfigure
verbose-build
skip-build-benchmarks

install-destdir=%(install_destdir)s
install-prefix=%(install_prefix)s
installable-package=%(installable_package)s

[preset: source_compat_suite_macos_base]
mixin-preset=source_compat_suite_base
build-subdir=compat_macos
ios
tvos
watchos
compiler-vendor=apple
darwin-install-extract-symbols
darwin-toolchain-alias=language
darwin-toolchain-bundle-identifier=org.code.compat-macos
darwin-toolchain-display-name-short=Codira Development Snapshot
darwin-toolchain-display-name=Codira Development Snapshot
darwin-toolchain-name=language-DEVELOPMENT-SNAPSHOT
darwin-toolchain-version=3.999.999
toolchain-install-components=clang;clang-resource-headers;builtins;runtimes;libclang;libclang-headers;dsymutil;clang-features-file
language-install-components=back-deployment;compiler;clang-builtin-headers;stdlib;libexec;sdk-overlay;license;sourcekit-xpc-service;sourcekit-inproc;language-remote-mirror;language-remote-mirror-headers
symbols-package=%(symbols_package)s
install-symroot=%(install_symroot)s

[preset: source_compat_suite_linux_base]
mixin-preset=source_compat_suite_base
build-subdir=compat_linux
foundation
libdispatch
xctest
language-testing
language-testing-macros
install-foundation
install-libdispatch
install-language-testing
install-language-testing-macros
install-xctest
language-install-components=autolink-driver;compiler;clang-builtin-headers;stdlib;libexec;language-remote-mirror;sdk-overlay;license

toolchain-cmake-options=
  -DCLANG_DEFAULT_LINKER=gold

[preset: source_compat_suite_macos_DA]
mixin-preset=source_compat_suite_macos_base
debug
assertions
cross-compile-hosts=macosx-arm64

[preset: source_compat_suite_macos_RA]
mixin-preset=source_compat_suite_macos_base
release
assertions
cross-compile-hosts=macosx-arm64

[preset: source_compat_suite_macos_R]
mixin-preset=source_compat_suite_macos_base
release
no-assertions
cross-compile-hosts=macosx-arm64

[preset: source_compat_suite_macos_D]
mixin-preset=source_compat_suite_macos_base
debug
no-assertions
cross-compile-hosts=macosx-arm64

[preset: source_compat_suite_linux_DA]
mixin-preset=source_compat_suite_linux_base
debug
assertions

[preset: source_compat_suite_linux_RA]
mixin-preset=source_compat_suite_linux_base
release
assertions

[preset: source_compat_suite_linux_R]
mixin-preset=source_compat_suite_linux_base
release
no-assertions

[preset: source_compat_suite_linux_D]
mixin-preset=source_compat_suite_linux_base
debug
no-assertions

[preset: sourcekit_stress_test_mixin]
languagesyntax
skstresstester
install-skstresstester

[preset: sourcekit_stress_test_macos_D]
mixin-preset=
    source_compat_suite_macos_D
    sourcekit_stress_test_mixin

[preset: sourcekit_stress_test_macos_DA]
mixin-preset=
    source_compat_suite_macos_DA
    sourcekit_stress_test_mixin

[preset: sourcekit_stress_test_macos_R]
mixin-preset=
    source_compat_suite_macos_R
    sourcekit_stress_test_mixin

[preset: sourcekit_stress_test_macos_RA]
mixin-preset=
    source_compat_suite_macos_RA
    sourcekit_stress_test_mixin

[preset: linux_lldb]
lldb
foundation
libdispatch
build-ninja

release
reconfigure

test

skip-test-cmark
skip-test-language
skip-build-benchmarks
skip-test-foundation

toolchain-cmake-options=
  -DCLANG_DEFAULT_LINKER=gold

#===------------------------------------------------------------------------===#
# Toolchain Bootstrapping Stages
#===------------------------------------------------------------------------===#
# Build Requirements:
#   - C and C++ compiler
# Toolchain Outputs:
#   - Codira Compiler (-CodiraDriver, -macros, -CodiraSilOpts)
# Runtime Outputs:
#   - Codira Standard Library (-macros)
[preset: bootstrap_stage0]
mixin-preset=
  mixin_buildbot_linux,no_test

language-include-tests=0
toolchain-include-tests=0

release
libdispatch

skip-early-languagesyntax
skip-early-language-driver
skip-build-benchmarks
build-language-examples=0

build-runtime-with-host-compiler=0
build-language-libexec=0
build-language-remote-mirror=0
build-language-static-sdk-overlay=0
build-language-static-stdlib=0
enable-experimental-concurrency=1
enable-experimental-distributed=0
enable-experimental-observation=0
enable-experimental-differentiable-programming=0

extra-toolchain-cmake-options=
  -DTOOLCHAIN_TARGETS_TO_BUILD=AArch64;X86

extra-language-cmake-options=
  -DLANGUAGE_ENABLE_LANGUAGE_IN_LANGUAGE:BOOL=NO
  -DLANGUAGE_INCLUDE_DOCS:BOOL=NO
  -DLANGUAGE_BUILD_EXAMPLES:BOOL=OFF

build-subdir=%(build_subdir)s
install-destdir=%(install_destdir)s

language-install-components=autolink-driver;compiler;clang-resource-dir-symlink;stdlib;sdk-overlay;toolchain-tools
toolchain-install-components=toolchain-ar;toolchain-ranlib;clang;clang-resource-headers;builtins;runtimes;clang-features-file;toolchain-symbolizer

install-toolchain
install-language
install-libdispatch

# Build Toolchain Requirements:
# - C/C++ compiler
# - Codira Compiler (-CodiraDriver, -macros, -CodiraSilOpts)
# Toolchain Outputs:
# - Codira Compiler (-CodiraDriver, +macros, +CodiraSilOpts)
# Runtime Outputs:
# - Standard Library (+macros)
# - Dispatch
# - Foundation (+macros)
[preset: bootstrap_stage1]
mixin-preset=mixin_buildbot_linux,no_test
bootstrapping=hosttools

release
foundation
libdispatch

skip-early-language-driver
skip-build-benchmarks

enable-experimental-concurrency=1

extra-cmake-options=
  -DTOOLCHAIN_TARGETS_TO_BUILD=AArch64;X86

language-install-components=autolink-driver;compiler;clang-resource-dir-symlink;stdlib;sdk-overlay;toolchain-tools;license
toolchain-install-components=toolchain-ar;toolchain-ranlib;clang;clang-resource-headers;builtins;runtimes;clang-features-file;lld

build-subdir=%(build_subdir)s
install-destdir=%(install_destdir)s

install-toolchain
install-language
install-foundation
install-libdispatch

[preset: bootstrap_stage2]
mixin-preset=mixin_buildbot_linux,no_test
bootstrapping=hosttools

release

skip-early-language-driver

llbuild
xctest
language-testing
language-testing-macros
languagepm

language-include-tests=0
toolchain-include-tests=0


foundation
libdispatch

skip-build-benchmarks
skip-test-cmark

build-subdir=%(build_subdir)s
install-destdir=%(install_destdir)s

language-install-components=autolink-driver;compiler;clang-resource-dir-symlink;stdlib;sdk-overlay;toolchain-tools;license
toolchain-install-components=toolchain-ar;toolchain-ranlib;clang;clang-resource-headers;builtins;runtimes;clang-features-file;lld

install-toolchain
install-language
install-foundation
install-libdispatch
install-llbuild
install-languagepm
install-language-testing
install-language-testing-macros
install-xctest

[preset: wasm_stdlib,macos]

mixin-preset=mixin_buildbot_install_components_with_clang
llbuild
languagepm
language-driver
languagesyntax
skip-test-languagepm
language-testing
language-testing-macros
build-wasm-stdlib

release
build-ninja

build-embedded-stdlib-cross-compiling

# Don't build the benchmarks
skip-build-benchmarks

install-toolchain
install-language
install-llbuild
install-languagepm
install-language-driver
install-languagesyntax
install-language-testing
install-language-testing-macros
install-wasmkit
install-destdir=%(install_destdir)s
#
# Path where the compiler, the runtime and the standard libraries will be
# installed.
install-prefix=%(install_toolchain_dir)s/usr

# Executes the lit tests for the installable package that is created
# Assumes the language-integration-tests repo is checked out

; test-installable-package

# If someone uses this for incremental builds, force reconfiguration.
reconfigure

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

# Info.plist
darwin-toolchain-bundle-identifier=%(darwin_toolchain_bundle_identifier)s
darwin-toolchain-display-name=%(darwin_toolchain_display_name)s
darwin-toolchain-display-name-short=%(darwin_toolchain_display_name_short)s
darwin-toolchain-name=%(darwin_toolchain_xctoolchain_name)s
darwin-toolchain-version=%(darwin_toolchain_version)s
darwin-toolchain-alias=%(darwin_toolchain_alias)s
darwin-toolchain-require-use-os-runtime=0

build-subdir=wasm_stdlib

# For local use only. This allows quickly rebuilding and testing Wasm stdlib
# end-to-end without rebuilding the whole toolchain.
[preset: wasm_stdlib_incremental]

assertions
language-enable-ast-verifier=0
no-language-stdlib-assertions
build-embedded-stdlib-cross-compiling
build-wasm-stdlib
release-debuginfo
test
lit-args=-v --time-tests
skip-test-languagedocc
skip-test-cmark
skip-test-lldb
skip-test-language
skip-test-llbuild
skip-test-languagepm
skip-test-language-driver
skip-test-xctest
skip-test-foundation
skip-test-libdispatch
skip-test-playgroundsupport
skip-test-indexstore-db
skip-test-sourcekit-lsp
skip-test-languageformat
skip-build-toolchain
skip-build-language
skip-early-language-driver
skip-build-cmark
install-destdir=%(install_destdir)s
build-subdir=wasm_stdlib_incremental

[preset: wasm_stdlib_incremental,macos]

mixin-preset=wasm_stdlib_incremental
build-subdir=buildbot_osx
