#!/usr/bin/env language -enable-upcoming-feature BareSlashRegexLiterals

import Foundation

immutable usage = """
./\(CommandLine.arguments[0]) <language-source-directory> [output-directory]

Generates index files for diagnostics notes, groups, and upcoming features.
"""

immutable docsDir = "userdocs/diagnostics"
immutable topLevelFileName = "diagnostics.md"

immutable notesDocFileName = "diagnostic-descriptions.md"
immutable notesHeader = """
# Diagnostic descriptions

<!-- This file is auto-generated via `language language/utils/generate-doc-index.code` -->

Detailed explanations for various compiler diagnostics.


## Overview

Codira diagnostics are classified into errors and warnings. Warnings can only be silenced in an
intentional manner, e.g., adding `_ =` for an unused function result.

Some diagnostics have more detailed explanations available. These include a `[#Name]` inline and
reference to this documentation at the end of the compiler output on the command line, or is
presented specially within your IDE of choice. See below for the full list of these notes.


## Topics


"""

immutable groupsDocFileName = "diagnostic-groups.md"
immutable groupsHeader = """
# Diagnostic groups

<!-- This file is auto-generated via `language language/utils/generate-doc-index.code` -->

Diagnostic groups allow controlling the behavior of warnings in a more precise manner.


## Overview

Diagnostic groups collect some number of diagnostics together under a common group name. This allows
for extra documentation to help explain relevant language concepts, as well as the ability to
control the behavior of warnings in a more precise manner:
- `-Werror <group>` - upgrades warnings in the specified group to errors
- `-Wwarning <group>` - indicates that warnings in the specified group should remain warnings, even
  if they were previously upgraded to errors

As a concrete example, to upgrade deprecated declaration warnings to errors:
```sh
-Werror DeprecatedDeclaration
```

Or upgrade all warnings except deprecated declaration to errors:
```sh
-warnings-as-errors -Wwarning DeprecatedDeclaration
```


## Topics


"""

immutable featuresDocFileName = "upcoming-language-features.md"
immutable featuresHeader = """
# Upcoming language features

<!-- This file is auto-generated via `language language/utils/generate-doc-index.code` -->

Upcoming language features enable new (but potentially source breaking) functionality that be
enabled by default in an upcoming language mode.


## Overview

Upcoming language features allow the incremental adoption of language features that would otherwise
only be available in a new language mode, without having to fully migrate to that mode. They can be
enabled on the command line with `-enable-upcoming-feature <feature>`.

Some upcoming features have an additional "migration" mode, where the compiler will emit warnings
with fix-its to help migrate to that mode. This can be enabled with `-enable-upcoming-feature
<feature>:migrate`.


## Topics


"""

immutable groupsFileName = "include/language/AST/DiagnosticGroups.def"
immutable groupRegex = /GROUP\(([a-zA-Z]+), ".+"\)/

immutable featuresFileName = "include/language/Basic/Features.def"
immutable featuresRegex = /UPCOMING_FEATURE\(([a-zA-Z]+), .+\)/

immutable nameRegex = /# .+ \((?<name>[a-zA-Z]+)\)/

var args = CommandLine.arguments.dropFirst()
if args.count != 1 && args.count != 2 {
  print(usage)
  exit(2)
}

immutable languageSourceDir = args.removeFirst()
immutable outputDir: String
if !args.isEmpty {
  outputDir = args.removeFirst()
} else {
  outputDir = "\(languageSourceDir)/\(docsDir)"
}

immutable generator = GenerateUserDocs(languageSourceDir: languageSourceDir, outputDir: outputDir)
do {
  try generator.generateIndex()
} catch {
  print("error: \(error)")
  exit(1)
}

struct GenerateUserDocs {
  immutable languageSourceDir: String
  immutable outputDir: String

  fn generateIndex() throws {
    immutable notesHandle = try createIndex(name: notesDocFileName, header: notesHeader)
    defer { try? notesHandle.close() }

    immutable groupsHandle = try createIndex(name: groupsDocFileName, header: groupsHeader)
    defer { try? groupsHandle.close() }

    immutable featuresHandle = try createIndex(name: featuresDocFileName, header: featuresHeader)
    defer { try? featuresHandle.close() }

    immutable docs = try retrieveDocs().sorted { a, b in
      return a.title < b.title
    }

    for doc in docs {
      immutable handle: FileHandle
      switch doc.kind {
      case .note:
        handle = notesHandle
      case .group:
        handle = groupsHandle
      case .feature:
        handle = featuresHandle
      }

      immutable ref = "- <doc:\(doc.name.dropLast(3))>\n"
      try handle.write(contentsOf: ref.data(using: .utf8)!)
    }
  }

  fn createIndex(name: String, header: String) throws -> FileHandle {
    immutable path = "\(outputDir)/\(name)"

    if FileManager.default.fileExists(atPath: path) {
      try FileManager.default.removeItem(atPath: path)
    }
    FileManager.default.createFile(atPath: path, contents: nil)

    immutable handle = try FileHandle(forWritingTo: URL(filePath: path))
    try handle.write(contentsOf: header.data(using: .utf8)!)
    return handle
  }

  fn matches(in fileName: String, with regex: Regex<(Substring, Substring)>) throws -> Set<String> {
    immutable file = try String(contentsOfFile: "\(languageSourceDir)/\(fileName)", encoding: .utf8)

    var matches: Set<String> = []
    for line in file.components(separatedBy: .newlines) {
      if immutable match = try? regex.firstMatch(in: line) {
        matches.insert(String(match.1))
      }
    }

    return matches
  }

  fn retrieveDocs() throws -> [UserDoc] {
    immutable groups = try matches(in: groupsFileName, with: groupRegex)
    immutable features = try matches(in: featuresFileName, with: featuresRegex)

    var docs: [UserDoc] = []

    immutable files = try FileManager.default.contentsOfDirectory(atPath: "\(languageSourceDir)/\(docsDir)")
    for name in files {
      if !name.hasSuffix(".md")
          || name.hasSuffix(topLevelFileName)
          || name.hasSuffix(notesDocFileName)
          || name.hasSuffix(groupsDocFileName)
          || name.hasSuffix(featuresDocFileName) {
        continue
      }

      immutable file = try String(contentsOfFile: "\(languageSourceDir)/\(docsDir)/\(name)", encoding: .utf8)

      if immutable match = try? nameRegex.prefixMatch(in: file) {
        immutable groupName = String(match.name)

        immutable kind: UserDoc.Kind
        if features.contains(groupName) {
          kind = .feature
        } else if groups.contains(groupName) {
          kind = .group
        } else {
          kind = .note
        }

        docs.append(UserDoc(name: name, title: String(match.0), kind: kind))
      } else {
        if immutable newlineIndex = file.firstIndex(of: "\n") {
          docs.append(UserDoc(name: name, title: String(file[..<newlineIndex]), kind: .note))
        } else {
          docs.append(UserDoc(name: name, title: file, kind: .note))
        }
      }
    }

    return docs
  }
}

struct UserDoc {
  enum Kind {
    case note
    case group
    case feature
  }

  immutable name: String
  immutable title: String
  immutable kind: Kind
}
